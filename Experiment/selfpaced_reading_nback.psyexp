<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2021.2.3">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="ptb" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': '', 'age': '', 'handedness': 'r', 'gender': 'w', 'testing_mode': 'yes'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="False" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="list"/>
    <Param name="Save csv file" updates="None" val="True" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save hdf5 file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="False" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="deg" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1500, 1000]" valType="list"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="" valType="color"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="elAddress" updates="None" val="100.1.1.1" valType="str"/>
    <Param name="elDataFiltering" updates="None" val="FILTER_LEVEL_2" valType="str"/>
    <Param name="elLiveFiltering" updates="None" val="FILTER_LEVEL_OFF" valType="str"/>
    <Param name="elModel" updates="None" val="EYELINK 1000 DESKTOP" valType="str"/>
    <Param name="elPupilAlgorithm" updates="None" val="ELLIPSE_FIT" valType="str"/>
    <Param name="elPupilMeasure" updates="None" val="PUPIL_AREA" valType="str"/>
    <Param name="elSampleRate" updates="None" val="1000" valType="num"/>
    <Param name="elSimMode" updates="None" val="False" valType="bool"/>
    <Param name="elTrackEyes" updates="None" val="RIGHT_EYE" valType="str"/>
    <Param name="elTrackingMode" updates="None" val="PUPIL_CR_TRACKING" valType="str"/>
    <Param name="expName" updates="None" val="EXNAT-2" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="eyetracker" updates="None" val="None" valType="str"/>
    <Param name="gpAddress" updates="None" val="127.0.0.1" valType="str"/>
    <Param name="gpPort" updates="None" val="4242" valType="num"/>
    <Param name="keyboardBackend" updates="None" val="Pyglet" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
    <Param name="mgBlink" updates="None" val="('MIDDLE_BUTTON',)" valType="list"/>
    <Param name="mgMove" updates="None" val="CONTINUOUS" valType="str"/>
    <Param name="mgSaccade" updates="None" val="0.5" valType="num"/>
    <Param name="plConfidenceThreshold" updates="None" val="0.6" valType="num"/>
    <Param name="plPupilCaptureRecordingEnabled" updates="None" val="True" valType="bool"/>
    <Param name="plPupilCaptureRecordingLocation" updates="None" val="" valType="str"/>
    <Param name="plPupilRemoteAddress" updates="None" val="127.0.0.1" valType="str"/>
    <Param name="plPupilRemotePort" updates="None" val="50020" valType="num"/>
    <Param name="plPupilRemoteTimeoutMs" updates="None" val="1000" valType="num"/>
    <Param name="plPupillometryOnly" updates="None" val="False" valType="bool"/>
    <Param name="plSurfaceName" updates="None" val="psychopy_iohub_surface" valType="str"/>
    <Param name="tbLicenseFile" updates="None" val="" valType="str"/>
    <Param name="tbModel" updates="None" val="" valType="str"/>
    <Param name="tbSampleRate" updates="None" val="60" valType="num"/>
    <Param name="tbSerialNo" updates="None" val="" valType="str"/>
  </Settings>
  <Routines>
    <Routine name="Q1">
      <CodeComponent name="code_Q1">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="##########################################################&amp;#10;#            Text Comprehension Questions - Q1           #&amp;#10;##########################################################&amp;#10;&amp;#10;### Settings:&amp;#10;# keep background ivory&amp;#10;win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;win.flip()&amp;#10;&amp;#10;# clear buffer of all previously recorded key events:&amp;#10;event.clearEvents()&amp;#10;&amp;#10;# check which kind of block we have&amp;#10;# if there was no text before, we can skip the questions&amp;#10;if skip_questions:&amp;#10;    continueRoutine = False&amp;#10;# if we have a training text, set training questions&amp;#10;elif skip_questions == False and training_Qs:&amp;#10;    Q1 = reading_bl_tr_Q1&amp;#10;    Q1_answers = reading_bl_tr_Q1_ans&amp;#10;    Q1_corr = reading_bl_tr_Q1_corr&amp;#10;    &amp;#10;# if we have a main text, set regular questions&amp;#10;elif skip_questions == False and training_Qs == False:&amp;#10;    # load first question for current text &amp; their respective answers&amp;#10;    Q1 = locals()[curr_text_nr + &quot;_Q1&quot;]&amp;#10;    Q1_answers = locals()[curr_text_nr + &quot;_Q1_ans&quot;]&amp;#10;    Q1_corr = locals()[curr_text_nr + &quot;_Q1_corr&quot;]&amp;#10;&amp;#10;# Define text positions and formatting&amp;#10;question_pos = (0, 3)&amp;#10;answer_xpos = -7 # move questions a bit to the left &amp;#10;answer_ypos = [ 0, -2, -4, -6] # set the y axis positions of all 4 answers&amp;#10;&amp;#10;# Create text stim for the question:&amp;#10;question = visual.TextStim(win, &amp;#10;                           text = Q1, &amp;#10;                           pos = question_pos,&amp;#10;                           color = &quot;black&quot;,&amp;#10;                           height = 0.5,&amp;#10;                           font = &quot;Bookman Old Style&quot;,&amp;#10;                           anchorHoriz = 'center',&amp;#10;                           alignText = 'center', &amp;#10;                           wrapWidth = 10)&amp;#10;# create 1 text stim for each answer option:&amp;#10;answers = [visual.TextStim(win, &amp;#10;                           text = Q1_answers[i], &amp;#10;                           pos = (answer_xpos, answer_ypos[i]), &amp;#10;                           color = &quot;black&quot;, # set all to black as a default&amp;#10;                           height = 0.5, &amp;#10;                           font = &quot;Bookman Old Style&quot;,&amp;#10;                           wrapWidth = 15,&amp;#10;                           anchorHoriz = 'left', &amp;#10;                           alignText = 'center') for i in range(len(Q1_answers))]&amp;#10;# set up instruction text&amp;#10;instr_text = visual.TextStim(win, &amp;#10;                             text = &quot;(Bitte benutzen Sie die Pfeiltasten um die richtige Antwort auszuwählen. Mit der Leertaste können Sie Ihre Auswahl bestätigen.)&quot;,&amp;#10;                             color = &quot;grey&quot;,&amp;#10;                             pos = (0, -10),&amp;#10;                             wrapWidth = 20,&amp;#10;                             height = 0.4,&amp;#10;                             font = &quot;Bookman Old Style&quot;)&amp;#10;&amp;#10;### Show all on screen until I set .autoDraw = False&amp;#10;question.autoDraw = True&amp;#10;instr_text.autoDraw = True&amp;#10;for answer in answers:&amp;#10;    answer.autoDraw = True&amp;#10;win.flip()&amp;#10;&amp;#10;&amp;#10;### Record key responses:&amp;#10;Q1_chosen_ans = None&amp;#10;&amp;#10;while True:        &amp;#10;    # if 1 was pressed...&amp;#10;    if event.getKeys(['1']):&amp;#10;        print('a')&amp;#10;        # save Q1 answer as a &amp;#10;        Q1_chosen_ans = &quot;a&quot;&amp;#10;        # set font colour of the first answer (answer a) to &amp;#10;        # green and the rest to black:&amp;#10;        answers[0].setColor(&quot;green&quot;)&amp;#10;        for answer in answers[1:]:&amp;#10;            answer.setColor(&quot;black&quot;)&amp;#10;            # draw updated stimulus:&amp;#10;            win.flip()&amp;#10;    # same procedure for all other answer options:&amp;#10;    if event.getKeys(['2']):&amp;#10;        print('b')&amp;#10;        Q1_chosen_ans = &quot;b&quot;&amp;#10;        # set font colour of the second answer (answer b) to &amp;#10;        # green and the rest to black:&amp;#10;        answers[1].setColor(&quot;green&quot;)&amp;#10;        for answer in [answers[0]] + answers[2:]:&amp;#10;            answer.setColor(&quot;black&quot;)&amp;#10;            # draw updated stimulus:&amp;#10;            win.flip()&amp;#10;    if event.getKeys(['3']):&amp;#10;        print('c')&amp;#10;        Q1_chosen_ans = &quot;c&quot;&amp;#10;        # set font colour of the third answer (answer c) to &amp;#10;        # green and the rest to black:&amp;#10;        answers[2].setColor(&quot;green&quot;)&amp;#10;        for answer in answers[:2] + answers[3:]:&amp;#10;            answer.setColor(&quot;black&quot;)&amp;#10;        # draw updated stimulus:&amp;#10;        win.flip()&amp;#10;    if event.getKeys(['4']):&amp;#10;        print('d')&amp;#10;        Q1_chosen_ans = &quot;d&quot;&amp;#10;        # set font colour of the fourth answer (answer d) to &amp;#10;        # green and the rest to black:&amp;#10;        answers[3].setColor(&quot;green&quot;)&amp;#10;        for answer in answers[:-1]:&amp;#10;            answer.setColor(&quot;black&quot;)&amp;#10;        # draw updated stimulus &amp;#10;        win.flip()&amp;#10;    # if participant pressed &quot;space&quot;, check whether they chose an answer.&amp;#10;    # if yes, end this routine and go to next question, if not, wait for valid answer.&amp;#10;    elif event.getKeys(['space']) and Q1_chosen_ans != None:&amp;#10;        break&amp;#10;&amp;#10;# print chosen answer for Q1&amp;#10;print(&quot;answer for Q1:&quot; + str(Q1_chosen_ans))&amp;#10;&amp;#10;# check if answer was correct:&amp;#10;if Q1_chosen_ans == Q1_corr: &amp;#10;    print(&quot;answer correct!&quot;)&amp;#10;else: &amp;#10;    print(&quot;answer incorrect!&quot;)&amp;#10;    &amp;#10;# save data:&amp;#10;thisExp.addData('question', 'Q1')&amp;#10;thisExp.addData('chosen_ans', Q1_chosen_ans)&amp;#10;thisExp.addData('ans_correct', Q1_chosen_ans == Q1_corr)&amp;#10;thisExp.addData('text_nr', curr_text_nr)&amp;#10;thisExp.addData('block_nr', exp_block_counter)&amp;#10;thisExp.addData('block_name', curr_block)&amp;#10;thisExp.addData('block_kind', curr_nback_cond)&amp;#10;                &amp;#10;# start a new row in the csv&amp;#10;thisExp.nextEntry()&amp;#10;&amp;#10;### End Q1: Set .autoDraw = False to stop showing question &amp; answers&amp;#10;question.autoDraw = False&amp;#10;instr_text.autoDraw = False&amp;#10;for answer in answers:&amp;#10;    answer.autoDraw = False&amp;#10;&amp;#10;# end current routine&amp;#10;continueRoutine = False" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_Q1" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Q2">
      <CodeComponent name="code_Q2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="##########################################################&amp;#10;#            Text Comprehension Questions - Q2           #&amp;#10;##########################################################&amp;#10;&amp;#10;### Settings:&amp;#10;# keep background ivory&amp;#10;win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;win.flip()&amp;#10;&amp;#10;# clear buffer of all previously recorded key events:&amp;#10;event.clearEvents()&amp;#10;&amp;#10;# check which kind of block we have&amp;#10;# if there was no text before, we can skip the questions&amp;#10;if skip_questions:&amp;#10;    continueRoutine = False&amp;#10;# if we have a training text, set training questions&amp;#10;elif skip_questions == False and training_Qs:&amp;#10;    Q2 = reading_bl_tr_Q2&amp;#10;    Q2_answers = reading_bl_tr_Q2_ans&amp;#10;    Q2_corr = reading_bl_tr_Q2_corr&amp;#10;    &amp;#10;# if we have a main text, set regular questions&amp;#10;elif skip_questions == False and training_Qs == False:&amp;#10;    # load first question for current text &amp; their respective answers&amp;#10;    Q2 = locals()[curr_text_nr + &quot;_Q2&quot;]&amp;#10;    Q2_answers = locals()[curr_text_nr + &quot;_Q2_ans&quot;]&amp;#10;    Q2_corr = locals()[curr_text_nr + &quot;_Q2_corr&quot;]&amp;#10;&amp;#10;# Define text positions and formatting&amp;#10;question_pos = (0, 3)&amp;#10;answer_xpos = -7 # move questions a bit to the left &amp;#10;answer_ypos = [ 0, -2, -4, -6] # set the y axis positions of all 4 answers&amp;#10;&amp;#10;# Create text stim for the question:&amp;#10;question = visual.TextStim(win, &amp;#10;                           text = Q2, &amp;#10;                           pos = question_pos,&amp;#10;                           color = &quot;black&quot;,&amp;#10;                           height = 0.5,&amp;#10;                           font = &quot;Bookman Old Style&quot;,&amp;#10;                           anchorHoriz = 'center',&amp;#10;                           alignText = 'center', &amp;#10;                           wrapWidth = 10)&amp;#10;# create 1 text stim for each answer option:&amp;#10;answers = [visual.TextStim(win, &amp;#10;                           text = Q2_answers[i], &amp;#10;                           pos = (answer_xpos, answer_ypos[i]), &amp;#10;                           color = &quot;black&quot;, # set all to black as a default&amp;#10;                           height = 0.5, &amp;#10;                           font = &quot;Bookman Old Style&quot;,&amp;#10;                           wrapWidth = 15,&amp;#10;                           anchorHoriz = 'left', &amp;#10;                           alignText = 'center') for i in range(len(Q1_answers))]&amp;#10;# set up instruction text&amp;#10;instr_text = visual.TextStim(win, &amp;#10;                             text = &quot;(Bitte benutzen Sie die Pfeiltasten um die richtige Antwort auszuwählen. Mit der Leertaste können Sie Ihre Auswahl bestätigen.)&quot;,&amp;#10;                             color = &quot;grey&quot;,&amp;#10;                             pos = (0, -10),&amp;#10;                             wrapWidth = 20,&amp;#10;                             height = 0.4,&amp;#10;                             font = &quot;Bookman Old Style&quot;)&amp;#10;### Show all on screen until I set .autoDraw = False&amp;#10;question.autoDraw = True&amp;#10;instr_text.autoDraw = True&amp;#10;for answer in answers:&amp;#10;    answer.autoDraw = True&amp;#10;win.flip()&amp;#10;&amp;#10;&amp;#10;### Record key responses:&amp;#10;Q2_chosen_ans = None&amp;#10;&amp;#10;while True:        &amp;#10;    # if 1 was pressed...&amp;#10;    if event.getKeys(['1']):&amp;#10;        print('a')&amp;#10;        # save Q2 answer as a &amp;#10;        Q2_chosen_ans = &quot;a&quot;&amp;#10;        # set font colour of the first answer (answer a) to &amp;#10;        # green and the rest to black:&amp;#10;        answers[0].setColor(&quot;green&quot;)&amp;#10;        for answer in answers[1:]:&amp;#10;            answer.setColor(&quot;black&quot;)&amp;#10;            # draw updated stimulus:&amp;#10;            win.flip()&amp;#10;    # same procedure for all other answer options:&amp;#10;    if event.getKeys(['2']):&amp;#10;        print('b')&amp;#10;        Q2_chosen_ans = &quot;b&quot;&amp;#10;        # set font colour of the second answer (answer b) to &amp;#10;        # green and the rest to black:&amp;#10;        answers[1].setColor(&quot;green&quot;)&amp;#10;        for answer in [answers[0]] + answers[2:]:&amp;#10;            answer.setColor(&quot;black&quot;)&amp;#10;            # draw updated stimulus:&amp;#10;            win.flip()&amp;#10;    if event.getKeys(['3']):&amp;#10;        print('c')&amp;#10;        Q2_chosen_ans = &quot;c&quot;&amp;#10;        # set font colour of the third answer (answer c) to &amp;#10;        # green and the rest to black:&amp;#10;        answers[2].setColor(&quot;green&quot;)&amp;#10;        for answer in answers[:2] + answers[3:]:&amp;#10;            answer.setColor(&quot;black&quot;)&amp;#10;        # draw updated stimulus:&amp;#10;        win.flip()&amp;#10;    if event.getKeys(['4']):&amp;#10;        print('d')&amp;#10;        Q2_chosen_ans = &quot;d&quot;&amp;#10;        # set font colour of the fourth answer (answer d) to &amp;#10;        # green and the rest to black:&amp;#10;        answers[3].setColor(&quot;green&quot;)&amp;#10;        for answer in answers[:-1]:&amp;#10;            answer.setColor(&quot;black&quot;)&amp;#10;        # draw updated stimulus &amp;#10;        win.flip()&amp;#10;    # if participant pressed &quot;space&quot;, check whether they chose an answer.&amp;#10;    # if yes, end this routine and go to next question, if not, wait for valid answer.&amp;#10;    elif event.getKeys(['space']) and Q2_chosen_ans != None:&amp;#10;        break&amp;#10;&amp;#10;# print chosen answer for Q2&amp;#10;print(&quot;answer for Q2:&quot; + str(Q2_chosen_ans))&amp;#10;&amp;#10;# check if answer was correct:&amp;#10;if Q2_chosen_ans == Q2_corr: &amp;#10;    print(&quot;answer correct!&quot;)&amp;#10;else: &amp;#10;    print(&quot;answer incorrect!&quot;)&amp;#10;    &amp;#10;# save data:&amp;#10;thisExp.addData('question', 'Q2')&amp;#10;thisExp.addData('chosen_ans', Q2_chosen_ans)&amp;#10;thisExp.addData('ans_correct', Q2_chosen_ans == Q2_corr)&amp;#10;thisExp.addData('text_nr', curr_text_nr)&amp;#10;thisExp.addData('block_nr', exp_block_counter)&amp;#10;thisExp.addData('block_name', curr_block)&amp;#10;thisExp.addData('block_kind', curr_nback_cond)&amp;#10;                &amp;#10;# start a new row in the csv&amp;#10;thisExp.nextEntry()&amp;#10;&amp;#10;### End Q2: Set .autoDraw = False to stop showing question &amp; answers&amp;#10;question.autoDraw = False&amp;#10;instr_text.autoDraw = False&amp;#10;for answer in answers:&amp;#10;    answer.autoDraw = False&amp;#10;&amp;#10;# end current routine&amp;#10;continueRoutine = False" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_Q2" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Q3">
      <CodeComponent name="code_Q3">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="##########################################################&amp;#10;#            Text Comprehension Questions - Q3           #&amp;#10;##########################################################&amp;#10;&amp;#10;### Settings:&amp;#10;# keep background ivory&amp;#10;win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;win.flip()&amp;#10;&amp;#10;# clear buffer of all previously recorded key events:&amp;#10;event.clearEvents()&amp;#10;&amp;#10;# check which kind of block we have&amp;#10;# if there was no text before, we can skip the questions&amp;#10;if skip_questions:&amp;#10;    continueRoutine = False&amp;#10;# if we have a training text, set training questions&amp;#10;elif skip_questions == False and training_Qs:&amp;#10;    Q3 = reading_bl_tr_Q3&amp;#10;    Q3_answers = reading_bl_tr_Q3_ans&amp;#10;    Q3_corr = reading_bl_tr_Q3_corr&amp;#10;    &amp;#10;# if we have a main text, set regular questions&amp;#10;elif skip_questions == False and training_Qs == False:&amp;#10;    # load first question for current text &amp; their respective answers&amp;#10;    Q3 = locals()[curr_text_nr + &quot;_Q3&quot;]&amp;#10;    Q3_answers = locals()[curr_text_nr + &quot;_Q3_ans&quot;]&amp;#10;    Q3_corr = locals()[curr_text_nr + &quot;_Q3_corr&quot;]&amp;#10;&amp;#10;# Define text positions and formatting&amp;#10;question_pos = (0, 3)&amp;#10;answer_xpos = -7 # move questions a bit to the left &amp;#10;answer_ypos = [ 0, -2, -4, -6] # set the y axis positions of all 4 answers&amp;#10;&amp;#10;# Create text stim for the question:&amp;#10;question = visual.TextStim(win, &amp;#10;                           text = Q3, &amp;#10;                           pos = question_pos,&amp;#10;                           color = &quot;black&quot;,&amp;#10;                           height = 0.5,&amp;#10;                           font = &quot;Bookman Old Style&quot;,&amp;#10;                           anchorHoriz = 'center',&amp;#10;                           alignText = 'center', &amp;#10;                           wrapWidth = 10)&amp;#10;# create 1 text stim for each answer option:&amp;#10;answers = [visual.TextStim(win, &amp;#10;                           text = Q3_answers[i], &amp;#10;                           pos = (answer_xpos, answer_ypos[i]), &amp;#10;                           color = &quot;black&quot;, # set all to black as a default&amp;#10;                           height = 0.5, &amp;#10;                           font = &quot;Bookman Old Style&quot;,&amp;#10;                           wrapWidth = 15,&amp;#10;                           anchorHoriz = 'left', &amp;#10;                           alignText = 'center') for i in range(len(Q1_answers))]&amp;#10;# set up instruction text&amp;#10;instr_text = visual.TextStim(win, &amp;#10;                             text = &quot;(Bitte benutzen Sie die Pfeiltasten um die richtige Antwort auszuwählen. Mit der Leertaste können Sie Ihre Auswahl bestätigen.)&quot;,&amp;#10;                             color = &quot;grey&quot;,&amp;#10;                             pos = (0, -10),&amp;#10;                             wrapWidth = 20,&amp;#10;                             height = 0.4,&amp;#10;                             font = &quot;Bookman Old Style&quot;)&amp;#10;                             &amp;#10;### Show all on screen until I set .autoDraw = False&amp;#10;question.autoDraw = True&amp;#10;instr_text.autoDraw = True&amp;#10;for answer in answers:&amp;#10;    answer.autoDraw = True&amp;#10;win.flip()&amp;#10;&amp;#10;&amp;#10;### Record key responses:&amp;#10;Q3_chosen_ans = None&amp;#10;&amp;#10;while True:        &amp;#10;    # if 1 was pressed...&amp;#10;    if event.getKeys(['1']):&amp;#10;        print('a')&amp;#10;        # save Q3 answer as a &amp;#10;        Q3_chosen_ans = &quot;a&quot;&amp;#10;        # set font colour of the first answer (answer a) to &amp;#10;        # green and the rest to black:&amp;#10;        answers[0].setColor(&quot;green&quot;)&amp;#10;        for answer in answers[1:]:&amp;#10;            answer.setColor(&quot;black&quot;)&amp;#10;            # draw updated stimulus:&amp;#10;            win.flip()&amp;#10;    # same procedure for all other answer options:&amp;#10;    if event.getKeys(['2']):&amp;#10;        print('b')&amp;#10;        Q3_chosen_ans = &quot;b&quot;&amp;#10;        # set font colour of the second answer (answer b) to &amp;#10;        # green and the rest to black:&amp;#10;        answers[1].setColor(&quot;green&quot;)&amp;#10;        for answer in [answers[0]] + answers[2:]:&amp;#10;            answer.setColor(&quot;black&quot;)&amp;#10;            # draw updated stimulus:&amp;#10;            win.flip()&amp;#10;    if event.getKeys(['3']):&amp;#10;        print('c')&amp;#10;        Q3_chosen_ans = &quot;c&quot;&amp;#10;        # set font colour of the third answer (answer c) to &amp;#10;        # green and the rest to black:&amp;#10;        answers[2].setColor(&quot;green&quot;)&amp;#10;        for answer in answers[:2] + answers[3:]:&amp;#10;            answer.setColor(&quot;black&quot;)&amp;#10;        # draw updated stimulus:&amp;#10;        win.flip()&amp;#10;    if event.getKeys(['4']):&amp;#10;        print('d')&amp;#10;        Q3_chosen_ans = &quot;d&quot;&amp;#10;        # set font colour of the fourth answer (answer d) to &amp;#10;        # green and the rest to black:&amp;#10;        answers[3].setColor(&quot;green&quot;)&amp;#10;        for answer in answers[:-1]:&amp;#10;            answer.setColor(&quot;black&quot;)&amp;#10;        # draw updated stimulus &amp;#10;        win.flip()&amp;#10;    # if participant pressed &quot;space&quot;, check whether they chose an answer.&amp;#10;    # if yes, end this routine and go to next question, if not, wait for valid answer.&amp;#10;    elif event.getKeys(['space']) and Q3_chosen_ans != None:&amp;#10;        break&amp;#10;&amp;#10;# print chosen answer for Q3&amp;#10;print(&quot;answer for Q3:&quot; + str(Q3_chosen_ans))&amp;#10;&amp;#10;# check if answer was correct:&amp;#10;if Q3_chosen_ans == Q3_corr: &amp;#10;    print(&quot;answer correct!&quot;)&amp;#10;else: &amp;#10;    print(&quot;answer incorrect!&quot;)&amp;#10;    &amp;#10;# save data:&amp;#10;thisExp.addData('question', 'Q3')&amp;#10;thisExp.addData('chosen_ans', Q3_chosen_ans)&amp;#10;thisExp.addData('ans_correct', Q3_chosen_ans == Q3_corr)&amp;#10;thisExp.addData('text_nr', curr_text_nr)&amp;#10;thisExp.addData('block_nr', exp_block_counter)&amp;#10;thisExp.addData('block_name', curr_block)&amp;#10;thisExp.addData('block_kind', curr_nback_cond)&amp;#10;&amp;#10;# start a new row in the csv&amp;#10;thisExp.nextEntry()&amp;#10;&amp;#10;### End Q3: Set .autoDraw = False to stop showing question &amp; answers&amp;#10;question.autoDraw = False&amp;#10;instr_text.autoDraw = False&amp;#10;for answer in answers:&amp;#10;    answer.autoDraw = False&amp;#10;&amp;#10;# end current routine&amp;#10;continueRoutine = False" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_Q3" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="no_text_blocks">
      <CodeComponent name="code_rectangles">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="#################################################&amp;#10;#                Blocks w/o text                #&amp;#10;#################################################&amp;#10;# this routine is for all blocks where there are &amp;#10;# coloured rectangles instead of words&amp;#10;&amp;#10;&amp;#10;### specify settings for the current block&amp;#10;&amp;#10;### change background colour &amp;#10;# transition from white (RGB: 255, 255, 255)&amp;#10;# to medium grey (RGB: 128, 128, 128)&amp;#10;change_bg_colour(window = win, &amp;#10;                 start_rgb = (255, 255, 255), &amp;#10;                 end_rgb = (10, 10, 10), &amp;#10;                 seconds = 2)&amp;#10;# Wait for a brief period of time so bg is set&amp;#10;core.wait(0.5)&amp;#10;&amp;#10;### Prepare stimuli:&amp;#10;&amp;#10;# get block kind&amp;#10;curr_block = all_blocks[exp_block_counter]&amp;#10;print(&quot;start preparing block &quot; + curr_block)&amp;#10;&amp;#10;# Check whether it's one of the non-text tasks, &amp;#10;&amp;#10;# If current block is a text block, skip this routine and go to the next.&amp;#10;if curr_block not in [&quot;click_training&quot;, &quot;1back_single_training1&quot;, &quot;1back_single_training2&quot;, &amp;#10;                  &quot;1back_single_main&quot;, &quot;2back_single_training1&quot;, &quot;2back_single_training2&quot;, &quot;2back_single_main&quot;]:&amp;#10;    print(&quot;skipping current routine&quot;)&amp;#10;&amp;#10;# if it's one of the non-text blocks, prepare stimuli:&amp;#10;else:&amp;#10;    print(curr_block + &quot;is not a text block - preparing rectangles now&quot;)&amp;#10;    &amp;#10;    # don't show questions&amp;#10;    skip_questions = True&amp;#10;    training_Qs = False&amp;#10;&amp;#10;    # get n-back condition:&amp;#10;    curr_nback_cond = curr_block[0] # get first character of block name&amp;#10;&amp;#10;    # if it is a 1 or a 2, set that as current n-back level:&amp;#10;    if curr_nback_cond in [1, 2]:&amp;#10;        curr_nback_cond == int(curr_nback_cond)&amp;#10;    # if it's neither 1 nor 2, it has to be a block without n-back,&amp;#10;    # so set curr_nback_cond to None&amp;#10;    else:&amp;#10;        curr_nback_cond = None&amp;#10;&amp;#10;    # get list with targets &amp; list with colours&amp;#10;    curr_targets = all_target_lists[exp_block_counter]&amp;#10;    curr_colours = all_colour_lists[exp_block_counter]&amp;#10;    # for current text nr, get text whose name = current text nr&amp;#10;    curr_text = locals()[curr_text_nr]&amp;#10;&amp;#10;# start block loop&amp;#10;&amp;#10;# create empty text stimulus &amp;#10;stim = visual.Rect(win = win,&amp;#10;                   width = 3, # width = 3 visual angle&amp;#10;                   height = 2, # height = 2° visual angle&amp;#10;                   pos = (0,0), # center stimulus &amp;#10;                   fillColor = 'green')&amp;#10;stim.draw()&amp;#10;win.flip()&amp;#10;&amp;#10;# clear buffer of all previously recorded key events:&amp;#10;event.clearEvents()&amp;#10;&amp;#10;# loop colours in current text&amp;#10;for trial_idx, curr_col in enumerate(curr_colours):&amp;#10;    print(&quot;current idx: &quot; + str(trial_idx) + &quot;, curr colour:&quot; + curr_col)&amp;#10;    &amp;#10;    ### prepare &amp; show current word:&amp;#10;    &amp;#10;    # if it's a block with an n-back task, prepare target list as well&amp;#10;    if curr_nback_cond != None:&amp;#10;        curr_target = curr_targets[trial_idx]&amp;#10;        saw_target = False&amp;#10;    &amp;#10;    # get trial number (start counting from 1, so add 1)&amp;#10;    curr_trial_nr = trial_idx + 1&amp;#10;&amp;#10;    # set current colour as colour of rectangle&amp;#10;    stim.fillColor = curr_col&amp;#10;    &amp;#10;    # show stimulus on screen&amp;#10;    stim.draw() # draw word on screen&amp;#10;    win.flip() # update the window to clear the screen and display the word&amp;#10;&amp;#10;    # send word onset trigger to LSL stream&amp;#10;    marker_text = &quot;block_&quot; + curr_block + &quot;_trial_&quot; + str(curr_trial_nr) + &quot;_&quot; + curr_col&amp;#10;    #out_marker.push_sample([&quot;STIM_ONSET_&quot; + marker_text])&amp;#10;    &amp;#10;    # record trial onset time&amp;#10;    onset_time = core.getTime()&amp;#10;    print(onset_time)&amp;#10;    &amp;#10;    ### wait for 50 ms&amp;#10;    while core.getTime() &lt; onset_time + 0.05:&amp;#10;        # draw the stimulus during the waiting period&amp;#10;        stim.draw()&amp;#10;        win.flip()&amp;#10;            &amp;#10;    ### wait for key response: &amp;#10;    # In blocks with n-back task, participants can press &quot;c&quot; to indicate they saw a target colour and &quot;space&quot; to go to the next word/stimulus.&amp;#10;    # In blocks without n-back task, participants can only press &quot;space&quot; to go to the next word/stimulus.&amp;#10;    print(&quot;start tracking key responses&quot;)&amp;#10;        &amp;#10;    ### start recording responses&amp;#10;    # start &quot;endless&quot; while loop that looks for responses&amp;#10;    while True:        &amp;#10;        # in each iteration, draw word on screen&amp;#10;        stim.draw()&amp;#10;        win.flip()&amp;#10;        &amp;#10;        # if participant presses space bar on their keyboard...&amp;#10;        if event.getKeys(['space']):&amp;#10;            # get reaction time&amp;#10;            curr_duration = core.getTime() - onset_time&amp;#10;            ### send trigger to LSL stream to indicate participant wants to go to next word&amp;#10;            marker_text = &quot;block_&quot; + curr_block + &quot;_trial_&quot; + str(curr_trial_nr) + &quot;_&quot; + curr_col&amp;#10;            #out_marker.push_sample([&quot;REACTION_NEXT_STIM_&quot; + marker_text])&amp;#10;            print(&quot;detected space key press -- RT: &quot; + str(curr_duration))&amp;#10;            # break while loop&amp;#10;            break&amp;#10;&amp;#10;        # if participant pressed button &quot;c&quot; for the first time and it's an n-back condition &amp;#10;        # where they're actually supposed to do that (aka not a reading baseline condition)...&amp;#10;        elif event.getKeys(['c']) and curr_nback_cond != None and saw_target == False:&amp;#10;            # get reaction time&amp;#10;            curr_nback_RT = onset_time - core.getTime()    &amp;#10;            ### send trigger to LSL stream to indicate n-back response&amp;#10;            marker_text = &quot;block_&quot; + curr_block + &quot;_trial_&quot; + str(curr_trial_nr) + &quot;_&quot; + curr_col&amp;#10;            #out_marker.push_sample([&quot;NBACK_REACTION_&quot; + marker_text])&amp;#10;            # only get first target response, we don't care if they press the button more than once:&amp;#10;            saw_target = True&amp;#10;            print(&quot;detected C key press -- n-back RT: &quot; + str(curr_nback_RT))&amp;#10;        # If esc is pressed, end the experiment:&amp;#10;        elif event.getKeys(['escape']):&amp;#10;            core.quit()&amp;#10;    &amp;#10;    ### end trial&amp;#10;    print(&quot;end trial&quot;)&amp;#10;    # stop display of current word&amp;#10;    win.flip()&amp;#10;    &amp;#10;    # check whether response was hit, miss, false alarm or correct rejection&amp;#10;    # they saw a target and there was one: hit&amp;#10;    if curr_nback_cond != None: &amp;#10;        if saw_target and curr_target:&amp;#10;            curr_nback_response = &quot;hit&quot;&amp;#10;        # they didn't see a target but there was one: miss&amp;#10;        elif saw_target == False and curr_target:&amp;#10;            curr_nback_response = &quot;miss&quot;&amp;#10;            curr_nback_RT = None&amp;#10;        # they didn't see a target and there was none: correct rejection&amp;#10;        elif saw_target == False and curr_target == False:&amp;#10;            curr_nback_response = &quot;correct rejection&quot;&amp;#10;            curr_nback_RT = None&amp;#10;        # they saw a target but there was none: false alarm&amp;#10;        elif saw_target and curr_target == False:&amp;#10;            curr_nback_response = &quot;false alarm&quot;&amp;#10;    # if it wasn't an n-back task block:&amp;#10;    else: &amp;#10;        curr_target = None&amp;#10;        curr_nback_response = None&amp;#10;        curr_nback_RT = None&amp;#10;    &amp;#10;    ### save everything in output csv&amp;#10;    thisExp.addData('colour', curr_colour)&amp;#10;    thisExp.addData('target', curr_target)&amp;#10;    thisExp.addData('nback_response', curr_nback_response)&amp;#10;    thisExp.addData('nback_RT', curr_nback_RT)&amp;#10;    thisExp.addData('block_kind', curr_nback_cond)&amp;#10;    thisExp.addData('duration', curr_duration)&amp;#10;    thisExp.addData('block_nr', curr_block)&amp;#10;    thisExp.addData('trial_nr', curr_trial_nr)&amp;#10;    &amp;#10;    ### TESTING MODE: end loop after 4 trials&amp;#10;    if trial_idx == 3:&amp;#10;        break&amp;#10;    &amp;#10;    ### send word offset trigger to LSL stream&amp;#10;    marker_text = &quot;block_&quot; + curr_block + &quot;_trial_&quot; + str(curr_trial_nr) + &quot;_&quot; + curr_word + &quot;_&quot; + curr_colour + &quot;_&quot; + str(curr_nback_response)&amp;#10;    #out_marker.push_sample([&quot;STIM_OFFSET_&quot; + marker_text])&amp;#10;    &amp;#10;print(&quot;finished presenting trials&quot;)&amp;#10;&amp;#10;# end current routine&amp;#10;continueRoutine = False" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="#################################################&amp;#10;#                Blocks w/o text                #&amp;#10;#################################################&amp;#10;# this routine is for all blocks where there are &amp;#10;# coloured rectangles instead of words&amp;#10;&amp;#10;# the non-text blocks all come in succession, there's just 1 main block in between them.&amp;#10;# So use loop here that runs the non-text blocks &amp;#10;# until we have to display a main text block (in this case we exit the routine).&amp;#10;while True:&amp;#10;    # keep background ivory&amp;#10;    win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;    win.flip()&amp;#10;    &amp;#10;    # clear buffer of all previously recorded key events:&amp;#10;    event.clearEvents()&amp;#10;    &amp;#10;    ### specify settings for the current block&amp;#10;&amp;#10;    ### Prepare stimuli:&amp;#10;&amp;#10;    # get block kind&amp;#10;    curr_block = all_blocks[exp_block_counter]&amp;#10;    print(&quot;start preparing block &quot; + curr_block)&amp;#10;&amp;#10;    # Check whether it's one of the non-text tasks.&amp;#10;    # If current block is a text block, skip this routine and go to the next.&amp;#10;    if curr_block not in [&quot;click_training&quot;, &quot;1back_single_training1&quot;, &quot;1back_single_training2&quot;, &amp;#10;                      &quot;1back_single_main&quot;, &quot;2back_single_training1&quot;, &quot;2back_single_training2&quot;, &quot;2back_single_main&quot;]:&amp;#10;        print(&quot;skipping current routine&quot;)&amp;#10;        break&amp;#10;&amp;#10;    # if it's one of the non-text blocks, though, prepare stimuli:&amp;#10;    else:&amp;#10;        print(curr_block + &quot; is not a text block - preparing rect as stim now&quot;)&amp;#10;        &amp;#10;        # keep background ivory&amp;#10;        win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;        win.flip()&amp;#10;        &amp;#10;        ### Show instructions&amp;#10;        # set instruction text&amp;#10;        instr_text = locals()[&quot;instr_&quot; + curr_block]&amp;#10;        # create text box&amp;#10;        instr_text_stim = visual.TextStim(win, &amp;#10;                                         text = instr_text, &amp;#10;                                         height = 0.5, &amp;#10;                                         pos = (0, 7),&amp;#10;                                         font = &quot;Bookman Old Style&quot;,&amp;#10;                                         color = 'black')&amp;#10;        # create ImageStim object&amp;#10;        curr_instr_pic = visual.ImageStim(win, &amp;#10;                                          size = (10, 4),&amp;#10;                                          pos = (0, -2),&amp;#10;                                          image = locals()[&quot;instr_pic_&quot; + curr_block]) # set path to image here&amp;#10;&amp;#10;        # display the text &amp; image on screen&amp;#10;        if curr_block in [&quot;1back_single_training2&quot;, &quot;2back_single_training2&quot;]:&amp;#10;            while True:&amp;#10;                instr_text_stim.draw()&amp;#10;                curr_instr_pic.draw()&amp;#10;                win.flip()&amp;#10;                # skip current block (aka the second training block))&amp;#10;                if event.getKeys(['space']):&amp;#10;                    print(&quot;start next block - skip second training block&quot;)&amp;#10;                    skip_curr_block = True&amp;#10;                    break&amp;#10;                # repeat training (aka run current block, which is the second training block)&amp;#10;                elif event.getKeys(['w']):&amp;#10;                    print(&quot;repeat training block&quot;)&amp;#10;                    skip_curr_block = False&amp;#10;                    break&amp;#10;        # for regular blocks that can't be repeated:&amp;#10;        else: &amp;#10;            while True:&amp;#10;                instr_text_stim.draw()&amp;#10;                curr_instr_pic.draw()&amp;#10;                win.flip()&amp;#10;                # start current block&amp;#10;                if event.getKeys(['space']):&amp;#10;                    print(&quot;start current block&quot;)&amp;#10;                    skip_curr_block = False&amp;#10;                    break&amp;#10;                    &amp;#10;        # only run this if the current block shall not be skipped:&amp;#10;        if skip_curr_block == False:&amp;#10;            ### change background colour &amp;#10;            # transition from white (RGB: 255, 255, 255)&amp;#10;            # to medium grey (RGB: 10, 10, 10)&amp;#10;            change_bg_colour(window = win, &amp;#10;                             start_rgb = light_bg_col, &amp;#10;                             end_rgb = dark_bg_col, &amp;#10;                             seconds = 2)&amp;#10;            # Wait for a brief period of time so bg is set&amp;#10;            core.wait(0.8)&amp;#10;            # keep background grey&amp;#10;            win.setColor(dark_bg_col, colorSpace='rgb')&amp;#10;            win.flip()&amp;#10;        &amp;#10;            # don't show questions&amp;#10;            skip_questions = True&amp;#10;            training_Qs = False&amp;#10;&amp;#10;            # get n-back condition:&amp;#10;            curr_nback_cond = curr_block[0] # get first character of block name&amp;#10;            &amp;#10;            # if it is a 1 or a 2, set that as current n-back level:&amp;#10;            if curr_nback_cond in ['1', '2']:&amp;#10;                curr_nback_cond == int(curr_nback_cond)&amp;#10;            # if it's neither 1 nor 2, it has to be a block without n-back,&amp;#10;            # so set curr_nback_cond to None&amp;#10;            else:&amp;#10;                curr_nback_cond = None&amp;#10;            &amp;#10;            print(&quot;current n-back condition: &quot; + str(curr_nback_cond))&amp;#10;&amp;#10;            # get list with targets &amp; list with colours&amp;#10;            curr_targets = all_target_lists[exp_block_counter]&amp;#10;            curr_colours = all_colour_lists[exp_block_counter]&amp;#10;            # for current text nr, get text whose name = current text nr&amp;#10;            curr_text = locals()[curr_text_nr]&amp;#10;&amp;#10;            # start block loop&amp;#10;&amp;#10;            # prepare flicker&amp;#10;            # hint: flicker_freq and frame_rate are set in the settings &amp;#10;            # code component at the beginning of the experiment.&amp;#10;            &amp;#10;            # create flicker phase variable - start at phase = 0&amp;#10;            flicker_phase = 0&amp;#10;            # we also need the start time (let's set it as current time &amp;#10;            # at this point in the script):&amp;#10;            start_time = core.getTime()&amp;#10;    &amp;#10;            # create empty stimulus &amp;#10;            stim = visual.Rect(win = win,&amp;#10;                               width = 3, # width = 3 * 1° visual angle (to make it look rectangle-ish)&amp;#10;                               height = 1, # height = 1° visual angle (just like words)&amp;#10;                              # colorSpace = &quot;hex&quot;,&amp;#10;                               pos = (0,0)) # center stimulus &amp;#10;            &amp;#10;            stim.draw()&amp;#10;            win.flip()&amp;#10;&amp;#10;            # clear buffer of all previously recorded key events:&amp;#10;            event.clearEvents()&amp;#10;&amp;#10;            # loop colours in current text&amp;#10;            for trial_idx, curr_col in enumerate(curr_colours):&amp;#10;                print(&quot;current idx: &quot; + str(trial_idx) + &quot;, curr colour:&quot; + curr_col)&amp;#10;                &amp;#10;                ### prepare &amp; show current word:&amp;#10;                &amp;#10;                # if it's a block with an n-back task, prepare target list&amp;#10;                if curr_nback_cond != None:&amp;#10;                    curr_target = curr_targets[trial_idx]&amp;#10;                    saw_target = False&amp;#10;                &amp;#10;                # get trial number (start counting from 1, so add 1)&amp;#10;                curr_trial_nr = trial_idx + 1&amp;#10;                &amp;#10;                ### ISI: wait for 200 ms&amp;#10;                # --&gt; I also tried 500, but if the break is too long it &amp;#10;                # messes up the flicker and it starts looking really weird.&amp;#10;                # So I guess we have to deal with the not really visible repetitions.&amp;#10;                while core.getTime() &lt; onset_time + 0.2:&amp;#10;                    # draw the stimulus during the waiting period, &amp;#10;                    # but use grey as a fill colour&amp;#10;                    stim.Colour = dark_bg_col&amp;#10;                    stim.draw()&amp;#10;                    win.flip()&amp;#10;                    &amp;#10;                # set current colour as colour of rectangle&amp;#10;                stim.fillColor = curr_col&amp;#10;                &amp;#10;                # Flicker option 1: use sine-wave (gradient) flicker&amp;#10;                #frame_time = core.getTime() # get current time point (in sec)&amp;#10;                #flicker_intensity = np.sin(2 * np.pi * flicker_freq * (frame_time - start_time) + flicker_phase)&amp;#10;                #opacity = (flicker_intensity + 1) / 2&amp;#10;    &amp;#10;                # Flicker option 2: use square-wave (on-off) flicker&amp;#10;                frame_time = core.getTime() &amp;#10;                time_passed = frame_time - start_time &amp;#10;                cycle_duration = 1 / flicker_freq&amp;#10;                cycle_passed = time_passed % cycle_duration&amp;#10;                &amp;#10;                if cycle_passed &lt; cycle_duration / 2:&amp;#10;                    opacity = 1&amp;#10;                else: &amp;#10;                    opacity = 0&amp;#10;                &amp;#10;                # set opacity&amp;#10;                stim.opacity = opacity  &amp;#10;                # draw stimulus on screen&amp;#10;                stim.draw()&amp;#10;                win.flip()&amp;#10;        &amp;#10;                # show stimulus on screen&amp;#10;                stim.draw() # draw stimulus on screen&amp;#10;                win.flip() # update the window to clear the screen and display the stimulus&amp;#10;&amp;#10;                # send word onset trigger to LSL stream&amp;#10;                marker_text = &quot;block_&quot; + curr_block + &quot;_trial_&quot; + str(curr_trial_nr) + &quot;_&quot; + curr_col&amp;#10;                out_marker.push_sample([&quot;STIM_ONSET_&quot; + marker_text])&amp;#10;                &amp;#10;                # record trial onset time&amp;#10;                onset_time = core.getTime()&amp;#10;                print(&quot;onset time: &quot; + str(onset_time * 1000) + &quot; ms&quot; )&amp;#10;                                    &amp;#10;                ### wait for key response: &amp;#10;                # In blocks with n-back task, participants can press &quot;c&quot; to indicate they saw a target colour and &quot;space&quot; to go to the next word/stimulus.&amp;#10;                # In blocks without n-back task, participants can only press &quot;space&quot; to go to the next stimulus.&amp;#10;                print(&quot;start tracking key responses&quot;)&amp;#10;                    &amp;#10;                ### start recording responses&amp;#10;                # start &quot;endless&quot; while loop that looks for responses&amp;#10;                while True:        &amp;#10;                    # in each iteration, draw word on screen&amp;#10;                    &amp;#10;                                    &amp;#10;                    # Flicker option 1: use sine-wave (gradient) flicker&amp;#10;                    #frame_time = core.getTime() # get current time point (in sec)&amp;#10;                    #flicker_intensity = np.sin(2 * np.pi * flicker_freq * (frame_time - start_time) + flicker_phase)&amp;#10;                    #opacity = (flicker_intensity + 1) / 2&amp;#10;                &amp;#10;                    # Flicker option 2: use square-wave (on-off) flicker&amp;#10;                    frame_time = core.getTime() &amp;#10;                    time_passed = frame_time - start_time &amp;#10;                    cycle_duration = 1 / flicker_freq&amp;#10;                    cycle_passed = time_passed % cycle_duration&amp;#10;                    &amp;#10;                    if cycle_passed &lt; cycle_duration / 2:&amp;#10;                        opacity = 1&amp;#10;                    else: &amp;#10;                        opacity = 0&amp;#10;                    &amp;#10;                    # set opacity&amp;#10;                    stim.opacity = opacity  &amp;#10;                    # draw stimulus on screen&amp;#10;                    stim.draw()&amp;#10;                    win.flip()&amp;#10;            &amp;#10;                    # show stimulus on screen&amp;#10;                    stim.draw() # draw stimulus on screen&amp;#10;                    win.flip() # update the window to clear the screen and display the stimulus&amp;#10;&amp;#10;                    &amp;#10;                    # if participant presses space bar on their keyboard...&amp;#10;                    if event.getKeys(['space']):&amp;#10;                        # get reaction time&amp;#10;                        curr_duration = core.getTime() - onset_time&amp;#10;                        ### send trigger to LSL stream to indicate participant wants to go to next word&amp;#10;                        marker_text = &quot;block_&quot; + curr_block + &quot;_trial_&quot; + str(curr_trial_nr) + &quot;_&quot; + curr_col&amp;#10;                        out_marker.push_sample([&quot;REACTION_NEXT_STIM_&quot; + marker_text])&amp;#10;                        print(&quot;detected space key press -- RT: &quot; + str(curr_duration * 1000) + &quot; ms&quot;) # *1000 to convert s to ms&amp;#10;                        # break while loop&amp;#10;                        break&amp;#10;&amp;#10;                    # if participant pressed button &quot;c&quot; for the first time and it's an n-back condition &amp;#10;                    # where they're actually supposed to do that (aka not a reading baseline condition)...&amp;#10;                    elif event.getKeys(['c']) and curr_nback_cond != None and saw_target == False:&amp;#10;                        # get reaction time&amp;#10;                        curr_nback_RT = (core.getTime() - onset_time) * 1000 # *1000 to convert s to ms  &amp;#10;                        ### send trigger to LSL stream to indicate n-back response&amp;#10;                        marker_text = &quot;block_&quot; + curr_block + &quot;_trial_&quot; + str(curr_trial_nr) + &quot;_&quot; + curr_col&amp;#10;                        out_marker.push_sample([&quot;NBACK_REACTION_&quot; + marker_text])&amp;#10;                        # only get first target response, we don't care if they press the button more than once:&amp;#10;                        saw_target = True&amp;#10;                        print(&quot;detected C key press -- n-back RT: &quot; + str(curr_nback_RT) + &quot; ms&quot;)&amp;#10;                    # If esc is pressed, end the experiment:&amp;#10;                    elif event.getKeys(['escape']):&amp;#10;                        core.quit()&amp;#10;                &amp;#10;                ### end trial&amp;#10;                print(&quot;end trial&quot;)&amp;#10;                # stop display of current stimulus&amp;#10;                win.flip()&amp;#10;                &amp;#10;                # check whether response was hit, miss, false alarm or correct rejection&amp;#10;                # they saw a target and there was one: hit&amp;#10;                if curr_nback_cond != None: &amp;#10;                    if saw_target and curr_target:&amp;#10;                        curr_nback_response = &quot;hit&quot;&amp;#10;                    # they didn't see a target but there was one: miss&amp;#10;                    elif saw_target == False and curr_target:&amp;#10;                        curr_nback_response = &quot;miss&quot;&amp;#10;                        curr_nback_RT = None&amp;#10;                    # they didn't see a target and there was none: correct rejection&amp;#10;                    elif saw_target == False and curr_target == False:&amp;#10;                        curr_nback_response = &quot;correct rejection&quot;&amp;#10;                        curr_nback_RT = None&amp;#10;                    # they saw a target but there was none: false alarm&amp;#10;                    elif saw_target and curr_target == False:&amp;#10;                        curr_nback_response = &quot;false alarm&quot;&amp;#10;                # if it wasn't an n-back task block:&amp;#10;                else: &amp;#10;                    curr_target = None&amp;#10;                    curr_nback_response = None&amp;#10;                    curr_nback_RT = None&amp;#10;                &amp;#10;                ### save everything in output csv&amp;#10;                thisExp.addData('colour', curr_colour)&amp;#10;                thisExp.addData('target', curr_target)&amp;#10;                thisExp.addData('nback_response', curr_nback_response)&amp;#10;                thisExp.addData('nback_RT', curr_nback_RT) # in ms&amp;#10;                thisExp.addData('duration', curr_duration * 1000) # * 1000 to convert s to ms&amp;#10;                thisExp.addData('trial_nr', curr_trial_nr)&amp;#10;                thisExp.addData('block_nr', exp_block_counter)&amp;#10;                thisExp.addData('block_name', curr_block)&amp;#10;                thisExp.addData('block_kind', curr_nback_cond)&amp;#10;    &amp;#10;                # start a new row in the csv&amp;#10;                thisExp.nextEntry()&amp;#10;                &amp;#10;                ### IF TESTING MODE ENABLED: end loop after 4 trials&amp;#10;                if expInfo['testing_mode'] == &quot;yes&quot;:&amp;#10;                    if trial_idx == 3:&amp;#10;                        break&amp;#10;                &amp;#10;                ### send stimulus offset trigger to LSL stream&amp;#10;                marker_text = &quot;block_&quot; + curr_block + &quot;_trial_&quot; + str(curr_trial_nr) + &quot;_&quot; + curr_word + &quot;_&quot; + curr_colour + &quot;_&quot; + str(curr_nback_response)&amp;#10;                out_marker.push_sample([&quot;STIM_OFFSET_&quot; + marker_text])&amp;#10;                &amp;#10;            print(&quot;finished presenting trials&quot;)&amp;#10;            &amp;#10;            # change background colour from grey (RGB: 10, 10, 10)&amp;#10;            # to ivory (RGB: 240, 223, 204)&amp;#10;            change_bg_colour(window = win, &amp;#10;                             start_rgb = dark_bg_col, &amp;#10;                             end_rgb = light_bg_col, &amp;#10;                             seconds = 2)&amp;#10;            # Wait for a brief period of time so bg is set&amp;#10;            core.wait(0.8)&amp;#10;            # keep background ivory&amp;#10;            win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;            win.flip()&amp;#10;        &amp;#10;        ### End currrent block&amp;#10;        # add 1 to the block counter to go load the next block&amp;#10;        exp_block_counter = exp_block_counter + 1&amp;#10;        print(&quot;Going to block &quot; + str(exp_block_counter + 1) + &quot;/17 now!&quot;)&amp;#10;&amp;#10;# go to next routine&amp;#10;print(&quot;going to next routine&quot;)&amp;#10;continueRoutine = False" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_rectangles" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="text_blocks">
      <CodeComponent name="code_text">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="#################################################&amp;#10;#                Blocks with text               #&amp;#10;#################################################&amp;#10;# this routine is for all blocks with texts&amp;#10;&amp;#10;# keep background ivory&amp;#10;win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;win.flip()&amp;#10;&amp;#10;# clear buffer of all previously recorded key events:&amp;#10;event.clearEvents()&amp;#10;&amp;#10;### specify settings for the current block&amp;#10;&amp;#10;### Prepare stimuli:&amp;#10;&amp;#10;# get block kind&amp;#10;curr_block = all_blocks[exp_block_counter]&amp;#10;print(&quot;start preparing block &quot; + curr_block)&amp;#10;&amp;#10;# Check whether it's some of the non-text tasks, &amp;#10;# the reading bl training or one of the dual-task main blocks.&amp;#10;&amp;#10;# If current block it's a non-text block, skip this routine.&amp;#10;if curr_block in [&quot;click_training&quot;, &quot;1back_single_training1&quot;, &quot;1back_single_training2&quot;, &amp;#10;                  &quot;1back_single_main&quot;, &quot;2back_single_training1&quot;, &quot;2back_single_training2&quot;, &quot;2back_single_main&quot;]:&amp;#10;    print(&quot;skipping current routine&quot;)&amp;#10;    # skip questions &amp; end current routine&amp;#10;    skip_questions = True&amp;#10;    continueRoutine = False&amp;#10;    &amp;#10;# if it's the reading bl training block, prepare training stimuli:&amp;#10;elif curr_block == &quot;Reading_Baseline_training&quot;:&amp;#10;    # keep background ivory&amp;#10;    win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;    win.flip()&amp;#10;    &amp;#10;    ### Show instructions&amp;#10;    # set instruction text&amp;#10;    instr_text = locals()[&quot;instr_&quot; + curr_block]&amp;#10;    # create text box&amp;#10;    instr_text_stim = visual.TextStim(win, &amp;#10;                                      text = instr_text, &amp;#10;                                      height = 0.5, # font height: 5° visual angle&amp;#10;                                      font = &quot;Bookman Old Style&quot;,&amp;#10;                                      pos = (0, 7), # move up a bit&amp;#10;                                      color = &quot;black&quot;)&amp;#10;    # create ImageStim object&amp;#10;    curr_instr_pic = visual.ImageStim(win, &amp;#10;                                      size = (10, 4),&amp;#10;                                      pos = (0, -2),&amp;#10;                                      image = locals()[&quot;instr_pic_&quot; + curr_block]) # set path to image here&amp;#10;&amp;#10;    # display the text on screen&amp;#10;    while True:&amp;#10;        # keep background ivory&amp;#10;        win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;        instr_text_stim.draw()&amp;#10;        curr_instr_pic.draw()&amp;#10;        win.flip()&amp;#10;        # end showing screen if participant presses space&amp;#10;        if 'space' in event.getKeys():&amp;#10;            break &amp;#10;            &amp;#10;    ### get training text&amp;#10;    curr_text = reading_bl_tr_text&amp;#10;    curr_text_nr = &quot;reading_bl_training_text&quot;&amp;#10;    curr_nback_cond = None&amp;#10;    curr_colours = all_colour_lists[0]&amp;#10;    # show training questions&amp;#10;    skip_questions = False&amp;#10;    training_Qs = True&amp;#10;    &amp;#10;    ### prepare flicker&amp;#10;    # hint: flicker_freq and frame_rate are set in the settings &amp;#10;    # code component at the beginning of the experiment.&amp;#10;    &amp;#10;    # create flicker phase variable - start at phase = 0&amp;#10;    flicker_phase = 0&amp;#10;    # we also need the start time (let's set it as current time &amp;#10;    # at this point in the script):&amp;#10;    start_time = core.getTime()&amp;#10;    &amp;#10;    &amp;#10;    ### change background colour &amp;#10;    # transition from ivory &amp;#10;    # to medium grey &amp;#10;    change_bg_colour(window = win, &amp;#10;                     start_rgb = light_bg_col,&amp;#10;                     end_rgb = dark_bg_col, &amp;#10;                     seconds = 2)&amp;#10;    # Wait for a brief period of time so bg is set&amp;#10;    core.wait(0.8)&amp;#10;    # keep background grey&amp;#10;    win.setColor(dark_bg_col, colorSpace='rgb')&amp;#10;    win.flip()&amp;#10;&amp;#10;# if it's one of the &quot;normal&quot; main blocks, prepare main block stimuli:&amp;#10;elif curr_block in [&quot;Reading_Baseline_main&quot;, &quot;1back_dual_main&quot;, &quot;2back_dual_main&quot;]:&amp;#10;&amp;#10;    # keep background ivory&amp;#10;    win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;    win.flip()&amp;#10;    &amp;#10;    ### Show instructions&amp;#10;    # set instruction text&amp;#10;    instr_text = locals()[&quot;instr_&quot; + curr_block]&amp;#10;    # create text box&amp;#10;    instr_text_stim = visual.TextStim(win, &amp;#10;                                      text = instr_text, &amp;#10;                                      height = 0.5, # font height: 5° visual angle&amp;#10;                                      font = &quot;Bookman Old Style&quot;,&amp;#10;                                      pos = (0, 7),&amp;#10;                                      color = &quot;black&quot;)&amp;#10;    &amp;#10;    # create ImageStim object&amp;#10;    curr_instr_pic = visual.ImageStim(win, &amp;#10;                                      size = (10, 4),&amp;#10;                                      pos = (0, -2),&amp;#10;                                      image = locals()[&quot;instr_pic_&quot; + curr_block]) # set path to image here&amp;#10;&amp;#10;    # Display the text on screen&amp;#10;    while True:&amp;#10;        instr_text_stim.draw()&amp;#10;        curr_instr_pic.draw()&amp;#10;        win.flip()&amp;#10;        # end showing screen if participant presses space&amp;#10;        if 'space' in event.getKeys():&amp;#10;            break &amp;#10;    &amp;#10;    ### change background colour &amp;#10;    # transition from ivory to medium grey&amp;#10;    change_bg_colour(window = win, &amp;#10;                     start_rgb = light_bg_col,&amp;#10;                     end_rgb = dark_bg_col, &amp;#10;                     seconds = 2)&amp;#10;    # Wait for a brief period of time so bg is set&amp;#10;    core.wait(0.8)&amp;#10;    # keep background grey&amp;#10;    win.setColor(dark_bg_col, colorSpace='rgb')&amp;#10;    win.flip()&amp;#10;&amp;#10;    # show main block questions&amp;#10;    skip_questions = False&amp;#10;    training_Qs = False&amp;#10;    &amp;#10;    # get text nr:&amp;#10;    curr_text_nr = all_texts_nrs_list[exp_block_counter]&amp;#10;    &amp;#10;    # get n-back condition:&amp;#10;    curr_nback_cond = curr_block[0] # get first character of block name&amp;#10;&amp;#10;    # if it is a 1 or a 2, set that as current n-back level:&amp;#10;    if curr_nback_cond in ['1', '2']:&amp;#10;        curr_nback_cond == int(curr_nback_cond)&amp;#10;    # if it's neither 1 nor 2, it has to be a block without n-back,&amp;#10;    # so set curr_nback_cond to None&amp;#10;    else:&amp;#10;        curr_nback_cond = None&amp;#10;    &amp;#10;    print(&quot;current n-back condition: &quot; + str(curr_nback_cond))&amp;#10;    &amp;#10;    # get list with targets &amp; list with colours&amp;#10;    curr_targets = all_target_lists[exp_block_counter]&amp;#10;    curr_colours = all_colour_lists[exp_block_counter]&amp;#10;    # for current text nr, get text whose name = current text nr&amp;#10;    curr_text = locals()[curr_text_nr]&amp;#10;    &amp;#10;    ### prepare flicker&amp;#10;    # hint: flicker_freq and frame_rate are set in the settings &amp;#10;    # code component at the beginning of the experiment.&amp;#10;    &amp;#10;    # create flicker phase variable - start at phase = 0&amp;#10;    flicker_phase = 0&amp;#10;    # we also need the start time (let's set it as current time &amp;#10;    # at this point in the script):&amp;#10;    start_time = core.getTime()&amp;#10;    &amp;#10;### Start block loop&amp;#10;&amp;#10;# if it's the first reading BL block, save response &amp;#10;# times in an array - we need that later for the visual task&amp;#10;if exp_block_counter == 1:&amp;#10;    vis_task_durations = []&amp;#10;&amp;#10;# create empty text stimulus &amp;#10;stim = visual.TextStim(win = win, &amp;#10;                       text = &quot; &quot;, &amp;#10;                       pos = (0,0), # center stimulus&amp;#10;                       font = &quot;Times New Roman&quot;,&amp;#10;                       height = 1) # font height = 1° visual angle&amp;#10;&amp;#10;# create grey rectangle that masks the text if I set opacity to 1&amp;#10;# --&gt; changing the text opacity directly isn't working: https://discourse.psychopy.org/t/opacity-of-text-stimuli-is-not-updating/11152/7    &amp;#10;stim_mask = visual.Rect(win = win,&amp;#10;                        width = 20, # width = 20° visual angle&amp;#10;                        height = 3, # height = 3° visual angle &amp;#10;                        pos = (0,0), # center stimulus &amp;#10;                        opacity = 0, # set opacity to 0 for a start&amp;#10;                        fillColor = dark_bg_col,&amp;#10;                        colorSpace = &quot;rgb&quot;)&amp;#10;&amp;#10;stim.draw()&amp;#10;stim_mask.draw()&amp;#10;win.flip()&amp;#10;&amp;#10;# clear buffer of all previously recorded key events:&amp;#10;event.clearEvents()&amp;#10;&amp;#10;# loop words in current text&amp;#10;for trial_idx, curr_word in enumerate(curr_text):&amp;#10;    print(&quot;current idx: &quot; + str(trial_idx) + &quot;, curr word:&quot; + curr_word)&amp;#10;    &amp;#10;    ### prepare &amp; show current word:&amp;#10;    &amp;#10;    # get current colour&amp;#10;    curr_colour = curr_colours[trial_idx]&amp;#10;    &amp;#10;    # if it's a block with an n-back task, prepare target list as well&amp;#10;    if curr_nback_cond != None:&amp;#10;        curr_target = curr_targets[trial_idx]&amp;#10;        saw_target = False&amp;#10;    &amp;#10;    # get trial number (start counting from 1, so add 1)&amp;#10;    curr_trial_nr = trial_idx + 1&amp;#10;&amp;#10;    # set current word &amp; colour as content of text stimulus&amp;#10;    stim.color = curr_colour&amp;#10;    stim.text = curr_word&amp;#10;    &amp;#10;    # Flicker option 1: use sine-wave (gradient) flicker&amp;#10;    # --&gt; doesn't seem to work, I don't see the words flicker when I play this&amp;#10;    # create current opacity value to continue flickering the word&amp;#10;    #frame_time = core.getTime() # get current time point (in sec)&amp;#10;    #flicker_intensity = np.sin(2 * np.pi * flicker_freq * (frame_time - start_time) + flicker_phase)&amp;#10;    #opacity = (flicker_intensity + 1) / 2&amp;#10;&amp;#10;    # Flicker option 2: use square-wave (on-off) flicker&amp;#10;    frame_time = core.getTime() # get current time point (in sec)&amp;#10;    time_passed = frame_time - start_time # calculate time passed since start&amp;#10;    cycle_duration = 1 / flicker_freq # calculate duration of one flicker cycle&amp;#10;    cycle_passed = time_passed % cycle_duration # calculate time passed in current flicker cycle&amp;#10;    if cycle_passed &lt; cycle_duration / 2: # if in the first half of the cycle&amp;#10;        opacity = 1 # set opacity to 1&amp;#10;    else: # if in the second half of the cycle&amp;#10;        opacity = 0 # set opacity to 0&amp;#10;        &amp;#10;    stim_mask.opacity = opacity&amp;#10;    &amp;#10;    # show word on screen&amp;#10;    stim.draw() # draw word on screen&amp;#10;    stim_mask.draw() # draw mask on screen&amp;#10;    win.flip() # update the window to clear the screen and display the word&amp;#10;&amp;#10;    # send word onset trigger to LSL stream&amp;#10;    marker_text = &quot;block_&quot; + curr_block + &quot;_trial_&quot; + str(curr_trial_nr) + &quot;_&quot; + curr_word&amp;#10;    #out_marker.push_sample([&quot;STIM_ONSET_&quot; + marker_text])&amp;#10;    &amp;#10;    # record trial onset time&amp;#10;    onset_time = core.getTime()&amp;#10;    print(&quot;onset time: &quot; + str(onset_time) + &quot; s&quot;)&amp;#10;    &amp;#10;    ### wait for 50 ms&amp;#10;    while core.getTime() &lt; onset_time + 0.05:&amp;#10;        # draw the stimulus during the waiting period&amp;#10;&amp;#10;        # Flicker option 1: use sine-wave (gradient) flicker&amp;#10;        #frame_time = core.getTime() &amp;#10;        #flicker_intensity = np.sin(2 * np.pi * flicker_freq * (frame_time - start_time) + flicker_phase)&amp;#10;        #opacity = (flicker_intensity + 1) / 2&amp;#10;&amp;#10;        # Flicker option 2: use square-wave (on-off) flicker&amp;#10;        frame_time = core.getTime() &amp;#10;        time_passed = frame_time - start_time &amp;#10;        cycle_duration = 1 / flicker_freq&amp;#10;        cycle_passed = time_passed % cycle_duration&amp;#10;        if cycle_passed &lt; cycle_duration / 2:&amp;#10;            opacity = 1&amp;#10;        else: &amp;#10;            opacity = 0&amp;#10;        &amp;#10;        stim_mask.opacity = opacity&amp;#10;    &amp;#10;        stim.draw() # draw text&amp;#10;        stim_mask.draw() # draw mask&amp;#10;        win.flip()&amp;#10;            &amp;#10;    ### wait for key response: &amp;#10;    # In blocks with n-back task, participants can press &quot;c&quot; to indicate they saw a target colour and &quot;space&quot; to go to the next word/stimulus.&amp;#10;    # In blocks without n-back task, participants can only press &quot;space&quot; to go to the next word/stimulus.&amp;#10;    print(&quot;start tracking key responses&quot;)&amp;#10;        &amp;#10;    ### start recording responses&amp;#10;    # start &quot;endless&quot; while loop that looks for responses&amp;#10;    while True:        &amp;#10;        # in each iteration, draw word on screen&amp;#10;        # --&gt; flicker again&amp;#10;&amp;#10;        # Flicker option 1: use sine-wave (gradient) flicker&amp;#10;        #frame_time = core.getTime() &amp;#10;        #flicker_intensity = np.sin(2 * np.pi * flicker_freq * (frame_time - start_time) + flicker_phase)&amp;#10;        #opacity = (flicker_intensity + 1) / 2&amp;#10;&amp;#10;        # Flicker option 2: use square-wave (on-off) flicker&amp;#10;        frame_time = core.getTime() &amp;#10;        time_passed = frame_time - start_time &amp;#10;        cycle_duration = 1 / flicker_freq&amp;#10;        cycle_passed = time_passed % cycle_duration&amp;#10;        if cycle_passed &lt; cycle_duration / 2:&amp;#10;            opacity = 1&amp;#10;        else: &amp;#10;            opacity = 0&amp;#10;            &amp;#10;        stim_mask.opacity = opacity&amp;#10;        &amp;#10;        stim.draw()&amp;#10;        stim_mask.draw()&amp;#10;        win.flip()&amp;#10;        &amp;#10;        # if participant presses space bar on their keyboard...&amp;#10;        if event.getKeys(['space']):&amp;#10;            # get reaction time&amp;#10;            curr_duration = core.getTime() - onset_time&amp;#10;            ### send trigger to LSL stream to indicate participant wants to go to next word&amp;#10;            marker_text = &quot;block_&quot; + curr_block + &quot;_trial_&quot; + str(curr_trial_nr) + &quot;_&quot; + curr_word&amp;#10;            out_marker.push_sample([&quot;REACTION_NEXT_STIM_&quot; + marker_text])&amp;#10;            print(&quot;detected space key press -- RT: &quot; + str(curr_duration * 1000) + &quot; ms&quot;) #* 1000 to covert s to ms&amp;#10;            # break while loop&amp;#10;            break&amp;#10;&amp;#10;        # if participant pressed button &quot;c&quot; for the first time and it's an n-back condition &amp;#10;        # where they're actually supposed to do that (aka not a reading baseline condition)...&amp;#10;        elif event.getKeys(['c']) and curr_nback_cond != None and saw_target == False:&amp;#10;            # get reaction time&amp;#10;            curr_nback_RT = (core.getTime() - onset_time) * 1000 # *1000 to convert s to ms    &amp;#10;            ### send trigger to LSL stream to indicate n-back response&amp;#10;            marker_text = &quot;block_&quot; + curr_block + &quot;_trial_&quot; + str(curr_trial_nr) + &quot;_&quot; + curr_word&amp;#10;            out_marker.push_sample([&quot;NBACK_REACTION_&quot; + marker_text])&amp;#10;            # only get first target response, we don't care if they press the button more than once:&amp;#10;            saw_target = True&amp;#10;            print(&quot;detected C key press -- n-back RT: &quot; + str(curr_nback_RT) + &quot; ms&quot;) # * 1000 to convert s to ms&amp;#10;        # If esc is pressed, end the experiment:&amp;#10;        elif event.getKeys(['escape']):&amp;#10;            core.quit()&amp;#10;    &amp;#10;    ### end trial&amp;#10;    print(&quot;end trial&quot;)&amp;#10;    # stop display of current word&amp;#10;    win.flip()&amp;#10;    &amp;#10;    # check whether response was hit, miss, false alarm or correct rejection&amp;#10;    # they saw a target and there was one: hit&amp;#10;    if curr_nback_cond != None: &amp;#10;        if saw_target and curr_target:&amp;#10;            curr_nback_response = &quot;hit&quot;&amp;#10;        # they didn't see a target but there was one: miss&amp;#10;        elif saw_target == False and curr_target:&amp;#10;            curr_nback_response = &quot;miss&quot;&amp;#10;            curr_nback_RT = None&amp;#10;        # they didn't see a target and there was none: correct rejection&amp;#10;        elif saw_target == False and curr_target == False:&amp;#10;            curr_nback_response = &quot;correct rejection&quot;&amp;#10;            curr_nback_RT = None&amp;#10;        # they saw a target but there was none: false alarm&amp;#10;        elif saw_target and curr_target == False:&amp;#10;            curr_nback_response = &quot;false alarm&quot;&amp;#10;    # if it wasn't an n-back task block:&amp;#10;    else: &amp;#10;        curr_target = None&amp;#10;        curr_nback_response = None&amp;#10;        curr_nback_RT = None&amp;#10;    &amp;#10;    ### save everything in output csv&amp;#10;    thisExp.addData('colour', curr_colour)&amp;#10;    thisExp.addData('target', curr_target)&amp;#10;    thisExp.addData('nback_response', curr_nback_response)&amp;#10;    thisExp.addData('nback_RT', curr_nback_RT) # in ms&amp;#10;    thisExp.addData('duration', curr_duration * 1000) # *1000 to convert s to ms&amp;#10;    thisExp.addData('text_nr', curr_text_nr)&amp;#10;    thisExp.addData('trial_nr', curr_trial_nr)&amp;#10;    thisExp.addData('block_nr', exp_block_counter)&amp;#10;    thisExp.addData('block_name', curr_block)&amp;#10;    thisExp.addData('block_kind', curr_nback_cond)&amp;#10;    # careful, make sure quotes in the strings are escaped using a &amp;#10;    # quote (weird, I know) so it's properly saved in the CSV:&amp;#10;    thisExp.addData('word', escape_quotes(curr_word))&amp;#10;&amp;#10;    # start a new row in the csv&amp;#10;    thisExp.nextEntry()&amp;#10;    &amp;#10;    # if it's the first reading BL block, we need to &amp;#10;    # also collect the RTs in an array&amp;#10;    if exp_block_counter == 1:&amp;#10;        vis_task_durations.append(curr_duration)&amp;#10;&amp;#10;    ### IF TESTING MODE ENABLED: end loop after 4 trials&amp;#10;    if expInfo['testing_mode'] == &quot;yes&quot;:&amp;#10;        if trial_idx == 3:&amp;#10;            break&amp;#10;    &amp;#10;    ### send word offset trigger to LSL stream&amp;#10;    marker_text = &quot;block_&quot; + curr_block + &quot;_trial_&quot; + str(curr_trial_nr) + &quot;_&quot; + curr_word + &quot;_&quot; + curr_colour + &quot;_&quot; + str(curr_nback_response)&amp;#10;    #out_marker.push_sample([&quot;STIM_OFFSET_&quot; + marker_text])&amp;#10;&amp;#10;print(&quot;finished presenting trials&quot;)&amp;#10;&amp;#10;### Prepare questions&amp;#10;&amp;#10;# change background colour from grey to ivory&amp;#10;change_bg_colour(window = win, &amp;#10;                 start_rgb = dark_bg_col, &amp;#10;                 end_rgb = light_bg_col, &amp;#10;                 seconds = 2)&amp;#10;# Wait for a brief period of time so bg is set&amp;#10;core.wait(0.5)&amp;#10;&amp;#10;# keep background ivory&amp;#10;win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;win.flip()&amp;#10;        &amp;#10;# end current routine&amp;#10;continueRoutine = False" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_text" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="difficulty">
      <CodeComponent name="code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="console.log(&quot;going to next block&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="##########################################################&amp;#10;#            Text Difficulty Rating - Item 1            #&amp;#10;##########################################################&amp;#10;&amp;#10;### Settings:&amp;#10;# keep background ivory&amp;#10;win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;win.flip()&amp;#10;&amp;#10;# check which kind of block we have&amp;#10;# skip this routine if the current block wasn't Reading BL main&amp;#10;if curr_block != &quot;Reading_Baseline_main&quot;:&amp;#10;    continueRoutine = False&amp;#10;else:&amp;#10;    &amp;#10;    # create a keyboard object to check if key is currently pressed &amp;#10;    # (not really possible with event.getKey())&amp;#10;    kb = keyboard.Keyboard()&amp;#10;    &amp;#10;    # set question texts, item names and labels:&amp;#10;    items = [&quot;Wie anstrengend war es für Sie, dem Text zu folgen?&quot;, &quot;Wie schwierig fanden Sie den Text inhaltlich?&quot;, &quot;Wie verständlich war der Text für Sie?&quot;, &quot;Wie sehr mussten Sie sich beim Lesen konzentrieren?&quot;, &quot;Wie einfach fanden Sie die Formulierungen im Text?&quot;, &quot;Wie interessant fanden Sie den Text?&quot;]&amp;#10;    item_names = [&quot;subj_reading_effort1&quot;, &quot;subj_text_difficulty&quot;, &quot;subj_text_incomprehensibility1&quot;, &quot;subj_reading_effort2&quot;, &quot;subj_text_incomprehensibility2&quot;, &quot;subj_interest_in_text&quot;]&amp;#10;    item_labels = [[&quot;gar nicht anstrengend&quot;, &quot;sehr anstrengend&quot;], [&quot;sehr leicht&quot;, &quot;sehr schwierig&quot;], [&quot;sehr verständlich&quot;, &quot;gar nicht verständlich&quot;], [&quot;gar nicht&quot;, &quot;sehr stark&quot;], [&quot;sehr einfach&quot;,&quot;sehr schwierig&quot;], [&quot;sehr langweilig&quot;,&quot;sehr interessant&quot;]]&amp;#10;    &amp;#10;    # loop items&amp;#10;    for item_idx, curr_item in enumerate(items):&amp;#10;        print(&quot;rating text difficulty – current item: &quot; + item_names[item_idx])&amp;#10;                &amp;#10;        # clear buffer of all previously recorded key events:&amp;#10;        event.clearEvents()&amp;#10;        &amp;#10;        # get matching labels &amp; name of current item&amp;#10;        curr_item_labels = item_labels[item_idx]&amp;#10;        print(&quot;item labels: &quot;, curr_item_labels)&amp;#10;        curr_item_name = item_names[item_idx]&amp;#10;        &amp;#10;        # set up slider&amp;#10;        slider = visual.Slider(win = win,&amp;#10;                               pos = (0, 0), # position of the slider (centered on screen)&amp;#10;                               size = (10, 0.5), # size of the scale&amp;#10;                               labels = curr_item_labels, # labels for the ticks&amp;#10;                               ticks = [0, 100], # make ticks at 0 and 100&amp;#10;                               units = &quot;deg&quot;, # unit = viewing angle degrees&amp;#10;                               color = &quot;black&quot;, &amp;#10;                               fillColor = &quot;green&quot;, &amp;#10;                               borderColor = &quot;black&quot;, &amp;#10;                               granularity = 1, # scale step size&amp;#10;                               labelHeight = 0.5, # font size of the labels I guess?&amp;#10;                               font = &quot;Bookman Old Style&quot;)&amp;#10;        slider.markerPos = 50  # initial position of slider button&amp;#10;&amp;#10;        # set up question text&amp;#10;        question_text = visual.TextStim(win, &amp;#10;                                        text = curr_item,&amp;#10;                                        color = &quot;black&quot;,&amp;#10;                                        pos = (0, 2),&amp;#10;                                        height = 0.6,&amp;#10;                                        font = &quot;Bookman Old Style&quot;)&amp;#10;                                        &amp;#10;        # set up instruction text&amp;#10;        instr_text = visual.TextStim(win, &amp;#10;                                     text = &quot;(Bitte benutzen Sie die Pfeiltasten um den Punkt zu bewegen. Mit der Leertaste können Sie Ihre Bewertung bestätigen.)&quot;,&amp;#10;                                     color = &quot;grey&quot;,&amp;#10;                                     pos = (0,-3), &amp;#10;                                     height = 0.4,&amp;#10;                                     font = &quot;Bookman Old Style&quot;)&amp;#10;        # show all on screen&amp;#10;        question_text.draw()&amp;#10;        instr_text.draw()&amp;#10;        slider.draw()&amp;#10;        win.flip()                              &amp;#10;        core.wait(0.1)&amp;#10;        &amp;#10;        # check for key responses&amp;#10;        print(&quot;set question &amp; slider - awaiting key responses now!&quot;)&amp;#10;        moved_slider = False&amp;#10;        &amp;#10;        while True:&amp;#10;            # show stimuli on screen&amp;#10;            question_text.draw()&amp;#10;            instr_text.draw()&amp;#10;            slider.draw()&amp;#10;            win.flip()&amp;#10;&amp;#10;            # check for key events&amp;#10;            keys = event.getKeys()&amp;#10;            # if there was a key response...&amp;#10;            if keys:&amp;#10;                # get the last key that was pressed&amp;#10;                key = keys[-1]&amp;#10;                &amp;#10;                # if esc was pressed, end the experiment:&amp;#10;                if key == &quot;escape&quot;:&amp;#10;                    print(&quot;quitting experiment&quot;)&amp;#10;                    core.quit()&amp;#10;&amp;#10;                # if left arrow key was pressed, move slider button 1 unit to the left&amp;#10;                elif key == &quot;left&quot;:&amp;#10;                    # move slider button&amp;#10;                    slider.markerPos -= 1&amp;#10;                    &amp;#10;                    # keep in mind that participant moved the slider button&amp;#10;                    moved_slider = True&amp;#10;                    &amp;#10;                    # update slider on screen&amp;#10;                    #win.flip() # clear screen before drawing question &amp; slider again&amp;#10;                    core.wait(0.1)&amp;#10;                    question_text.draw()&amp;#10;                    instr_text.draw()&amp;#10;                    slider.draw()&amp;#10;                    win.flip()&amp;#10;                    print(&quot;moving slider button to the left&quot;)&amp;#10;&amp;#10;                # if right arrow key is pressed, move slider button 1 unit to the right&amp;#10;                elif key == &quot;right&quot;:&amp;#10;                    &amp;#10;                    # move slider button&amp;#10;                    slider.markerPos += 1&amp;#10;                    &amp;#10;                    # keep in mind that participant moved the slider button&amp;#10;                    moved_slider = True&amp;#10;                    &amp;#10;                    # update slider on screen&amp;#10;                    #win.flip() # clear screen before drawing question &amp; slider again&amp;#10;                    core.wait(0.1)&amp;#10;                    question_text.draw()&amp;#10;                    instr_text.draw()&amp;#10;                    slider.draw()&amp;#10;                    win.flip()&amp;#10;                    print(&quot;moving slider button to the right&quot;)&amp;#10;&amp;#10;                # if space bar is pressed and participant moved slider, save rating and go to next item&amp;#10;                elif key == &quot;space&quot; and moved_slider == True:&amp;#10;                    # get slider position aka rating&amp;#10;                    curr_rating = slider.markerPos&amp;#10;                    print(&quot;Participant rated &quot; +  curr_item_name +  &quot; as: &quot;, curr_rating)&amp;#10;                    &amp;#10;                    # save data:&amp;#10;                    thisExp.addData('question', curr_item_name)&amp;#10;                    thisExp.addData('chosen_ans', curr_rating)&amp;#10;                    thisExp.addData('text_nr', curr_text_nr)                    &amp;#10;                    thisExp.addData('block_nr', exp_block_counter)&amp;#10;                    thisExp.addData('block_name', curr_block)&amp;#10;                    thisExp.addData('block_kind', curr_nback_cond)&amp;#10;                    # start a new row in the csv&amp;#10;                    thisExp.nextEntry()            &amp;#10;                    &amp;#10;                    # clear window for next item&amp;#10;                    win.flip()&amp;#10;                    # wait for 500 ms before drawing the next item on screen&amp;#10;                    core.wait(0.5)&amp;#10;                    break  # end the while loop&amp;#10;&amp;#10;# go to next block!&amp;#10;exp_block_counter += 1&amp;#10;print(&quot;Going to block &quot; + str(exp_block_counter + 1) + &quot;/17 now!&quot;)&amp;#10;continueRoutine = False&amp;#10;&amp;#10;# If there are still blocks left, go to next one.&amp;#10;# If not, end loop here:&amp;#10;if exp_block_counter == 17:&amp;#10;    blocks.finished = True&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="block_counter += 1;&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="motor_task">
      <CodeComponent name="code_motor_task">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# Purely motoric task (-&gt; more or less no visual stimuli) &amp;#10;&amp;#10;# In this task, the participant is presented with a number of &amp;#10;# squares that are separated by ISIs of a fixed duration. &amp;#10;# Each square is shown for 100 ms, during the ISI nothing is shown on screen.&amp;#10;# The duration of the ISI is the median duration of the reading times &amp;#10;# recorded in the first reading baseline block.&amp;#10;&amp;#10;# compute median RT from previously recorded durations:&amp;#10;ISI_duration = np.median(vis_task_durations)&amp;#10;print(&quot;RT median:&quot;, ISI_duration)&amp;#10;&amp;#10;&amp;#10;### INSTRUCTIONS:&amp;#10;# keep background ivory&amp;#10;win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;win.flip()&amp;#10;&amp;#10;### Show instructions&amp;#10;# set instruction text&amp;#10;instr_text = locals()[&quot;instr_motor_task&quot;]&amp;#10;# create text box&amp;#10;instr_text_stim = visual.TextStim(win, &amp;#10;                                  text = instr_text, &amp;#10;                                  height = 0.5, # font height: 5° visual angle&amp;#10;                                  font = &quot;Bookman Old Style&quot;,&amp;#10;                                  pos = (0, 0),&amp;#10;                                  color = &quot;black&quot;)&amp;#10;&amp;#10;# display the instructions on screen&amp;#10;while True:&amp;#10;    # keep background ivory&amp;#10;    win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;    instr_text_stim.draw()&amp;#10;    win.flip()&amp;#10;    # end screen if participant presses space&amp;#10;    if 'space' in event.getKeys():&amp;#10;        break &amp;#10;&amp;#10;  &amp;#10;### START MOTOR TASK BLOCK:&amp;#10;&amp;#10;### change background colour &amp;#10;# transition from ivory &amp;#10;# to medium grey &amp;#10;change_bg_colour(window = win, &amp;#10;                 start_rgb = light_bg_col,&amp;#10;                 end_rgb = dark_bg_col, &amp;#10;                 seconds = 2)&amp;#10;# Wait for a brief period of time so bg is set&amp;#10;core.wait(0.8)&amp;#10;# keep background grey&amp;#10;win.setColor(dark_bg_col, colorSpace='rgb')&amp;#10;win.flip()&amp;#10;&amp;#10;&amp;#10;### start block loop&amp;#10;&amp;#10;# create &quot;empty&quot; square stimulus:&amp;#10;stim = visual.Rect(win = win,&amp;#10;                   width = 1, # width = 1° visual angle&amp;#10;                   height = 1, # height = 1° visual angle &amp;#10;                   pos = (0, 0), # center stimulus &amp;#10;                   opacity = 0, # set opacity to 0 for a start&amp;#10;                   fillColor = dark_bg_col,&amp;#10;                   colorSpace = &quot;rgb&quot;)&amp;#10;# show it on screen&amp;#10;stim.draw()&amp;#10;stim_mask.draw()&amp;#10;win.flip()&amp;#10;&amp;#10;block_onset_time = core.getTime()&amp;#10;# start showing 20 cues for motor response&amp;#10;for cue_idx in range(0,20):&amp;#10;    &amp;#10;    # show cue (white square)&amp;#10;    stim.color = [(x / 127.5) - 1 for x in (255, 255, 255)] # white&amp;#10;    stim.draw()&amp;#10;    win.flip()&amp;#10;    last_cue_onset_timestamp = core.getTime()&amp;#10;    # send cue onset trigger to LSL stream&amp;#10;    #out_marker.push_sample([&quot;STIM_ONSET_motor_task&quot;])&amp;#10;    &amp;#10;    # wait until 100 ms are over&amp;#10;    while core.getTime() &lt; last_cue_onset_timestamp + 0.1:&amp;#10;        # draw the stimulus during the waiting period&amp;#10;        stim.draw()&amp;#10;        win.flip()&amp;#10;        &amp;#10;        # Check if participant pressed space - if yes, send trigger + record data:&amp;#10;        if event.getKeys(['space']):&amp;#10;            # send reaction trigger to LSL stream&amp;#10;            #out_marker.push_sample([&quot;REACTION_motor_task&quot;])&amp;#10;            &amp;#10;            # record timestamp of reaction and save in output csv&amp;#10;            reaction_timestamp = core.getTime()&amp;#10;   &amp;#10;            # save data in output csv:&amp;#10;            thisExp.addData('block_cond', 'None')&amp;#10;            thisExp.addData('block_nr', exp_block_counter)&amp;#10;            thisExp.addData('block_name', 'motor_task')&amp;#10;            thisExp.addData('reaction_timestamp', reaction_onset)&amp;#10;            thisExp.addData('last_cue_onset_timestamp', last_cue_onset_timestamp)&amp;#10;            &amp;#10;            print(&quot;participant pressed space!&quot;)&amp;#10;        &amp;#10;        # make cue disappear by making colour match the bg colour again&amp;#10;        stim.color = dark_bg_col&amp;#10;        stim.draw()&amp;#10;        win.flip()&amp;#10;    &amp;#10;        # send cue offset trigger to LSL stream&amp;#10;        #out_marker.push_sample([&quot;STIM_OFFSET_motor_task&quot;])&amp;#10;    &amp;#10;        # start recording motor response (space bar press)&amp;#10;        onset_time = core.getTime()&amp;#10;        &amp;#10;        #while core.getTime() &lt; onset_time + ISI_duration:&amp;#10;        while core.getTime() &lt; onset_time + 1: # make ISI 1 second long&amp;#10;            # if space bar was pressed, record RT, send trigger &amp; save data&amp;#10;            if event.getKeys(['space']):&amp;#10;                # send reaction trigger to LSL stream&amp;#10;                #out_marker.push_sample([&quot;REACTION_motor_task&quot;])&amp;#10;                &amp;#10;                # record timestamp of reaction and save in output csv&amp;#10;                reaction_timestamp = core.getTime()&amp;#10;       &amp;#10;                # save data in output csv:&amp;#10;                thisExp.addData('block_cond', 'None')&amp;#10;                thisExp.addData('block_nr', exp_block_counter)&amp;#10;                thisExp.addData('block_name', 'motor_task')&amp;#10;                thisExp.addData('reaction_timestamp', reaction_timestamp)&amp;#10;                thisExp.addData('last_cue_onset_timestamp', last_cue_onset_timestamp)&amp;#10;                &amp;#10;                print(&quot;participant pressed space!&quot;)  &amp;#10;                &amp;#10;            # --&gt; don't save anything if participant didn't react, just show the next cue!&amp;#10;&amp;#10;&amp;#10;&amp;#10;# If all cues were shown, start recording all motor &amp;#10;# responses for a duration of 3 min:&amp;#10;&amp;#10;onset_time = core.getTime()&amp;#10;while core.getTime() &lt; onset_time + (3 * 60 * 1000): # 3 min * 60 s / min * 1000 ms / s = 180000 ms&amp;#10;    &amp;#10;    # if there was a key response, send trigger &amp; save data:&amp;#10;    if event.getKeys(['space']):&amp;#10;        &amp;#10;        # send reaction trigger to LSL stream&amp;#10;        #out_marker.push_sample([&quot;REACTION_motor_task&quot;])&amp;#10;        &amp;#10;        # record timestamp of reaction and save in output csv&amp;#10;        reaction_timestamp = core.getTime()&amp;#10;       &amp;#10;        # save data in output csv:&amp;#10;        thisExp.addData('block_cond', 'None')&amp;#10;        thisExp.addData('block_nr', exp_block_counter)&amp;#10;        thisExp.addData('block_name', 'motor_task')&amp;#10;        thisExp.addData('reaction_timestamp', reaction_timestamp)&amp;#10;        thisExp.addData('last_cue_onset_timestamp', last_cue_onset_timestamp)&amp;#10;        &amp;#10;    # start a new row in the csv&amp;#10;    thisExp.nextEntry()&amp;#10;&amp;#10;    ### IF TESTING MODE ENABLED: end loop after 20 trials&amp;#10;    if expInfo['testing_mode'] == &quot;yes&quot;:&amp;#10;        if trial_idx == 20:&amp;#10;            break&amp;#10;    &amp;#10;print(&quot;finished motor task block!&quot;)&amp;#10;&amp;#10;# change background colour from grey to ivory&amp;#10;change_bg_colour(window = win, &amp;#10;                 start_rgb = dark_bg_col, &amp;#10;                 end_rgb = light_bg_col, &amp;#10;                 seconds = 2)&amp;#10;# Wait for a brief period of time so bg is set&amp;#10;core.wait(0.5)&amp;#10;&amp;#10;# keep background ivory&amp;#10;win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;win.flip()&amp;#10;        &amp;#10;# go to next block (if there is one left)&amp;#10;exp_block_counter += 1&amp;#10;continueRoutine = False&amp;#10;&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_motor_task" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="vis_task">
      <CodeComponent name="code_vis_task">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="### VISUAL TASK TRAINING &amp; MAIN BLOCK&amp;#10;&amp;#10;# In this task, the first reading baseline &amp;#10;# text is presented again, but this time the text proceeds &amp;#10;# automatically without the participant having to press the Space bar.&amp;#10;# To make sure the words are not presented too fast, &amp;#10;# we take the exact time each word was presented on screen &amp;#10;# from the block where the participant could control the speed.&amp;#10;&amp;#10;# In this block, there's no 1-back or 2-back, but we use a 0-back &amp;#10;# task as a motoric &quot;tapping task&quot;, so basically the participants always &amp;#10;# have to press a certain button if the current word has a certain target colour.&amp;#10;# So the text stays the same, the durations stay the same, &amp;#10;# but I change the colours.&amp;#10;&amp;#10;# Target to non-target ratio: 50:250 (16.66% targets just as in the other blocks)&amp;#10;# The target colour is chosen at random from the 4 colours we use in the experiment.&amp;#10;&amp;#10;# Put differently: We take both the text from one of the reading BL &amp;#10;# blocks AND the measured reading times for each word from this &amp;#10;# block, then we show the text again, but this time with the previously &amp;#10;# recorded duration for each word and a different colour sequence. &amp;#10;# Every time the word is shown in a certain colour (e.g. blue), &amp;#10;# the participant has to press a button, but there's no real n-back in this block.&amp;#10;# Obviously, the participant will be told which colour &amp;#10;# is the target colour before the block.&amp;#10; &amp;#10;# choose 1 target colour &amp; generate 0-back colour list&amp;#10;target_colour = random.choice(colours)&amp;#10;&amp;#10;# keep background ivory&amp;#10;win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;win.flip()&amp;#10;&amp;#10;# ----------------------------------&amp;#10; &amp;#10;### VISUAL TASK TRAINING&amp;#10;&amp;#10;# Show instructions&amp;#10;&amp;#10;# clear buffer of all previously recorded key events:&amp;#10;event.clearEvents()&amp;#10;&amp;#10;# create text boxes&amp;#10;instr_text_stim1 = visual.TextStim(win, &amp;#10;                                  text = locals()[&quot;instr_vis_task_1&quot;], &amp;#10;                                  height = 0.5, # font height: 5° visual angle&amp;#10;                                  font = &quot;Bookman Old Style&quot;,&amp;#10;                                  pos = (0, 4), # move instructions up a bit&amp;#10;                                  color = &quot;black&quot;)&amp;#10;instr_text_stim2 = visual.TextStim(win, &amp;#10;                                  text = locals()[&quot;instr_vis_task_2&quot;], &amp;#10;                                  height = 0.5, # font height: 5° visual angle&amp;#10;                                  font = &quot;Bookman Old Style&quot;,&amp;#10;                                  pos = (0, -5), # move instructions down a bit&amp;#10;                                  color = &quot;black&quot;)&amp;#10;# create &quot;empty&quot; circle as stimulus&amp;#10;instr_colour_circle_stim = visual.Circle(win = win,&amp;#10;                                         radius = 1, # radius = 1° visual angle&amp;#10;                                         # colorSpace = &quot;hex&quot;,&amp;#10;                                         pos = (0,0)) # move circle slightly down&amp;#10;&amp;#10;# set current target colour as colour of circle:&amp;#10;instr_colour_circle_stim.fillColor = target_colour&amp;#10;&amp;#10;# display the text &amp; the circle on screen until Space is pressed&amp;#10;while True:&amp;#10;    # keep background ivory&amp;#10;    win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;    instr_text_stim1.draw()&amp;#10;    instr_text_stim2.draw()&amp;#10;    instr_colour_circle_stim.draw()&amp;#10;    win.flip()&amp;#10;    # end screen if participant presses space&amp;#10;    if 'space' in event.getKeys():&amp;#10;        break &amp;#10;&amp;#10;&amp;#10;### START VISUAL TASK TRAINING&amp;#10;&amp;#10;# change background colour: &amp;#10;# transition from ivory &amp;#10;# to medium grey &amp;#10;change_bg_colour(window = win, &amp;#10;                 start_rgb = light_bg_col,&amp;#10;                 end_rgb = dark_bg_col, &amp;#10;                 seconds = 2)&amp;#10;# Wait for a brief period of time so bg is set&amp;#10;core.wait(0.8)&amp;#10;# keep background grey&amp;#10;win.setColor(dark_bg_col, colorSpace='rgb')&amp;#10;win.flip()&amp;#10;&amp;#10;# clear buffer of all previously recorded key events:&amp;#10;event.clearEvents()&amp;#10;&amp;#10;&amp;#10;# prepare stimuli:&amp;#10;curr_text_training = ['Einen', 'Augenblick', 'herrschte', 'totale', 'Stille.', 'Man', 'hörte', 'plötzlich', 'die', 'Wellen', 'rauschen', 'und', 'das', 'Radio', 'aus', 'dem', 'Salon', 'herüberjazzen,', 'man', 'vernahm', 'jeden', 'Schritt', 'vom', 'Promenadendeck', 'und', 'das', 'leise,', 'feine', 'Sausen', 'des', 'Winds,', 'der', 'durch', 'die', 'Fugen', 'der', 'Fenster', 'fuhr.', 'Keiner', 'von', 'uns', 'atmete,', 'es', 'war', 'zu', 'plötzlich', 'gekommen', 'und', 'wir', 'alle', 'noch', 'geradezu', 'erschrocken', 'über', 'das', 'Unwahrscheinliche,', 'daß', 'dieser', 'Unbekannte', 'dem', 'Weltmeister', 'in', 'einer', 'schon', 'halb', 'verlorenen', 'Partie', 'seinen', 'Willen', 'aufgezwungen', 'haben', 'sollte.', 'McConnor', 'lehnte', 'sich', 'mit', 'einem', 'Ruck', 'zurück,', 'der', 'zurückgehaltene', 'Atem', 'fuhr', 'ihm', 'hörbar', 'in', 'einem', 'beglückten', &quot;\&quot;Ah!\&quot;&quot;, 'von', 'den', 'Lippen.', 'Ich', 'wiederum', 'beobachtete', 'Czentovic.', 'Schon', 'bei', 'den', 'letzten', 'Zügen', 'hatte', 'mir', 'geschienen,', 'als', 'ob', 'er', 'blässer', 'geworden', 'sei.', 'Aber', 'er','verstand', 'sich', 'gut', 'zusammenzuhalten.', 'Er', 'verharrte', 'in', 'seiner', 'scheinbar', 'gleichmütigen', 'Starre', 'und', 'fragte', 'nur', 'in', 'lässigster', 'Weise,', 'während', 'er', 'die', 'Figuren', 'mit', 'ruhiger', 'Hand', 'vom', 'Brette', 'schob:', &quot;\&quot;Wünschen&quot;, 'die', 'Herren', 'noch', 'eine', 'dritte', 'Partie?\&quot;']&amp;#10;&amp;#10;# compute average reading speed by dividing the &amp;#10;# let's say we use 40 ms / letter, that would be 200 ms for a short word like &quot;Einen&quot;, so still quite a lot:&amp;#10;curr_durations_training = [len(word) * 40 / 1000 for word in curr_text_training] # in ms&amp;#10;# print(curr_durations_training)&amp;#10;&amp;#10;# generate random colour list:&amp;#10;curr_colours_training = create_0back_stimlist(target_colour = target_colour, nr_targets = 25, colour_codes = colours, nr_words = len(curr_text_training))&amp;#10;&amp;#10;# save position of targets as True/False list:&amp;#10;curr_targets_training = [colour == target_colour for colour in curr_colours_training]&amp;#10;&amp;#10;&amp;#10;### prepare flicker&amp;#10;# hint: flicker_freq and frame_rate are set in the settings &amp;#10;# code component at the beginning of the experiment.&amp;#10;&amp;#10;# create flicker phase variable - start at phase = 0&amp;#10;flicker_phase = 0&amp;#10;# we also need the start time (let's set it as current time &amp;#10;# at this point in the script):&amp;#10;start_time = core.getTime()&amp;#10;&amp;#10;### start block loop&amp;#10;&amp;#10;# create empty text stimulus &amp;#10;stim = visual.TextStim(win = win, &amp;#10;                       text = &quot; &quot;, &amp;#10;                       pos = (0,0), # center stimulus&amp;#10;                       font = &quot;Times New Roman&quot;,&amp;#10;                       height = 1) # font height = 1° visual angle&amp;#10;&amp;#10;# create grey rectangle that masks the text if I set opacity to 1&amp;#10;# --&gt; changing the text opacity directly isn't working: https://discourse.psychopy.org/t/opacity-of-text-stimuli-is-not-updating/11152/7    &amp;#10;stim_mask = visual.Rect(win = win,&amp;#10;                        width = 20, # width = 20° visual angle&amp;#10;                        height = 3, # height = 3° visual angle &amp;#10;                        pos = (0,0), # center stimulus &amp;#10;                        opacity = 0, # set opacity to 0 for a start&amp;#10;                        fillColor = dark_bg_col,&amp;#10;                        colorSpace = &quot;rgb&quot;)&amp;#10;&amp;#10;stim.draw()&amp;#10;stim_mask.draw()&amp;#10;win.flip()&amp;#10;&amp;#10;&amp;#10;# loop words in current text&amp;#10;for trial_idx, curr_word in enumerate(curr_text_training):&amp;#10;    print(&quot;current idx: &quot; + str(trial_idx) + &quot;, curr word:&quot; + curr_word)&amp;#10;    &amp;#10;    ### prepare &amp; show current word:&amp;#10;    &amp;#10;    # get current colour&amp;#10;    curr_colour = curr_colours_training[trial_idx]&amp;#10;    # check if it's a target&amp;#10;    curr_target = curr_targets_training[trial_idx]&amp;#10;    &amp;#10;    # get duration for current word&amp;#10;    curr_duration = curr_durations_training[trial_idx]&amp;#10;    &amp;#10;    # get trial number (start counting from 1, so add 1)&amp;#10;    curr_trial_nr = trial_idx + 1&amp;#10;&amp;#10;    # set current word &amp; colour as content of text stimulus&amp;#10;    stim.color = curr_colour&amp;#10;    stim.text = curr_word&amp;#10;    &amp;#10;    # Flicker option 1: use sine-wave (gradient) flicker&amp;#10;    # create current opacity value to continue flickering the word&amp;#10;    #frame_time = core.getTime() # get current time point (in sec)&amp;#10;    #flicker_intensity = np.sin(2 * np.pi * flicker_freq * (frame_time - start_time) + flicker_phase)&amp;#10;    #opacity = (flicker_intensity + 1) / 2&amp;#10;&amp;#10;    # use square-wave (on-off) flicker&amp;#10;    frame_time = core.getTime() # get current time point (in sec)&amp;#10;    time_passed = frame_time - start_time # calculate time passed since start&amp;#10;    cycle_duration = 1 / flicker_freq # calculate duration of one flicker cycle&amp;#10;    cycle_passed = time_passed % cycle_duration # calculate time passed in current flicker cycle&amp;#10;    if cycle_passed &lt; cycle_duration / 2: # if in the first half of the cycle&amp;#10;        opacity = 1 # set opacity to 1&amp;#10;    else: # if in the second half of the cycle&amp;#10;        opacity = 0 # set opacity to 0&amp;#10;        &amp;#10;    stim_mask.opacity = opacity&amp;#10;    &amp;#10;    # show word on screen&amp;#10;    stim.draw() # draw word on screen&amp;#10;    stim_mask.draw() # draw mask on screen&amp;#10;    win.flip() # update the window to clear the screen and display the word&amp;#10;&amp;#10;    # send word onset trigger to LSL stream&amp;#10;    marker_text = &quot;trial_&quot; + str(curr_trial_nr) + &quot;_&quot; + curr_word + &quot;_&quot; + curr_colour + &quot;_&quot; + str(curr_target)&amp;#10;    out_marker.push_sample([&quot;STIM_ONSET_vistask_training&quot; + marker_text])&amp;#10;    &amp;#10;    # record trial onset time&amp;#10;    onset_time = core.getTime()&amp;#10;    print(&quot;onset_time:&quot;, onset_time)&amp;#10;    print(&quot;word duration: &quot; +  str(onset_time + curr_duration) + &quot; ms&quot;)&amp;#10;    &amp;#10;&amp;#10;    ### wait for key response until curr_duration is over: &amp;#10;&amp;#10;    # create tracker for 0-back responses for the current trial:&amp;#10;    previous_response = False&amp;#10;&amp;#10;    ### start recording responses&amp;#10;    # start while loop that looks for responses&amp;#10;    # --&gt; end while loop only if duration for current word is over&amp;#10;    while core.getTime() &lt; (onset_time + curr_duration):    &amp;#10;        print(&quot;curr time stamp:&quot;, core.getTime())&amp;#10;        # in each iteration, draw word on screen&amp;#10;        # --&gt; flicker again&amp;#10;&amp;#10;        # Flicker option 1: use sine-wave (gradient) flicker&amp;#10;        #frame_time = core.getTime() &amp;#10;        #flicker_intensity = np.sin(2 * np.pi * flicker_freq * (frame_time - start_time) + flicker_phase)&amp;#10;        #opacity = (flicker_intensity + 1) / 2&amp;#10;&amp;#10;        # Flicker option 2: use square-wave (on-off) flicker&amp;#10;        frame_time = core.getTime() &amp;#10;        time_passed = frame_time - start_time &amp;#10;        cycle_duration = 1 / flicker_freq&amp;#10;        cycle_passed = time_passed % cycle_duration&amp;#10;        if cycle_passed &lt; cycle_duration / 2:&amp;#10;            opacity = 1&amp;#10;        else: &amp;#10;            opacity = 0&amp;#10;            &amp;#10;        stim_mask.opacity = opacity&amp;#10;        &amp;#10;        stim.draw()&amp;#10;        stim_mask.draw()&amp;#10;        win.flip()&amp;#10;        &amp;#10;        # if participant pressed button &quot;c&quot; and hasn't already responded in the current trial&amp;#10;        if event.getKeys(['c']) and previous_response == False:&amp;#10;            # get reaction time&amp;#10;            # we measure reaction time from the onset of the current word, even if the target &amp;#10;            # was the word before (or occurred even earlier). &amp;#10;            # In such cases we can infer the actual reaction times from the df later.&amp;#10;            # Reason why I don't use the last target as an onset: Doesn't take into &amp;#10;            # account that there might be false alarm responses.&amp;#10;            curr_nback_RT = (core.getTime() - onset_time) * 1000 # *1000 to convert s to ms    &amp;#10;            ### send trigger to LSL stream to indicate n-back response&amp;#10;            out_marker.push_sample([&quot;REACTION_visktask__training&quot; + marker_text])&amp;#10;            # only get first target response, we don't care if they press the button more than once in this trial:&amp;#10;            previous_response = True&amp;#10;            print(&quot;detected C key press -- 0-back RT: &quot; + str(curr_nback_RT) + &quot; ms&quot;) # * 1000 to convert s to ms&amp;#10;        # If esc is pressed, end the experiment:&amp;#10;        elif event.getKeys(['escape']):&amp;#10;            core.quit()&amp;#10;    &amp;#10;    ### end trial&amp;#10;    print(&quot;end trial&quot;)&amp;#10;    # stop display of current word&amp;#10;    win.flip()&amp;#10;    &amp;#10;    # check whether response was hit, miss, false alarm or correct rejection&amp;#10;    # they saw a target and there was one: hit&amp;#10;    if previous_response and curr_target:&amp;#10;        curr_nback_response = &quot;hit&quot;&amp;#10;    # they didn't see a target but there was one: miss&amp;#10;    elif previous_response == False and curr_target:&amp;#10;        curr_nback_response = &quot;miss&quot;&amp;#10;        curr_nback_RT = None&amp;#10;    # they didn't see a target and there was none: correct rejection&amp;#10;    elif previous_response == False and curr_target == False:&amp;#10;        curr_nback_response = &quot;correct rejection&quot;&amp;#10;        curr_nback_RT = None&amp;#10;    # they saw a target but there was none: false alarm&amp;#10;    elif previous_response and curr_target == False:&amp;#10;        curr_nback_response = &quot;false alarm&quot;&amp;#10;&amp;#10;    ### End of trial / current word display:&amp;#10;    &amp;#10;    ### save everything in output csv&amp;#10;    thisExp.addData('colour', curr_colour)&amp;#10;    thisExp.addData('target', curr_target)&amp;#10;    thisExp.addData('nback_response', curr_nback_response)&amp;#10;    thisExp.addData('nback_RT', curr_nback_RT) # in ms&amp;#10;    thisExp.addData('duration', curr_duration * 1000) # *1000 to convert s to ms&amp;#10;    thisExp.addData('text_nr', None)&amp;#10;    thisExp.addData('trial_nr', curr_trial_nr)&amp;#10;    thisExp.addData('block_cond', 'None')&amp;#10;    thisExp.addData('block_nr', exp_block_counter)&amp;#10;    thisExp.addData('block_name', 'visual_task_training')&amp;#10;    # careful, make sure to escape quotes in the string &amp;#10;    # differently before saving in csv file:&amp;#10;    thisExp.addData('word', escape_quotes(curr_word))&amp;#10;    &amp;#10;    # start a new row in the csv&amp;#10;    thisExp.nextEntry()&amp;#10;&amp;#10;    ### IF TESTING MODE ENABLED: end loop after 4 trials&amp;#10;    if expInfo['testing_mode'] == &quot;yes&quot;:&amp;#10;        if trial_idx == 3:&amp;#10;            break&amp;#10;    &amp;#10;    ### send word offset trigger to LSL stream   &amp;#10;    out_marker.push_sample([&quot;STIM_OFFSET_vistask_training&quot; + marker_text])&amp;#10;    &amp;#10;print(&quot;finished visual task block&quot;)&amp;#10;&amp;#10;# change background colour from grey to ivory&amp;#10;change_bg_colour(window = win, &amp;#10;                 start_rgb = dark_bg_col, &amp;#10;                 end_rgb = light_bg_col, &amp;#10;                 seconds = 2)&amp;#10;# Wait for a brief period of time so bg is set&amp;#10;core.wait(0.5)&amp;#10;&amp;#10;# keep background ivory&amp;#10;win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;win.flip()&amp;#10;        &amp;#10;# go to next block  &amp;#10;exp_block_counter += 1&amp;#10;&amp;#10;&amp;#10;# ----------------------------------&amp;#10;&amp;#10;&amp;#10;### START VISUAL TASK BLOCK&amp;#10;&amp;#10;# clear buffer of all previously recorded key events:&amp;#10;event.clearEvents()&amp;#10;&amp;#10;&amp;#10;### Show instructions&amp;#10;# set instruction text&amp;#10;instr_text = &quot;Instruktionen\n\n\nGut gemacht!\n\nNun folgt ein etwas längerer Hauptblock, die Aufgabe bleibt aber die Gleiche.\n\nBitte drücken Sie die Leertaste, um den Block zu starten.&quot;&amp;#10;# create text box&amp;#10;instr_text_stim = visual.TextStim(win, &amp;#10;                                  text = instr_text, &amp;#10;                                  height = 0.5, # font height: 5° visual angle&amp;#10;                                  font = &quot;Bookman Old Style&quot;,&amp;#10;                                  pos = (0, 0),&amp;#10;                                  color = &quot;black&quot;)&amp;#10;&amp;#10;# display the instructions on screen&amp;#10;while True:&amp;#10;    # keep background ivory&amp;#10;    win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;    instr_text_stim.draw()&amp;#10;    win.flip()&amp;#10;    # end screen if participant presses space&amp;#10;    if 'space' in event.getKeys():&amp;#10;        break &amp;#10;&amp;#10; &amp;#10;### START VISUAL TASK BLOCK:&amp;#10;&amp;#10;### change background colour &amp;#10;# transition from ivory &amp;#10;# to medium grey &amp;#10;change_bg_colour(window = win, &amp;#10;                 start_rgb = light_bg_col,&amp;#10;                 end_rgb = dark_bg_col, &amp;#10;                 seconds = 2)&amp;#10;# Wait for a brief period of time so bg is set&amp;#10;core.wait(0.8)&amp;#10;# keep background grey&amp;#10;win.setColor(dark_bg_col, colorSpace='rgb')&amp;#10;win.flip()&amp;#10;&amp;#10;# clear buffer of all previously recorded key events:&amp;#10;event.clearEvents()&amp;#10;&amp;#10;### prepare stimuli&amp;#10;&amp;#10;# Now we need a text and RTs from one of the baseline blocks. &amp;#10;&amp;#10;# We have 9 main blocks, 3 of which are baseline blocks, so in theory, &amp;#10;# we could choose one of them randomly.&amp;#10;# Problem: The first block in this study is always a baseline block,&amp;#10;# but the second and third one is presented at a random position &amp;#10;# somewhere in the second half of the experiment. So if we're out of luck, &amp;#10;# they could have been the last and penultimate block, so not &quot;far away&quot; &amp;#10;# enough from the current one. We don't want to show the same text in 2 consecutive blocks.&amp;#10;&amp;#10;# Idea: Find out where the baseline blocks are. &amp;#10;# If a baseline block is the last or penultimate block before this one, &amp;#10;# don't use it for this task. Worst case is that the second and third BL block are the &amp;#10;# penultimate &amp; last block and we have to use the first one.&amp;#10;# But if at least 2 blocks are &quot;far away&quot; enough from this one, choose &amp;#10;# randomly which one's text &amp; RTs will be used.&amp;#10;&amp;#10;# find out where the baseline blocks are in the experiment:&amp;#10;bl_indices = [index for index, block in enumerate(all_blocks) if block == &quot;Reading_Baseline_main&quot;]&amp;#10;list_length = len(all_blocks)&amp;#10;&amp;#10;# exclude all indices that are either 15 or 16 (our list has length 17, &amp;#10;# so 15 is the penultimate and 16 the last block)&amp;#10;bl_indices = [idx for idx in bl_indices if idx != 15 and idx != 16]&amp;#10;#print(&quot;remaining indices&quot;, bl_indices)&amp;#10;&amp;#10;# from the remaining indices, randomly choose one. &amp;#10;# That's the index of the block we want to repeat:&amp;#10;vis_task_block_idx = random.choice(bl_indices)&amp;#10;print(&quot;repeating block at idx&quot;, vis_task_block_idx, &quot;for visual task!&quot;)&amp;#10;&amp;#10;# get text from block we want to repeat (where exp_counter == vis_task_block_idx)&amp;#10;curr_text_nr = all_texts_nrs_list[vis_task_block_idx]&amp;#10;curr_text = locals()[curr_text_nr]&amp;#10;&amp;#10;# choose 1 target colour &amp; generate 0-back colour list&amp;#10;target_colour = random.choice(colours)&amp;#10;curr_colours = create_0back_stimlist(target_colour = target_colour, nr_targets = 50, colour_codes = colours, nr_words = 300)&amp;#10;&amp;#10;# save position of targets as True/False list:&amp;#10;curr_targets = [colour == target_colour for colour in curr_colours]&amp;#10;&amp;#10;# the RTs are saved in the array &quot;vis_task_durations&quot;&amp;#10;&amp;#10;&amp;#10;### prepare flicker&amp;#10;# hint: flicker_freq and frame_rate are set in the settings &amp;#10;# code component at the beginning of the experiment.&amp;#10;&amp;#10;# create flicker phase variable - start at phase = 0&amp;#10;flicker_phase = 0&amp;#10;# we also need the start time (let's set it as current time &amp;#10;# at this point in the script):&amp;#10;start_time = core.getTime()&amp;#10;&amp;#10;### start block loop&amp;#10;&amp;#10;# create empty text stimulus &amp;#10;stim = visual.TextStim(win = win, &amp;#10;                       text = &quot; &quot;, &amp;#10;                       pos = (0,0), # center stimulus&amp;#10;                       font = &quot;Times New Roman&quot;,&amp;#10;                       height = 1) # font height = 1° visual angle&amp;#10;&amp;#10;# create grey rectangle that masks the text if I set opacity to 1&amp;#10;# --&gt; changing the text opacity directly isn't working: https://discourse.psychopy.org/t/opacity-of-text-stimuli-is-not-updating/11152/7    &amp;#10;stim_mask = visual.Rect(win = win,&amp;#10;                        width = 20, # width = 20° visual angle&amp;#10;                        height = 3, # height = 3° visual angle &amp;#10;                        pos = (0,0), # center stimulus &amp;#10;                        opacity = 0, # set opacity to 0 for a start&amp;#10;                        fillColor = dark_bg_col,&amp;#10;                        colorSpace = &quot;rgb&quot;)&amp;#10;&amp;#10;stim.draw()&amp;#10;stim_mask.draw()&amp;#10;win.flip()&amp;#10;&amp;#10;&amp;#10;# loop words in current text&amp;#10;for trial_idx, curr_word in enumerate(curr_text):&amp;#10;    print(&quot;current idx: &quot; + str(trial_idx) + &quot;, curr word:&quot; + curr_word)&amp;#10;    &amp;#10;    ### prepare &amp; show current word:&amp;#10;    &amp;#10;    # get current colour&amp;#10;    curr_colour = curr_colours[trial_idx]&amp;#10;    # check if it's a target&amp;#10;    curr_target = curr_targets[trial_idx]&amp;#10;    &amp;#10;    # get duration for current word&amp;#10;    curr_duration = vis_task_durations[trial_idx]&amp;#10;    &amp;#10;    # get trial number (start counting from 1, so add 1)&amp;#10;    curr_trial_nr = trial_idx + 1&amp;#10;&amp;#10;    # set current word &amp; colour as content of text stimulus&amp;#10;    stim.color = curr_colour&amp;#10;    stim.text = curr_word&amp;#10;    &amp;#10;    # Flicker option 1: use sine-wave (gradient) flicker&amp;#10;    # create current opacity value to continue flickering the word&amp;#10;    #frame_time = core.getTime() # get current time point (in sec)&amp;#10;    #flicker_intensity = np.sin(2 * np.pi * flicker_freq * (frame_time - start_time) + flicker_phase)&amp;#10;    #opacity = (flicker_intensity + 1) / 2&amp;#10;&amp;#10;    # Flicker option 2: use square-wave (on-off) flicker&amp;#10;    frame_time = core.getTime() # get current time point (in sec)&amp;#10;    time_passed = frame_time - start_time # calculate time passed since start&amp;#10;    cycle_duration = 1 / flicker_freq # calculate duration of one flicker cycle&amp;#10;    cycle_passed = time_passed % cycle_duration # calculate time passed in current flicker cycle&amp;#10;    if cycle_passed &lt; cycle_duration / 2: # if in the first half of the cycle&amp;#10;        opacity = 1 # set opacity to 1&amp;#10;    else: # if in the second half of the cycle&amp;#10;        opacity = 0 # set opacity to 0&amp;#10;        &amp;#10;    stim_mask.opacity = opacity&amp;#10;    &amp;#10;    # show word on screen&amp;#10;    stim.draw() # draw word on screen&amp;#10;    stim_mask.draw() # draw mask on screen&amp;#10;    win.flip() # update the window to clear the screen and display the word&amp;#10;&amp;#10;    # send word onset trigger to LSL stream&amp;#10;    marker_text = &quot;trial_&quot; + str(curr_trial_nr) + &quot;_&quot; + curr_word + &quot;_&quot; + curr_colour + &quot;_&quot; + str(curr_target)&amp;#10;    out_marker.push_sample([&quot;STIM_ONSET_vistask&quot; + marker_text])&amp;#10;    &amp;#10;    # record trial onset time&amp;#10;    onset_time = core.getTime()&amp;#10;    print(&quot;word duration: &quot; +  str(onset_time + curr_duration) + &quot; ms&quot;)&amp;#10;    &amp;#10;&amp;#10;    ### wait for key response until curr_duration is over: &amp;#10;&amp;#10;    # create tracker for 0-back responses for the current trial:&amp;#10;    previous_response = False&amp;#10;&amp;#10;    ### start recording responses&amp;#10;    # start while loop that looks for responses&amp;#10;    # --&gt; end while loop only if duration for current word is over&amp;#10;    while core.getTime() &lt; (onset_time + curr_duration):    &amp;#10;&amp;#10;        # in each iteration, draw word on screen&amp;#10;        # --&gt; flicker again&amp;#10;&amp;#10;        # Flicker option 1: use sine-wave (gradient) flicker&amp;#10;        #frame_time = core.getTime() &amp;#10;        #flicker_intensity = np.sin(2 * np.pi * flicker_freq * (frame_time - start_time) + flicker_phase)&amp;#10;        #opacity = (flicker_intensity + 1) / 2&amp;#10;&amp;#10;        # Flicker option 2: use square-wave (on-off) flicker&amp;#10;        frame_time = core.getTime() &amp;#10;        time_passed = frame_time - start_time &amp;#10;        cycle_duration = 1 / flicker_freq&amp;#10;        cycle_passed = time_passed % cycle_duration&amp;#10;        if cycle_passed &lt; cycle_duration / 2:&amp;#10;            opacity = 1&amp;#10;        else: &amp;#10;            opacity = 0&amp;#10;            &amp;#10;        stim_mask.opacity = opacity&amp;#10;        &amp;#10;        stim.draw()&amp;#10;        stim_mask.draw()&amp;#10;        win.flip()&amp;#10;        &amp;#10;        # if participant pressed button &quot;c&quot; and hasn't already responded in the current trial&amp;#10;        if event.getKeys(['c']) and previous_response == False:&amp;#10;            # get reaction time&amp;#10;            # we measure reaction time from the onset of the current word, even if the target &amp;#10;            # was the word before (or occurred even earlier). &amp;#10;            # In such cases we can infer the actual reaction times from the df later.&amp;#10;            # Reason why I don't use the last target as an onset: Doesn't take into &amp;#10;            # account that there might be false alarm responses.&amp;#10;            curr_nback_RT = (core.getTime() - onset_time) * 1000 # *1000 to convert s to ms    &amp;#10;            ### send trigger to LSL stream to indicate n-back response&amp;#10;            out_marker.push_sample([&quot;REACTION_visktask_&quot; + marker_text])&amp;#10;            # only get first target response, we don't care if they press the button more than once in this trial:&amp;#10;            previous_response = True&amp;#10;            print(&quot;detected C key press -- 0-back RT: &quot; + str(curr_nback_RT) + &quot; ms&quot;) # * 1000 to convert s to ms&amp;#10;        # If esc is pressed, end the experiment:&amp;#10;        elif event.getKeys(['escape']):&amp;#10;            core.quit()&amp;#10;    &amp;#10;    ### end trial&amp;#10;    print(&quot;end trial&quot;)&amp;#10;    # stop display of current word&amp;#10;    win.flip()&amp;#10;    &amp;#10;    # check whether response was hit, miss, false alarm or correct rejection&amp;#10;    # they saw a target and there was one: hit&amp;#10;    if previous_response and curr_target:&amp;#10;        curr_nback_response = &quot;hit&quot;&amp;#10;    # they didn't see a target but there was one: miss&amp;#10;    elif previous_response == False and curr_target:&amp;#10;        curr_nback_response = &quot;miss&quot;&amp;#10;        curr_nback_RT = None&amp;#10;    # they didn't see a target and there was none: correct rejection&amp;#10;    elif previous_response == False and curr_target == False:&amp;#10;        curr_nback_response = &quot;correct rejection&quot;&amp;#10;        curr_nback_RT = None&amp;#10;    # they saw a target but there was none: false alarm&amp;#10;    elif previous_response and curr_target == False:&amp;#10;        curr_nback_response = &quot;false alarm&quot;&amp;#10;&amp;#10;    ### End of trial / current word display:&amp;#10;    &amp;#10;    ### save everything in output csv&amp;#10;    thisExp.addData('colour', curr_colour)&amp;#10;    thisExp.addData('target', curr_target)&amp;#10;    thisExp.addData('nback_response', curr_nback_response)&amp;#10;    thisExp.addData('nback_RT', curr_nback_RT) # in ms&amp;#10;    thisExp.addData('duration', curr_duration * 1000) # *1000 to convert s to ms&amp;#10;    thisExp.addData('text_nr', curr_text_nr)&amp;#10;    thisExp.addData('trial_nr', curr_trial_nr)&amp;#10;    thisExp.addData('block_cond', 'None')&amp;#10;    thisExp.addData('block_nr', exp_block_counter)&amp;#10;    thisExp.addData('block_name', 'visual_task')&amp;#10;    # careful, make sure quotes in the strings are escaped using a &amp;#10;    # quote (weird, I know) so it's properly saved in the CSV:&amp;#10;    thisExp.addData('word', escape_quotes(curr_word))&amp;#10;    &amp;#10;    # start a new row in the csv&amp;#10;    thisExp.nextEntry()&amp;#10;&amp;#10;    ### IF TESTING MODE ENABLED: end loop after 4 trials&amp;#10;    if expInfo['testing_mode'] == &quot;yes&quot;:&amp;#10;        if trial_idx == 3:&amp;#10;            break&amp;#10;    &amp;#10;    ### send word offset trigger to LSL stream   &amp;#10;    out_marker.push_sample([&quot;STIM_OFFSET_vistask&quot; + marker_text])&amp;#10;    &amp;#10;print(&quot;finished visual task block&quot;)&amp;#10;&amp;#10;# change background colour from grey to ivory&amp;#10;change_bg_colour(window = win, &amp;#10;                 start_rgb = dark_bg_col, &amp;#10;                 end_rgb = light_bg_col, &amp;#10;                 seconds = 2)&amp;#10;# Wait for a brief period of time so bg is set&amp;#10;core.wait(0.5)&amp;#10;&amp;#10;# keep background ivory&amp;#10;win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;win.flip()&amp;#10;        &amp;#10;# go to next block &amp;#10;exp_block_counter += 1&amp;#10;continueRoutine = False&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_vis_task" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="settings">
      <CodeComponent name="prep_functions">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="### import packages:&amp;#10;&amp;#10;# for setting the output encoding to UTF-8&amp;#10;import sys&amp;#10;# --&gt; if you don't do this, German &quot;Umlaute&quot; can't be displayed correctly:&amp;#10;sys.stdout = open(sys.stdout.fileno(), mode = 'w', encoding = 'utf8', buffering = 1)&amp;#10;# print Python environment psychopy is currently using&amp;#10;print(sys.executable)&amp;#10;&amp;#10;# for showing pictures&amp;#10;from psychopy import visual&amp;#10;&amp;#10;# for playing sounds:&amp;#10;import psychtoolbox as ptb&amp;#10;from psychopy import prefs&amp;#10;prefs.hardware['audioLib'] = ['ptb'] # set 'ptb', 'pyo' or'pygame' as sound library here&amp;#10;&amp;#10;# I use ptb here as a sound library because PTB is built to bring a number of advantages in &amp;#10;# terms of latency.&amp;#10;# PsychoPy docs on PTB's advantages: &quot;With the most aggressive low-latency settings you &amp;#10;# can get a sound to play in “immediate” mode with typically in the region of 5ms lag and &amp;#10;# maybe 1ms precision. That’s pretty good compared to the other options that have a lag of &amp;#10;# 20ms upwards and several ms variability. BUT, on top of that, PTB allows you to preschedule &amp;#10;# your sound to occur at a particular point in time (e.g. when the trigger is due to be &amp;#10;# sent or when the screen is due to flip) and the PTB engine will then prepare all the buffers &amp;#10;# ready to go and will also account for the known latencies in the card. With this method the &amp;#10;# PTB engine is capable of sub-ms precision and even sub-ms lag!&quot; &amp;#10;# --&gt; sounds good to me&amp;#10;# Psychopy uses &quot;aggressive exclusive mode&quot; as a default for the Latency Mode in PTB. &amp;#10;# This means your study will take control of the audio device you’re using and prioritise our use &amp;#10;# of the sound card over all others (e.g. other sound-playing apps like Spotify). &amp;#10;# This makes the latencies as low as possible.&amp;#10;from psychopy import sound&amp;#10;from psychopy.sound import Sound&amp;#10;print(Sound) # should look roughly like this: &lt;class 'psychopy.sound.SoundPtb'&gt;&amp;#10;&amp;#10;# for getting current date &amp; time:&amp;#10;import datetime&amp;#10;# numpy for being able to calculate&amp;#10;import numpy as np&amp;#10;# for random number generator:&amp;#10;import random&amp;#10;# for saving data in csv / working with pd data frames:&amp;#10;import pandas as pd&amp;#10;# additional timing package (I know we have core.wait, but I also want this one)&amp;#10;import time&amp;#10;&amp;#10;# pylsl for pushing triggers to lsl stream:&amp;#10;from pylsl import StreamInlet, resolve_stream, StreamOutlet, StreamInfo&amp;#10;# for connecting to serial ports:&amp;#10;import serial&amp;#10;&amp;#10;&amp;#10;# from my custom scripts...&amp;#10;# import all texts&amp;#10;from EXNAT2_texts_MC_Qs import *&amp;#10;# import some additional functions I wrote for the experiment:&amp;#10;from EXNAT2_study_components import change_bg_colour&amp;#10;from nback_colour_generator import create_nback_stimlist, draw_without_replacement, get_targets, create_0back_stimlist&amp;#10;&amp;#10;# load CSVs with tone sequences for prediction tendency task:&amp;#10;ordered_path = &quot;Prediction Tendency Task/df_ordered_seqs.csv&quot;&amp;#10;random_path = &quot;Prediction Tendency Task/df_random_seqs.csv&quot;&amp;#10;df_ordered_tone_seqs = pd.read_csv(ordered_path)&amp;#10;df_random_tone_seqs = pd.read_csv(random_path)&amp;#10;print(&quot;loaded CSVs with stimulus lists for prediction tendency task&quot;)&amp;#10;&amp;#10;# build little function to flatten nested lists:&amp;#10;def flatten_list(nested_list):&amp;#10;    flattened_list = []&amp;#10;    for item in nested_list:&amp;#10;        if isinstance(item, list):&amp;#10;            flattened_list.extend(flatten_list(item))&amp;#10;        else:&amp;#10;            flattened_list.append(item)&amp;#10;    return flattened_list&amp;#10;&amp;#10;# If I try to save strings containing escaped quotes in a csv file, &amp;#10;# the format gets completely messed up. So we need to escape all &amp;#10;# weird characters like quotes and backslashes with quotes (as odd as it sounds).&amp;#10;def escape_quotes(string):&amp;#10;    # escape quotes with quotes instead of backslashes&amp;#10;    return string.replace('&quot;', '&quot;&quot;')&amp;#10;&amp;#10;&amp;#10;### Setup LSL Stream&amp;#10;print(&quot;create trigger stream&quot;) &amp;#10;# Create trigger stream:&amp;#10;global out_marker&amp;#10;info_marker_stream = StreamInfo('PsychoPyMarkers', 'Marker', 1, 0, 'string')&amp;#10;out_marker = StreamOutlet(info_marker_stream)&amp;#10;out_marker.push_sample([&quot;TEST MARKER&quot;])&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="// function for drawing w/o replacement from list that is &amp;#10;// smaller than sample you want to draw&amp;#10;// --&gt; Idea: draw w/o replacement, start over again if you run out of &amp;#10;//           values, then shuffle your sample&amp;#10;// draw without replacement from list with sample size &gt; list&amp;#10;// start over again if no values left for drawing, shuffle everything in the end&amp;#10;var draw_without_replacement = function(sampling_list, sample_size) {&amp;#10;    // set variables&amp;#10;    var sampling_list, sample_size, rep_sampling_list, rep_times, value, times;&amp;#10;    // repeat colour_codes_list as often as needed&amp;#10;    rep_times = Math.floor((sample_size / sampling_list.length));&amp;#10;    rep_sampling_list = repeat.call(this, value = sampling_list, times = rep_times);&amp;#10;&amp;#10;    // check if we need some more values, if yes, draw some randomly &amp;#10;    // from colour_codes and append to our list&amp;#10;    if ((rep_sampling_list.length &lt; sample_size)) {&amp;#10;        var array1, array2, k;&amp;#10;        rep_sampling_list = extend.call(this, array1 = rep_sampling_list, array2 = random_sample.call(this, sampling_list, k = (sample_size - rep_sampling_list.length)));&amp;#10;    }&amp;#10;    // shuffle everything&amp;#10;    rep_sampling_list = random_shuffle.call(this, rep_sampling_list);&amp;#10;    return rep_sampling_list;&amp;#10;}&amp;#10;console.log(&quot;defined sample w/o replacement function&quot;);&amp;#10;&amp;#10;&amp;#10;// generate font color n-back stimulus list for given...&amp;#10;// ... n-back level (= nback_level)&amp;#10;// ... stimulus list (= colour_codes)&amp;#10;// ... words (= story)&amp;#10;// ... min. abs. number of targets (= target_abs_min)&amp;#10;// ... max. target to non-target ratio (= targets_max)&amp;#10;// ... min. target to non-target ratio (= targets_min)&amp;#10;// ﻿... zeroback target stimulus (zeroback_target = None)&amp;#10;&amp;#10;var create_nback_stimlist = function(nback_level, colour_codes, story, target_abs_min, targets_max, targets_min, zeroback_target = null) {&amp;#10;  console.log(&quot;create_nback_stimlist: set all variables for function&quot;);&amp;#10;  // set all variables I use in this script&amp;#10;  var nback_level, colour_codes, story, target_abs_min, targets_max, targets_min, zeroback_target,&amp;#10;  sampling_list, sample_size, rep_sampling_list, rep_times,&amp;#10;  change_prob_cutoff_lower, change_prob_cutoff_upper, change_prob_equal,&amp;#10;  chunk_missing, chunk_nr, chunk_size, colour_before, colour_codes_replacements,&amp;#10;  colourpairs_dict, curr_colour, curr_target, found_target_nr, idx_replacements,&amp;#10;  indices_targets, max_change_prob, max_target_prob, min_change_prob, min_target_prob,&amp;#10;  missing_chunk, not_this_colour, nr_replacements, pairs, random_colour_list, rep_colours,&amp;#10;  replacement_colour, start, target, target_colours, target_colours_equal, target_count,&amp;#10;  target_nr, target_prob_cutoff_lower, target_prob_cutoff_upper,&amp;#10;  targetcolours_dict, targets_percent;&amp;#10;&amp;#10;  // create pseudorandomized list of colour codes&amp;#10;  // idea: generate small random lists of colour codes with a balanced number of colours, then append them so I get an even distribution of colour codes &amp; even numbers of colour codes over the whole block&amp;#10;&amp;#10;  // chunk size should be number of distinct stimuli x 3, so there can't be more than 6x the same stimulus in a row if we concatenate 2 chunks&amp;#10;  chunk_size = colour_codes.length * 3;&amp;#10;  // given the chunk size and the number of stimuli we need, how many chunks do we need?&amp;#10;  chunk_nr = Number.parseInt(story.length / chunk_size);&amp;#10;  // check if there are still stimuli missing that we have to add at the end&amp;#10;  chunk_missing = story.length - chunk_size * chunk_nr;&amp;#10;  &amp;#10;  // placeholder for the colour list we want to create&amp;#10;  random_colour_list = [];&amp;#10;  &amp;#10;  // loop whole chunks, generate small stim list, append the lists&amp;#10;  for (var chunk = 0, _pj_a = chunk_nr; chunk &lt; _pj_a; chunk += 1) {&amp;#10;    rep_colours = draw_without_replacement.call(this, sampling_list = colour_codes, sample_size = chunk_size);&amp;#10;    random_colour_list = extend.call(this, random_colour_list, rep_colours);&amp;#10;  }&amp;#10;&amp;#10;  // if there are not enough values, randomly sample some and add them&amp;#10;  // to the end of the colour list&amp;#10;  if (chunk_missing &gt; 0) {&amp;#10;    missing_chunk = draw_without_replacement.call(this, sampling_list = colour_codes, sample_size = chunk_missing);&amp;#10;    random_colour_list = extend.call(this, random_colour_list, missing_chunk);&amp;#10;  }&amp;#10;&amp;#10;  // count how many targets there are (using the given n-back level)&amp;#10;  target =  [];&amp;#10;  &amp;#10;  // loop colour list, check if current value matches either a target stimulus (0-back) or the nth previous stimulus (1-back to 3-back)&amp;#10;  for (var colour_idx = 0, _pj_a = random_colour_list.length; colour_idx &lt; _pj_a; colour_idx += 1) {&amp;#10;    &amp;#10;    if (colour_idx &gt;= nback_level) {&amp;#10;      if (nback_level === 0) {&amp;#10;        curr_colour = random_colour_list[colour_idx];&amp;#10;        // 0-back: if the current colour is a target, save as true in curr_target&amp;#10;        curr_target = curr_colour === zeroback_target;&amp;#10;      } else {&amp;#10;        curr_colour = random_colour_list[colour_idx];&amp;#10;        colour_before = random_colour_list[colour_idx - nback_level];&amp;#10;        // 1-back to 3-back: if the current colour is a target, save as true in curr_target&amp;#10;        curr_target = curr_colour === colour_before;&amp;#10;      }&amp;#10;      // append curr_target to target list&amp;#10;      target = extend.call(this, target, curr_target);&amp;#10;    } else {&amp;#10;      // if it's not a target, save as false&amp;#10;      target = extend.call(this, target, false);&amp;#10;    }&amp;#10;  }&amp;#10;&amp;#10;  // count how many targets (aka true values) we have:&amp;#10;  var array, value;&amp;#10;  target_count = count.call(this, array = target, value = true);&amp;#10;&amp;#10;  // if we have more targets than min. target ratio and less than max. target ratio and at least the min target count, everything's fine&amp;#10;  if (target_count / target.length &gt;= targets_min &amp;&amp; target_count / target.length &lt;= targets_max &amp;&amp; target_count &gt;= target_abs_min) {&amp;#10;    target_nr = target_count;&amp;#10;  // if our target count is not in the correct range...&amp;#10;  } else {&amp;#10;    // if we don't have enough targets or too many targets...&amp;#10;    if (target_count / target.length &lt; targets_min || target_count / target.length &gt; targets_max || target_count &lt; target_abs_min) {&amp;#10;      found_target_nr = false;&amp;#10;      &amp;#10;      // randomly draw a target number to use for adding/taking away targets&amp;#10;      while (found_target_nr === false) {&amp;#10;        var min, max;&amp;#10;        targets_percent = uniform.call(this, min = targets_min, max = targets_max);&amp;#10;        target_nr = Math.floor(story.length * targets_percent);&amp;#10;        if (target_nr &gt;= target_abs_min) {&amp;#10;          found_target_nr = true;&amp;#10;        }&amp;#10;      }&amp;#10;      // if there are targets missing:&amp;#10;      if (target_count - target_nr &lt; 0) {&amp;#10;        nr_replacements = Number.parseInt(abs(target_count - target_nr));&amp;#10;        indices_targets = [];&amp;#10;        // get indices of random false values in target list&amp;#10;        for (var t = 0, _pj_a = target.length; t &lt; _pj_a; t += 1) {&amp;#10;          if (target[t] === false) {&amp;#10;            indices_targets = extend.call(this, indices_targets, t);&amp;#10;          }&amp;#10;        }&amp;#10;        // if it's a 0-back task, you can start adding targets at the first position of the colour list&amp;#10;        if (nback_level === 0) {&amp;#10;          start = 0;&amp;#10;        // if it's at least a 1-back, we have to move a few elements down the list to be able to start comparing to predecessors&amp;#10;        } else {&amp;#10;          start = nback_level - 1;&amp;#10;        }&amp;#10;        var k;&amp;#10;        idx_replacements = random_sample.call(this, indices_targets.slice(start, indices_targets.length), k =  nr_replacements);&amp;#10;        &amp;#10;        // start replacing non-targets by targets by replacing them either by a target colour or the colour n trials before&amp;#10;        for (var replace_this_colour, _pj_c = 0, _pj_a = idx_replacements, _pj_b = _pj_a.length; _pj_c &lt; _pj_b; _pj_c += 1) {&amp;#10;          replace_this_colour = _pj_a[_pj_c];&amp;#10;          // 0-back: replace non-target by target colour&amp;#10;          if (nback_level === 0) {&amp;#10;            replacement_colour = zeroback_target;&amp;#10;          // 1-back to 3-back: replace by colour from n trials before&amp;#10;          } else {&amp;#10;            replacement_colour = random_colour_list[replace_this_colour - nback_level];&amp;#10;          }&amp;#10;          random_colour_list[replace_this_colour] = replacement_colour;&amp;#10;          // change non-target to target in target counter list&amp;#10;          target[replace_this_colour] = true;&amp;#10;        }&amp;#10;&amp;#10;      // too many targets, get rid of some&amp;#10;      } else {&amp;#10;        if (target_count - target_nr &gt; 0) {&amp;#10;          nr_replacements = Number.parseInt(abs(target_count - target_nr));&amp;#10;          indices_targets = [];&amp;#10;          &amp;#10;          // find indices of targets&amp;#10;          for (var t = 0, _pj_a = target.length; t &lt; _pj_a; t += 1) {&amp;#10;            if (target[t] === true) {&amp;#10;              indices_targets = extend.call(this, indices_targets, t);&amp;#10;            }&amp;#10;          }&amp;#10;          // get random indices of targets (as many as we need to replace)&amp;#10;          idx_replacements = random_sample.call(this, indices_targets, k = nr_replacements);&amp;#10;          &amp;#10;          // replace target by non-target colour (aka colour that doesn't match target colour for 0-back or target colour from n trials before (for 1-back to 3-back))&amp;#10;          for (var replace_this_colour, _pj_c = 0, _pj_a = idx_replacements, _pj_b = _pj_a.length; _pj_c &lt; _pj_b; _pj_c += 1) {&amp;#10;            replace_this_colour = _pj_a[_pj_c];&amp;#10;            if (random_colour_list.length - 1 &gt;= replace_this_colour + nback_level) {&amp;#10;              if (nback_level === 0) {&amp;#10;                not_this_colour = zeroback_target;&amp;#10;              } else {&amp;#10;                not_this_colour = random_colour_list[replace_this_colour + nback_level];&amp;#10;              }&amp;#10;              colour_codes_replacements = colour_codes.copy();&amp;#10;              colour_codes_replacements.remove(not_this_colour);&amp;#10;              replacement_colour = random_sample.call(this, colour_codes_replacements, k = 1)[0];&amp;#10;            } else {&amp;#10;              replacement_colour = random_sample.call(this, colour_codes, k = 1)[0];&amp;#10;            }&amp;#10;            random_colour_list[replace_this_colour] = replacement_colour;&amp;#10;            target[replace_this_colour] = false;&amp;#10;          }&amp;#10;        }&amp;#10;      }&amp;#10;    }&amp;#10;  }&amp;#10;  // now check if colour transition probabilities are more or less evenly distributed&amp;#10;  var _pj;&amp;#10;  var change_prob_cutoff_lower, change_prob_cutoff_upper, change_prob_equal, curr_colour, idx_pair, idx_target_colour, max_change_prob, max_target_prob, min_change_prob, min_target_prob, pairs, pairs_counter, target_colour, target_colours, target_colours_counter, target_colours_equal, target_prob_cutoff_lower, target_prob_cutoff_upper;&amp;#10;  function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;      if (right instanceof Array || typeof right === &quot;string&quot;) {&amp;#10;        return right.indexOf(left) &gt; -1;&amp;#10;      } else {&amp;#10;        if (right instanceof Map || right instanceof Set || right instanceof WeakMap || right instanceof WeakSet) {&amp;#10;          return right.has(left);&amp;#10;        } else {&amp;#10;          return left in right;&amp;#10;        }&amp;#10;      }&amp;#10;    }&amp;#10;&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;  }&amp;#10;&amp;#10;  _pj = {};&amp;#10;&amp;#10;  _pj_snippets(_pj);&amp;#10;&amp;#10;  pairs = [];&amp;#10;  pairs_counter = [];&amp;#10;&amp;#10;  for (var idx = 0, _pj_a = random_colour_list.length - 1; idx &lt; _pj_a; idx += 1) {&amp;#10;    curr_colour = random_colour_list[idx] + &quot; -&gt; &quot; + random_colour_list[idx + 1];&amp;#10;&amp;#10;    if (_pj.in_es6(curr_colour, pairs)) {&amp;#10;      idx_pair = pairs.index(curr_colour);&amp;#10;      pairs_counter[idx_pair] += 1;&amp;#10;    } else {&amp;#10;      extend.call(this, pairs, curr_colour);&amp;#10;      extend.call(this, pairs_counter, 1);&amp;#10;    }&amp;#10;  }&amp;#10;&amp;#10;  change_prob_cutoff_lower = mean(pairs_counter) - 2 * std(pairs_counter);&amp;#10;  change_prob_cutoff_upper = mean(pairs_counter) + 2 * std(pairs_counter);&amp;#10;  min_change_prob = minimum(pairs_counter);&amp;#10;  max_change_prob = maximum(pairs_counter);&amp;#10;&amp;#10;  if (min_change_prob &lt; change_prob_cutoff_lower || max_change_prob &gt; change_prob_cutoff_upper) {&amp;#10;    change_prob_equal = false;&amp;#10;  } else {&amp;#10;    change_prob_equal = true;&amp;#10;  }&amp;#10;&amp;#10;  target_colours = [];&amp;#10;  target_colours_counter = [];&amp;#10;&amp;#10;  for (var t = 0, _pj_a = target.length; t &lt; _pj_a; t += 1) {&amp;#10;    if (target[t] === true) {&amp;#10;      target_colour = random_colour_list[t];&amp;#10;    }&amp;#10;&amp;#10;    if (_pj.in_es6(target_colour, target_colours)) {&amp;#10;      idx_target_colour = target_colours.index(target_colour);&amp;#10;      target_colours_counter[idx_target_colour] += 1;&amp;#10;    } else {&amp;#10;      extend.call(this, target_colours, target_colour);&amp;#10;      extend.call(this, target_colours_counter, 1);&amp;#10;    }&amp;#10;  }&amp;#10;&amp;#10;  target_prob_cutoff_lower = mean(target_colours_counter) - 2 * std(target_colours_counter);&amp;#10;  target_prob_cutoff_upper = mean(target_colours_counter) + 2 * std(target_colours_counter);&amp;#10;  min_target_prob = minimum(target_colours_counter);&amp;#10;  max_target_prob = maximum(target_colours_counter);&amp;#10;&amp;#10;  if (min_target_prob &lt; target_prob_cutoff_lower || max_target_prob &gt; target_prob_cutoff_upper) {&amp;#10;    target_colours_equal = false;&amp;#10;  } else {&amp;#10;    target_colours_equal = true;&amp;#10;  }&amp;#10;&amp;#10;  // if everything's fine...&amp;#10;  if (target_colours_equal &amp;&amp; change_prob_equal) {&amp;#10;    // return colour list&amp;#10;    return random_colour_list;&amp;#10;  // if change probabilities or distribution of target colours is not balanced...&amp;#10;  } else {&amp;#10;    // recursion: generate new colour list&amp;#10;    return create_nback_stimlist(nback_level, colour_codes, story, target_abs_min, targets_max, targets_min, zeroback_target);&amp;#10;  }&amp;#10;}&amp;#10;console.log(&quot;defined nback generator function&quot;);" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="prep_functions" valType="code"/>
      </CodeComponent>
      <CodeComponent name="set_stimuli">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="### Stimulus settings&amp;#10;&amp;#10;# set flicker frequency (in Hz)&amp;#10;flicker_freq = 17.3&amp;#10;# set frame rate (in Hz)&amp;#10;frame_rate = 60&amp;#10;&amp;#10;# set colours you want to use for background:&amp;#10;#light_bg_col_hex = &quot;#FDFBF0&quot; # ivory instructions background&amp;#10;#dark_bg_col_hex  = &quot;#505050&quot; # dark grey background for stimuli&amp;#10;light_bg_col = [(x / 127.5) - 1 for x in (253, 251, 240)] # ivory instructions background (use RGB -1:1)&amp;#10;dark_bg_col  = [(x / 127.5) - 1 for x in (80, 80, 80)] # dark grey background for stimuli (use RGB -1:1)&amp;#10;&amp;#10;# make background light for a start - use rgb -1:1 colour codes&amp;#10;win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;&amp;#10;# set colours you want to use for the stimuli:&amp;#10;colours = [&quot;#D292F3&quot;, &quot;#F989A2&quot;, &quot;#2AB7EF&quot;, &quot;#88BA3F&quot;]&amp;#10;print(&quot;Preparing experiment with n-back colours:&quot;, colours)&amp;#10;&amp;#10;#  #D292F3 = weird lilac with a 2000s vibe&amp;#10;#  #F989A2 = bubblegum pink&amp;#10;#  #2AB7EF = Twitter blue&amp;#10;#  #88BA3F = medium grass green&amp;#10;# (#D8A244 = dark curry-ish yellow --&gt; excluded!)&amp;#10;&amp;#10;#   All colours have a luminance of 70 and a chroma of 74.&amp;#10;&amp;#10;#   The colours are selected for distinguishability (is that a word?!) &amp;#10;#   for people with &quot;normal&quot; colour vision as well as for &amp;#10;#   people with protanomaly (red olour vision deficiency (CVD)), &amp;#10;#   deuteranomaly (green CVD) and &amp;#10;#   tritanomaly (blue CVD).&amp;#10;&amp;#10;#   People with a &quot;true&quot; colour blindness &amp;#10;#   (i.e. protanopia, deuteranopia, tritanopia)&amp;#10;#   shouldn't participate in this study. */&amp;#10;&amp;#10;&amp;#10;# ----------------------------------------------&amp;#10;### Shuffle order of texts&amp;#10;print(&quot;shuffle texts&quot;) &amp;#10;# collect the text IDs in lists so I know which text was shown &amp;#10;all_main_texts_nrs_list = [&quot;text_01&quot;, &quot;text_02&quot;, &quot;text_03&quot;, &quot;text_04&quot;, &quot;text_05&quot;, &quot;text_06&quot;, &quot;text_07&quot;, &quot;text_08&quot;, &quot;text_09&quot;]&amp;#10;# shuffle text numbers&amp;#10;random.shuffle(all_main_texts_nrs_list)&amp;#10;# append &quot;empty&quot; text numbers to the list where we have blocks that are not main blocks.&amp;#10;all_texts_nrs_list = []&amp;#10;for t_idx, t in enumerate(all_main_texts_nrs_list):&amp;#10;    # if it's the first text, it's the reading BL main block.&amp;#10;    # Append 1 empty text number before text (for the reading BL training) &amp;#10;    # and 4 after text (for click training, 2x single task training &amp; 1x single task main)&amp;#10;    if t_idx == 0: &amp;#10;        all_texts_nrs_list = all_texts_nrs_list + [&quot;&quot;, t, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;]&amp;#10;    # the second text is the first n-back block. &amp;#10;    # There are 3 &quot;empty&quot; blocks after it (2x single task training &amp; 1x single task main)&amp;#10;    elif t_idx == 1: &amp;#10;        all_texts_nrs_list = all_texts_nrs_list + [t, &quot;&quot;, &quot;&quot;, &quot;&quot;]&amp;#10;    # all following texts are main blocks and can be appended to all_texts_nrs_list&amp;#10;    elif t_idx &gt; 1:&amp;#10;        all_texts_nrs_list.append(t)&amp;#10;        &amp;#10;print(all_texts_nrs_list)&amp;#10;&amp;#10;### Set order of blocks &amp;#10;print(&quot;set block order&quot;) &amp;#10;# The first blocks should be:&amp;#10;# - reading baseline + training&amp;#10;# - click training&amp;#10;# - in random order: 1-back (2x single task training &amp; 1x main &amp; 1x dual task main) &amp; 2-back (2x single task training &amp; 1x main &amp; 1x dual task main)&amp;#10;# - in random order: 2x reading BL main, 2x 1-back main, 2x 2-back main&amp;#10;&amp;#10;# this always comes first in the experiment&amp;#10;Reading_BL = [&quot;Reading_Baseline_training&quot;, &quot;Reading_Baseline_main&quot;, &quot;click_training&quot;]&amp;#10;&amp;#10;# then you get both n-back conditions with trainings (which of them is first is randomized)&amp;#10;oneback = [&quot;1back_single_training1&quot;, &quot;1back_single_training2&quot;, &quot;1back_single_main&quot;, &quot;1back_dual_main&quot;]&amp;#10;twoback = [&quot;2back_single_training1&quot;, &quot;2back_single_training2&quot;, &quot;2back_single_main&quot;, &quot;2back_dual_main&quot;]&amp;#10;&amp;#10;# shuffle the order of the 2 lists&amp;#10;main_blocks1 = [oneback, twoback]&amp;#10;random.shuffle(main_blocks1)&amp;#10;&amp;#10;# flatten nested list&amp;#10;main_blocks1 = flatten_list(main_blocks1)&amp;#10;&amp;#10;# now shuffle order of the last 6 main blocks:&amp;#10;main_blocks2 = [&quot;Reading_Baseline_main&quot;, &quot;Reading_Baseline_main&quot;, &quot;1back_dual_main&quot;, &amp;#10;                &quot;1back_dual_main&quot;, &quot;2back_dual_main&quot;, &quot;2back_dual_main&quot;]&amp;#10;random.shuffle(main_blocks2)&amp;#10;&amp;#10;# put them all together:&amp;#10;#global all_blocks &amp;#10;all_blocks = Reading_BL + main_blocks1 + main_blocks2&amp;#10;print(all_blocks)&amp;#10;### Create n-back colour lists for all blocks&amp;#10;&amp;#10;print(&quot;create n-back colour lists&quot;)&amp;#10;# The reading bl training text has 159 trials.&amp;#10;&amp;#10;# The click training has 6 trials. &amp;#10;&amp;#10;# Then we also have 4 short training blocks à 20 trials each (5 targets)&amp;#10;# 4 * single training&amp;#10;&amp;#10;# We have 2 single-task main blocks, &amp;#10;# one for 1-back and 1 for 2-back à 60 trials each (10 targets):&amp;#10;# 2 * single main&amp;#10;&amp;#10;# There are 9 dual-task main blocks à 300 stimuli each (50 targets)&amp;#10;# reading bl * 3&amp;#10;# 1-back * 3&amp;#10;# 2-back * 3&amp;#10;&amp;#10;# --&gt; all in all, 15 blocks&amp;#10;&amp;#10;# So for every block, build a list with colour codes containing the right amount of targets.&amp;#10;# The function is defined in another script bc it's super long, &amp;#10;# I import it at the beginning of this script.&amp;#10;&amp;#10;# First, create list with length of all texts. The length of the blocks is &amp;#10;# always in the same order, only the conditions change.&amp;#10;blocks_textlen = [159, 300, 6, # reading bl blocks + click training&amp;#10;                  20, 20, 60, 300, 20, 20, 60, 300, # main blocks 1 + trainings &amp; single tasks&amp;#10;                  300, 300, 300, 300, 300, 300] # main blocks 2        &amp;#10;blocks_target_counts = [25, 50, 1, # reading bl blocks + click training&amp;#10;                        5, 5, 10, 50, 5, 5, 10, 50, # main blocks 1 + trainings &amp; single tasks&amp;#10;                        50, 50, 50, 50, 50, 50]&amp;#10;# Now loop this list. Check which condition we have there and the create colour list for each text.&amp;#10;all_colour_lists = []&amp;#10;all_target_lists = []&amp;#10;for block_idx, block_length in enumerate(blocks_textlen):&amp;#10;    # get 1st letter of block name - that tells us the condition&amp;#10;    block_cond = all_blocks[block_idx][0]&amp;#10;&amp;#10;    # for each condition, decide which n-back level we want to assign&amp;#10;    # For all no-n-back blocks, we use 1 (just for the colour list generation)&amp;#10;    #global curr_nback_level&amp;#10;    if block_cond == &quot;R&quot;:&amp;#10;        curr_nback_level = 1&amp;#10;    elif block_cond == &quot;c&quot;:&amp;#10;        curr_nback_level = 1&amp;#10;    elif block_cond == &quot;1&quot;:&amp;#10;        curr_nback_level = 1&amp;#10;    else: curr_nback_level = 2&amp;#10;&amp;#10;    # generate colour list for current block  &amp;#10;    #global curr_colours&amp;#10;    curr_colours = create_nback_stimlist(nback_level = curr_nback_level, &amp;#10;                                         colour_codes = colours, &amp;#10;                                         story = [&quot;x&quot;] * block_length, &amp;#10;                                         target_abs_min = blocks_target_counts[block_idx], &amp;#10;                                         target_abs_max = blocks_target_counts[block_idx], &amp;#10;                                         zeroback_target = None)&amp;#10;&amp;#10;    # get list of targets / non-targets&amp;#10;    curr_targets = get_targets(stim_list = curr_colours, &amp;#10;                               nback_level = curr_nback_level)&amp;#10;&amp;#10;    # add to bigger lists&amp;#10;    all_colour_lists.append(curr_colours)&amp;#10;    all_target_lists.append(curr_targets)&amp;#10;&amp;#10;print(&quot;------ finished preparing stimuli! ------&quot;)&amp;#10;&amp;#10;&amp;#10;# ------------------------------------------&amp;#10;&amp;#10;# init block counter for the whole experiment&amp;#10;exp_block_counter = 0&amp;#10;&amp;#10;print(&quot;starting experiment now!&quot;)" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="// Prepare lists with words &amp; additional information on the blocks&amp;#10;console.log(&quot;start preparing stimuli&quot;);&amp;#10;&amp;#10;// SET TEXTS&amp;#10;// set short texts for training blocks&amp;#10;// --&gt; select which ones to use later&amp;#10;var t1_01 = [&quot;Zwanzig&quot;, &quot;Jahre&quot;, &quot;verbrachte&quot;, &quot;Ernest&quot;, &quot;Hemingway&quot;, &quot;auf&quot;, &quot;Kuba.&quot;, &quot;Die&quot;, &quot;meiste&quot;, &quot;Zeit&quot;, &quot;davon&quot;, &quot;lebte&quot;, &quot;er&quot;, &quot;in&quot;, &quot;Vigía,&quot;, &quot;seinem&quot;, &quot;legendären&quot;, &quot;Haus&quot;, &quot;vor&quot;, &quot;den&quot;, &quot;Toren&quot;, &quot;Havannas.&quot;, &quot;Seit&quot;, &quot;seinem&quot;, &quot;Tod&quot;, &quot;Anfang&quot;, &quot;der&quot;, &quot;1960er&quot;, &quot;lagern&quot;, &quot;in&quot;, &quot;Vigía&quot;, &quot;etwa&quot;, &quot;3000&quot;, &quot;Manuskripte&quot;, &quot;des&quot;, &quot;Autors.&quot;, &quot;In&quot;, &quot;den&quot;, &quot;vergangenen&quot;, &quot;Jahren&quot;, &quot;sind&quot;, &quot;sie&quot;, &quot;nach&quot;, &quot;und&quot;, &quot;nach&quot;, &quot;digitalisiert&quot;, &quot;worden.&quot;, &quot;Nun&quot;, &quot;will&quot;, &quot;man&quot;, &quot;sie&quot;, &quot;zunächst&quot;, &quot;in&quot;, &quot;Kuba&quot;, &quot;zeigen,&quot;, &quot;bevor&quot;, &quot;sie&quot;, &quot;dann&quot;, &quot;der&quot;, &quot;Bibliothek&quot;, &quot;von&quot;, &quot;Boston&quot;, &quot;übergeben&quot;, &quot;werden.&quot;, &quot;Die&quot;, &quot;Leiterin&quot;, &quot;des&quot;, &quot;Archivs&quot;, &quot;in&quot;, &quot;Vigía&quot;, &quot;sagte&quot;, &quot;am&quot;, &quot;Montag&quot;, &quot;im&quot;, &quot;kubanischen&quot;, &quot;Fernsehen,&quot;, &quot;es&quot;, &quot;handele&quot;, &quot;sich&quot;, &quot;um&quot;, &quot;bisher&quot;, &quot;unveröffentlichte&quot;, &quot;Stücke.&quot;, &quot;Die&quot;, &quot;Digitalisierung&quot;, &quot;war&quot;, &quot;zwischen&quot;, &quot;den&quot;, &quot;USA&quot;, &quot;und&quot;, &quot;Kuba&quot;, &quot;bereits&quot;, &quot;2002&quot;, &quot;vereinbart&quot;, &quot;worden.&quot;, &quot;Damals&quot;, &quot;berichtete&quot;, &quot;die&quot;, &quot;\&quot;New&quot;, &quot;York&quot;, &quot;Times\&quot;,&quot;, &quot;unter&quot;, &quot;den&quot;, &quot;Dokumenten&quot;, &quot;befänden&quot;, &quot;sich&quot;, &quot;Texte,&quot;, &quot;die&quot;, &quot;auf&quot;, &quot;lose&quot;, &quot;Blätter&quot;, &quot;und&quot;, &quot;Buchrücken&quot;, &quot;gekritzelt&quot;, &quot;worden&quot;, &quot;seien.&quot;, &quot;Dies&quot;, &quot;seien&quot;, &quot;vor&quot;, &quot;allem&quot;, &quot;Briefe,&quot;, &quot;Entwürfe&quot;, &quot;und&quot;, &quot;Aufzeichnungen&quot;, &quot;zu&quot;, &quot;Hemingways&quot;, &quot;großen&quot;, &quot;Romanen.&quot;, &quot;Der&quot;, &quot;Biograf&quot;, &quot;Hemingways&quot;, &quot;nannte&quot;, &quot;den&quot;, &quot;gesamten&quot;, &quot;Nachlass&quot;, &quot;eine&quot;, &quot;\&quot;Computertomografie&quot;, &quot;von&quot;, &quot;Hemingways&quot;, &quot;Gehirn\&quot;.&quot;, &quot;In&quot;, &quot;Kuba&quot;, &quot;schrieb&quot;, &quot;Hemingway&quot;, &quot;unter&quot;, &quot;anderem&quot;, &quot;seine&quot;, &quot;berühmte&quot;, &quot;Novelle&quot;, &quot;\&quot;Der&quot;, &quot;alte&quot;, &quot;Mann&quot;, &quot;und&quot;, &quot;das&quot;, &quot;Meer\&quot;.&quot;, &quot;Inspiriert&quot;, &quot;wurde&quot;, &quot;er&quot;, &quot;dabei&quot;, &quot;von&quot;, &quot;dem&quot;, &quot;Fischer&quot;, &quot;Gregorio&quot;, &quot;Fuentes.&quot;, &quot;Für&quot;, &quot;sein&quot;, &quot;Werk&quot;, &quot;wurde&quot;, &quot;Hemingway&quot;, &quot;mit&quot;, &quot;dem&quot;, &quot;Literaturnobelpreis&quot;, &quot;ausgezeichnet.&quot;, &quot;Die&quot;, &quot;Nobelpreis-Medaille&quot;, &quot;schenkte&quot;, &quot;er&quot;, &quot;aus&quot;, &quot;Verbundenheit&quot;, &quot;zu&quot;, &quot;Kuba&quot;, &quot;der&quot;, &quot;Wallfahrtskirche&quot;, &quot;der&quot;, &quot;barmherzigen&quot;, &quot;Jungfrau&quot;, &quot;von&quot;, &quot;Cobre.&quot;, &quot;Sie&quot;, &quot;ist&quot;, &quot;die&quot;, &quot;Schutzpatronin&quot;, &quot;Kubas.&quot;, &quot;Die&quot;, &quot;Medaille&quot;, &quot;ist&quot;, &quot;auch&quot;, &quot;heute&quot;, &quot;noch&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Kirche&quot;, &quot;zu&quot;, &quot;sehen.&quot;];&amp;#10;var t1_02 = [&quot;Das&quot;, &quot;Bügeleisen&quot;, &quot;dampft,&quot;, &quot;im&quot;, &quot;Fernsehen&quot;, &quot;ist&quot;, &quot;die&quot;, &quot;Karibik&quot;, &quot;zu&quot;, &quot;sehen,&quot;, &quot;und&quot;, &quot;draußen&quot;, &quot;ist&quot;, &quot;alles&quot;, &quot;nur&quot;, &quot;Grau.&quot;, &quot;Robs&quot;, &quot;drückt&quot;, &quot;sich&quot;, &quot;die&quot;, &quot;Nase&quot;, &quot;am&quot;, &quot;Fenster&quot;, &quot;platt,&quot;, &quot;ihm&quot;, &quot;ist&quot;, &quot;viel&quot;, &quot;zu&quot;, &quot;warm.&quot;, &quot;Wo&quot;, &quot;ist&quot;, &quot;eigentlich&quot;, &quot;der&quot;, &quot;Schnee?&quot;, &quot;Winter&quot;, &quot;ist&quot;, &quot;in&quot;, &quot;Deutschland&quot;, &quot;keine&quot;, &quot;Jahreszeit&quot;, &quot;mehr&quot;, &quot;für&quot;, &quot;Kinder.&quot;, &quot;Schneeballschlacht&quot;, &quot;und&quot;, &quot;Schlittenfahren&quot;, &quot;gibt&quot;, &quot;es&quot;, &quot;eigentlich&quot;, &quot;nur&quot;, &quot;noch&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Erinnerung.&quot;, &quot;Wie&quot;, &quot;die&quot;, &quot;meisten&quot;, &quot;guten&quot;, &quot;Kinderbücher&quot;, &quot;beginnt&quot;, &quot;auch&quot;, &quot;die&quot;, &quot;Geschichte&quot;, &quot;von&quot;, &quot;Robs&quot;, &quot;und&quot;, &quot;dem&quot;, &quot;Inuit-Mädchen&quot;, &quot;mit&quot;, &quot;einer&quot;, &quot;Sehnsucht.&quot;, &quot;“Das&quot;, &quot;Land&quot;, &quot;der&quot;, &quot;Menschen”&quot;, &quot;heißt&quot;, &quot;das&quot;, &quot;Buch.&quot;, &quot;Geschrieben&quot;, &quot;wurde&quot;, &quot;es&quot;, &quot;von&quot;, &quot;Juli&quot;, &quot;Zeh.&quot;, &quot;Nun&quot;, &quot;muss&quot;, &quot;es&quot;, &quot;kein&quot;, &quot;achtjähriges&quot;, &quot;Kind&quot;, &quot;interessieren,&quot;, &quot;dass&quot;, &quot;Juli&quot;, &quot;Zeh&quot;, &quot;mit&quot;, &quot;einem&quot;, &quot;illusionslosen&quot;, &quot;Roman&quot;, &quot;berühmt&quot;, &quot;wurde,&quot;, &quot;dass&quot;, &quot;sie&quot;, &quot;immer&quot;, &quot;wieder&quot;, &quot;mit&quot;, &quot;politischen&quot;, &quot;Essays&quot;, &quot;auf&quot;, &quot;sich&quot;, &quot;aufmerksam&quot;, &quot;macht&quot;, &quot;und&quot;, &quot;nebenbei&quot;, &quot;noch&quot;, &quot;als&quot;, &quot;Juristin&quot;, &quot;arbeitet.&quot;, &quot;Aber&quot;, &quot;für&quot;, &quot;die&quot;, &quot;Eltern,&quot;, &quot;die&quot;, &quot;ihr&quot;, &quot;neues&quot;, &quot;Kinderbuch&quot;, &quot;vielleicht&quot;, &quot;vorlesen,&quot;, &quot;ist&quot;, &quot;es&quot;, &quot;reizvoll,&quot;, &quot;das&quot;, &quot;im&quot;, &quot;Kopf&quot;, &quot;zu&quot;, &quot;haben.&quot;, &quot;Tagsüber&quot;, &quot;träumt&quot;, &quot;Robs&quot;, &quot;davon,&quot;, &quot;in&quot;, &quot;einem&quot;, &quot;Bett&quot;, &quot;aus&quot;, &quot;Schnee&quot;, &quot;zu&quot;, &quot;schlafen.&quot;, &quot;Doch&quot;, &quot;eines&quot;, &quot;Nachts&quot;, &quot;flüstert&quot;, &quot;ihm&quot;, &quot;ein&quot;, &quot;weinendes&quot;, &quot;Inuit-Mädchen&quot;, &quot;zu:&quot;, &quot;“Eine&quot;, &quot;Katastrophe,&quot;, &quot;du&quot;, &quot;musst&quot;, &quot;mir&quot;, &quot;helfen”.&quot;, &quot;Am&quot;, &quot;nächsten&quot;, &quot;Tag&quot;, &quot;beschließt&quot;, &quot;Robs,&quot;, &quot;Reißaus&quot;, &quot;zu&quot;, &quot;nehmen&quot;, &quot;und&quot;, &quot;nicht&quot;, &quot;zur&quot;, &quot;Schule&quot;, &quot;zu&quot;, &quot;gehen,&quot;, &quot;sondern&quot;, &quot;sich&quot;, &quot;auf&quot;, &quot;die&quot;, &quot;Suche&quot;, &quot;zu&quot;, &quot;machen.&quot;, &quot;Wonach&quot;, &quot;er&quot;, &quot;suchen&quot;, &quot;soll,&quot;, &quot;weiß&quot;, &quot;er&quot;, &quot;nicht&quot;, &quot;so&quot;, &quot;genau.&quot;, &quot;Es&quot;, &quot;ist&quot;, &quot;wohl&quot;, &quot;der&quot;, &quot;Wunsch&quot;, &quot;nach&quot;, &quot;Schnee&quot;, &quot;und&quot;, &quot;Kälte,&quot;, &quot;der&quot;, &quot;ihn&quot;, &quot;treibt.&quot;, &quot;Später&quot;, &quot;wird&quot;, &quot;ihm&quot;, &quot;das&quot;, &quot;Mädchen&quot;, &quot;erklären,&quot;, &quot;dass&quot;, &quot;es&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Seele&quot;, &quot;vieler&quot;, &quot;Menschen&quot;, &quot;eine&quot;, &quot;leise&quot;, &quot;Stimme&quot;, &quot;gibt,&quot;, &quot;die&quot;, &quot;vom&quot;, &quot;Winter&quot;, &quot;erzählt,&quot;, &quot;weil&quot;, &quot;das&quot;, &quot;Eis&quot;, &quot;vor&quot;, &quot;langer&quot;, &quot;Zeit&quot;, &quot;auf&quot;, &quot;der&quot;, &quot;Erde&quot;, &quot;viel&quot;, &quot;weiter&quot;, &quot;ins&quot;, &quot;Land&quot;, &quot;reichte&quot;, &quot;als&quot;, &quot;heute.&quot;, &quot;“Im&quot;, &quot;Herzen&quot;, &quot;tragen&quot;, &quot;die&quot;, &quot;Menschen&quot;, &quot;einen&quot;, &quot;winzigen&quot;, &quot;Klumpen&quot;, &quot;vom&quot;, &quot;ewigen&quot;, &quot;Eis.&quot;, &quot;Deshalb&quot;, &quot;verspüren&quot;, &quot;sie&quot;, &quot;eine&quot;, &quot;Sehnsucht&quot;, &quot;nach&quot;, &quot;dem&quot;, &quot;Weiß,&quot;, &quot;nach&quot;, &quot;Sauberkeit&quot;, &quot;und&quot;, &quot;Stille.&quot;, &quot;Niemand&quot;, &quot;versteht&quot;, &quot;diese&quot;, &quot;Sehnsucht,&quot;, &quot;aber&quot;, &quot;alle&quot;, &quot;kennen&quot;, &quot;sie.&quot;, &quot;In&quot;, &quot;jedem&quot;, &quot;Jahr&quot;, &quot;muss&quot;, &quot;es&quot;, &quot;Winter&quot;, &quot;werden,&quot;, &quot;damit&quot;, &quot;das&quot;, &quot;Stück&quot;, &quot;Erinnerung&quot;, &quot;zum&quot;, &quot;Leben&quot;, &quot;erwacht&quot;, &quot;und&quot;, &quot;die&quot;, &quot;Menschen&quot;, &quot;glücklich&quot;, &quot;sind.&quot;, &quot;Sie&quot;, &quot;brauchen&quot;, &quot;den&quot;, &quot;Winter”.&quot;, &quot;Zu&quot;, &quot;der&quot;, &quot;Geschichte&quot;, &quot;vom&quot;, &quot;Wintermädchen&quot;, &quot;hat&quot;, &quot;Wolfgang&quot;, &quot;Nocke&quot;, &quot;Bilder&quot;, &quot;gemalt,&quot;, &quot;die&quot;, &quot;in&quot;, &quot;glühenden&quot;, &quot;Farben&quot;, &quot;von&quot;, &quot;der&quot;, &quot;Freude&quot;, &quot;an&quot;, &quot;Schnee&quot;, &quot;und&quot;, &quot;Eis&quot;, &quot;erzählen.&quot;, &quot;Die&quot;, &quot;Schriftstellerin&quot;, &quot;Juli&quot;, &quot;Zeh&quot;, &quot;scheint&quot;, &quot;eine&quot;, &quot;große&quot;, &quot;Verehrerin&quot;, &quot;der&quot;, &quot;kühlen,&quot;, &quot;klaren&quot;, &quot;Jahreszeit&quot;, &quot;zu&quot;, &quot;sein.&quot;, &quot;Und&quot;, &quot;wenn&quot;, &quot;man&quot;, &quot;ihre&quot;, &quot;anderen&quot;, &quot;Werke&quot;, &quot;im&quot;, &quot;Kopf&quot;, &quot;hat,&quot;, &quot;ihre&quot;, &quot;präzisen&quot;, &quot;Betrachtungen&quot;, &quot;des&quot;, &quot;Lebens,&quot;, &quot;ist&quot;, &quot;das&quot;, &quot;nicht&quot;, &quot;verwunderlich.&quot;];&amp;#10;var t1_03 = [&quot;Die&quot;, &quot;Namen&quot;, &quot;klingen&quot;, &quot;ähnlich.&quot;, &quot;Und&quot;, &quot;die&quot;, &quot;Wohnorte&quot;, &quot;lagen&quot;, &quot;nur&quot;, &quot;30&quot;, &quot;Kilometer&quot;, &quot;von&quot;, &quot;einander&quot;, &quot;entfernt.&quot;, &quot;William&quot;, &quot;Shakespeare&quot;, &quot;war&quot;, &quot;etwa&quot;, &quot;fünf&quot;, &quot;Jahre&quot;, &quot;alt,&quot;, &quot;als&quot;, &quot;gar&quot;, &quot;nicht&quot;, &quot;weit&quot;, &quot;entfernt&quot;, &quot;die&quot;, &quot;nur&quot;, &quot;zweijährige&quot;, &quot;Jane&quot;, &quot;Shaxspere&quot;, &quot;ertrank.&quot;, &quot;Sie&quot;, &quot;war&quot;, &quot;beim&quot;, &quot;Blumenpflücken&quot;, &quot;ausgerutscht&quot;, &quot;und&quot;, &quot;in&quot;, &quot;einen&quot;, &quot;Brunnen&quot;, &quot;gefallen.&quot;, &quot;William&quot;, &quot;Shakespeare&quot;, &quot;sollte&quot;, &quot;später&quot;, &quot;zum&quot;, &quot;größten&quot;, &quot;Dramatiker&quot;, &quot;aller&quot;, &quot;Zeiten&quot;, &quot;heranwachsen.&quot;, &quot;Forscher&quot;, &quot;der&quot;, &quot;Universität&quot;, &quot;von&quot;, &quot;Oxford&quot;, &quot;vermuten&quot;, &quot;nun&quot;, &quot;einen&quot;, &quot;Zusammenhang&quot;, &quot;dieses&quot;, &quot;Unfalls&quot;, &quot;mit&quot;, &quot;Shakespeares&quot;, &quot;Stück&quot;, &quot;\&quot;Hamlet\&quot;.&quot;, &quot;Genauer&quot;, &quot;gesagt&quot;, &quot;geht&quot;, &quot;es&quot;, &quot;um&quot;, &quot;die&quot;, &quot;Figur&quot;, &quot;der&quot;, &quot;Ophelia.&quot;, &quot;Diese&quot;, &quot;fiktive&quot;, &quot;Edeldame&quot;, &quot;erleidet&quot;, &quot;im&quot;, &quot;Stück&quot;, &quot;\&quot;Hamlet\&quot;&quot;, &quot;ein&quot;, &quot;ähnliches&quot;, &quot;Schicksal&quot;, &quot;wie&quot;, &quot;die&quot;, &quot;kleine&quot;, &quot;Jane:&quot;, &quot;Auch&quot;, &quot;sie&quot;, &quot;ertrinkt&quot;, &quot;nachdem&quot;, &quot;sie&quot;, &quot;beim&quot;, &quot;Blumenpflücken&quot;, &quot;das&quot;, &quot;Gleichgewicht&quot;, &quot;verliert.&quot;, &quot;Anders&quot;, &quot;als&quot;, &quot;Jane&quot;, &quot;fällt&quot;, &quot;Ophelia&quot;, &quot;jedoch&quot;, &quot;in&quot;, &quot;einen&quot;, &quot;Bach.&quot;, &quot;Sie&quot;, &quot;ist&quot;, &quot;im&quot;, &quot;Stück&quot;, &quot;außerdem&quot;, &quot;bereits&quot;, &quot;erwachsen.&quot;, &quot;Die&quot;, &quot;erstaunliche&quot;, &quot;Verbindung&quot;, &quot;zwischen&quot;, &quot;realen&quot;, &quot;Ereignissen&quot;, &quot;und&quot;, &quot;Shakespeares&quot;, &quot;\&quot;Hamlet\&quot;&quot;, &quot;fiel&quot;, &quot;Historikern&quot;, &quot;auf,&quot;, &quot;als&quot;, &quot;sie&quot;, &quot;alte&quot;, &quot;medizinische&quot;, &quot;Akten&quot;, &quot;untersuchten.&quot;, &quot;Die&quot;, &quot;Ähnlichkeit&quot;, &quot;der&quot;, &quot;Nachnamen&quot;, &quot;könnte&quot;, &quot;sogar&quot;, &quot;darauf&quot;, &quot;hinweisen,&quot;, &quot;dass&quot;, &quot;William&quot;, &quot;und&quot;, &quot;Jane&quot;, &quot;Verwandte&quot;, &quot;gewesen&quot;, &quot;sein&quot;, &quot;könnten.&quot;, &quot;Feste&quot;, &quot;Schreibweisen&quot;, &quot;von&quot;, &quot;Namen&quot;, &quot;gab&quot;, &quot;es&quot;, &quot;zu&quot;, &quot;Shakespeares&quot;, &quot;Zeiten&quot;, &quot;nicht.&quot;, &quot;Für&quot;, &quot;eine&quot;, &quot;der&quot;, &quot;Forscherinnen&quot;, &quot;aus&quot;, &quot;Oxford&quot;, &quot;ist&quot;, &quot;dieses&quot;, &quot;Detail&quot;, &quot;aber&quot;, &quot;nicht&quot;, &quot;entscheidend:&quot;, &quot;\&quot;Selbst&quot;, &quot;wenn&quot;, &quot;sie&quot;, &quot;nicht&quot;, &quot;verwandt&quot;, &quot;gewesen&quot;, &quot;sind,&quot;, &quot;hat&quot;, &quot;sich&quot;, &quot;die&quot;, &quot;Geschichte&quot;, &quot;durch&quot;, &quot;die&quot;, &quot;Ähnlichkeit&quot;, &quot;der&quot;, &quot;Namen&quot;, &quot;vielleicht&quot;, &quot;in&quot;, &quot;Shakespeares&quot;, &quot;Kopf&quot;, &quot;verankert\&quot;.&quot;, &quot;Neben&quot;, &quot;historischen&quot;, &quot;Grundlagen&quot;, &quot;seien&quot;, &quot;Shakespeares&quot;, &quot;Stücke&quot;, &quot;häufig&quot;, &quot;auch&quot;, &quot;von&quot;, &quot;Klatsch&quot;, &quot;und&quot;, &quot;Tratsch-Geschichten&quot;, &quot;beeinflusst&quot;, &quot;worden.&quot;, &quot;Dazu&quot;, &quot;könnte&quot;, &quot;auch&quot;, &quot;die&quot;, &quot;Geschichte&quot;, &quot;über&quot;, &quot;den&quot;, &quot;Tod&quot;, &quot;der&quot;, &quot;kleinen&quot;, &quot;Jane&quot;, &quot;gezählt&quot;, &quot;haben.&quot;];&amp;#10;var t1_04 = [&quot;Eine&quot;, &quot;weltbekannte&quot;, &quot;Schriftstellerin&quot;, &quot;zu&quot;, &quot;sein&quot;, &quot;muss&quot;, &quot;nicht&quot;, &quot;unbedingt&quot;, &quot;mit&quot;, &quot;guten&quot;, &quot;Grammatik-Kenntnissen&quot;, &quot;einhergehen.&quot;, &quot;Jane&quot;, &quot;Austen&quot;, &quot;ist&quot;, &quot;eine&quot;, &quot;der&quot;, &quot;berühmtesten&quot;, &quot;Schriftstellerinnen&quot;, &quot;der&quot;, &quot;englischen&quot;, &quot;Literatur&quot;, &quot;und&quot;, &quot;für&quot;, &quot;ihren&quot;, &quot;perfekten&quot;, &quot;Schreibstil&quot;, &quot;bekannt.&quot;, &quot;Neuesten&quot;, &quot;Erkenntnissen&quot;, &quot;zufolge&quot;, &quot;war&quot;, &quot;sie&quot;, &quot;beim&quot;, &quot;Schreiben&quot;, &quot;scheinbar&quot;, &quot;trotzdem&quot;, &quot;sehr&quot;, &quot;auf&quot;, &quot;die&quot;, &quot;Hilfe&quot;, &quot;eines&quot;, &quot;Lektors&quot;, &quot;angewiesen.&quot;, &quot;Liest&quot;, &quot;man&quot;, &quot;ihre&quot;, &quot;Manuskripte,&quot;, &quot;merkt&quot;, &quot;man,&quot;, &quot;dass&quot;, &quot;es&quot;, &quot;mit&quot;, &quot;ihren&quot;, &quot;Grammatik-Kenntnissen&quot;, &quot;nicht&quot;, &quot;so&quot;, &quot;weit&quot;, &quot;her&quot;, &quot;gewesen&quot;, &quot;sein&quot;, &quot;kann.&quot;, &quot;Kathryn&quot;, &quot;Sutherland,&quot;, &quot;eine&quot;, &quot;Forscherin&quot;, &quot;an&quot;, &quot;der&quot;, &quot;Universität&quot;, &quot;Oxford,&quot;, &quot;analysierte&quot;, &quot;über&quot;, &quot;tausend&quot;, &quot;Seiten&quot;, &quot;unveröffentlichter&quot;, &quot;Original-Texte,&quot;, &quot;die&quot;, &quot;Jane&quot;, &quot;Austen&quot;, &quot;handschriftlich&quot;, &quot;verfasst&quot;, &quot;hat.&quot;, &quot;Jane&quot;, &quot;Austen&quot;, &quot;genießt&quot;, &quot;den&quot;, &quot;Ruf,&quot;, &quot;stilsicher&quot;, &quot;zu&quot;, &quot;sein&quot;, &quot;wie&quot;, &quot;kaum&quot;, &quot;eine&quot;, &quot;andere&quot;, &quot;Schriftstellerin.&quot;, &quot;Sie&quot;, &quot;soll&quot;, &quot;Sätze&quot;, &quot;perfekt&quot;, &quot;formuliert&quot;, &quot;zu&quot;, &quot;Papier&quot;, &quot;gebracht&quot;, &quot;zu&quot;, &quot;haben.&quot;, &quot;Von&quot;, &quot;Austens&quot;, &quot;Bruder&quot;, &quot;Henry&quot;, &quot;stammt&quot;, &quot;das&quot;, &quot;ehrfürchtige&quot;, &quot;Zitat,&quot;, &quot;alles&quot;, &quot;was&quot;, &quot;aus&quot;, &quot;der&quot;, &quot;Feder&quot;, &quot;seiner&quot;, &quot;Schwester&quot;, &quot;geflossen&quot;, &quot;sei,&quot;, &quot;sei&quot;, &quot;\&quot;vollendet\&quot;&quot;, &quot;gewesen.&quot;, &quot;Das&quot;, &quot;scheint&quot;, &quot;jedoch&quot;, &quot;nicht&quot;, &quot;ganz&quot;, &quot;wahr&quot;, &quot;zu&quot;, &quot;sein.&quot;, &quot;Beim&quot;, &quot;Lesen&quot;, &quot;ihrer&quot;, &quot;Original-Texte&quot;, &quot;wird&quot;, &quot;schnell&quot;, &quot;deutlich,&quot;, &quot;dass&quot;, &quot;ihr&quot;, &quot;Schreibstil&quot;, &quot;nicht&quot;, &quot;ganz&quot;, &quot;fehlerlos&quot;, &quot;war.&quot;, &quot;Jane&quot;, &quot;Austens&quot;, &quot;Ruf&quot;, &quot;als&quot;, &quot;Perfektionistin&quot;, &quot;wird&quot;, &quot;schon&quot;, &quot;durch&quot;, &quot;das&quot;, &quot;Aussehen&quot;, &quot;der&quot;, &quot;Texte&quot;, &quot;widerlegt.&quot;, &quot;Tintenkleckse,&quot;, &quot;durchgestrichene&quot;, &quot;Sätze,&quot;, &quot;Unordnung.&quot;, &quot;In&quot;, &quot;Manuskripten&quot;, &quot;sieht&quot;, &quot;man&quot;, &quot;genau,&quot;, &quot;wie&quot;, &quot;ein&quot;, &quot;Buch&quot;, &quot;entsteht.&quot;, &quot;In&quot;, &quot;Jane&quot;, &quot;Austens&quot;, &quot;Fall&quot;, &quot;entdeckt&quot;, &quot;man&quot;, &quot;beim&quot;, &quot;Lesen&quot;, &quot;einen&quot;, &quot;der&quot;, &quot;Grammatik&quot;, &quot;zuwiderlaufenden&quot;, &quot;Schreibstil.&quot;, &quot;Sie&quot;, &quot;brach&quot;, &quot;die&quot;, &quot;meisten&quot;, &quot;Regeln&quot;, &quot;für&quot;, &quot;gutes&quot;, &quot;Schrift-Englisch.&quot;, &quot;Insbesondere&quot;, &quot;den&quot;, &quot;hochgelobten&quot;, &quot;Stil&quot;, &quot;in&quot;, &quot;ihren&quot;, &quot;berühmten&quot;, &quot;Romanen&quot;, &quot;\&quot;Emma\&quot;&quot;, &quot;und&quot;, &quot;\&quot;Überredung\&quot;&quot;, &quot;scheint&quot;, &quot;es&quot;, &quot;in&quot;, &quot;ihren&quot;, &quot;Manuskripten&quot;, &quot;nicht&quot;, &quot;zu&quot;, &quot;geben.&quot;, &quot;Das&quot;, &quot;deutet&quot;, &quot;darauf&quot;, &quot;hin,&quot;, &quot;dass&quot;, &quot;irgendein&quot;, &quot;Anderer&quot;, &quot;sehr&quot;, &quot;stark&quot;, &quot;am&quot;, &quot;Schreibprozess&quot;, &quot;beteiligt&quot;, &quot;war.&quot;, &quot;Die&quot;, &quot;Forscherin&quot;, &quot;Kathryn&quot;, &quot;Sutherland&quot;, &quot;ist&quot;, &quot;überzeugt,&quot;, &quot;dass&quot;, &quot;jemand&quot;, &quot;Austens&quot;, &quot;Manuskripte&quot;, &quot;vor&quot;, &quot;dem&quot;, &quot;Druck&quot;, &quot;überarbeitet&quot;, &quot;haben&quot;, &quot;muss.&quot;, &quot;Vermutlich&quot;, &quot;handelt&quot;, &quot;es&quot;, &quot;sich&quot;, &quot;dabei&quot;, &quot;um&quot;, &quot;William&quot;, &quot;Gifford,&quot;, &quot;den&quot;, &quot;Lektor&quot;, &quot;von&quot;, &quot;Jane&quot;, &quot;Austen.&quot;, &quot;Das&quot;, &quot;geht&quot;, &quot;aus&quot;, &quot;Briefen&quot;, &quot;zwischen&quot;, &quot;Austen&quot;, &quot;und&quot;, &quot;ihrem&quot;, &quot;Verleger&quot;, &quot;hervor.&quot;, &quot;Jane&quot;, &quot;Austen&quot;, &quot;verbrachte&quot;, &quot;die&quot;, &quot;meiste&quot;, &quot;Zeit&quot;, &quot;ihres&quot;, &quot;Lebens&quot;, &quot;in&quot;, &quot;Südengland.&quot;, &quot;Sie&quot;, &quot;veröffentlichte&quot;, &quot;von&quot;, &quot;1811&quot;, &quot;an&quot;, &quot;ihre&quot;, &quot;berühmten&quot;, &quot;Romane,&quot;, &quot;darunter&quot;, &quot;\&quot;Verstand&quot;, &quot;und&quot;, &quot;Gefühl\&quot;,&quot;, &quot;\&quot;Stolz&quot;, &quot;und&quot;, &quot;Vorurteil\&quot;,&quot;, &quot;\&quot;Mansfield&quot;, &quot;Park\&quot;,&quot;, &quot;und&quot;, &quot;\&quot;Emma\&quot;.&quot;];&amp;#10;&amp;#10;var t1_05 = [&quot;Wir&quot;, &quot;waren&quot;, &quot;gerade&quot;, &quot;sechzehn&quot;, &quot;geworden.&quot;, &quot;\&quot;Der&quot;, &quot;Fänger&quot;, &quot;im&quot;, &quot;Roggen\&quot;&quot;, &quot;von&quot;, &quot;Salinger&quot;, &quot;war&quot;, &quot;unsere&quot;, &quot;Bibel,&quot;, &quot;und&quot;, &quot;Holden&quot;, &quot;Caulfield,&quot;, &quot;die&quot;, &quot;Hauptfigur&quot;, &quot;des&quot;, &quot;Romans,&quot;, &quot;war&quot;, &quot;unser&quot;, &quot;Gott.&quot;, &quot;Unsere&quot;, &quot;Mützen&quot;, &quot;mussten&quot;, &quot;mit&quot;, &quot;dem&quot;, &quot;Schirm&quot;, &quot;nach&quot;, &quot;hinten&quot;, &quot;getragen&quot;, &quot;werden,&quot;, &quot;so&quot;, &quot;wie&quot;, &quot;Holden&quot;, &quot;seine&quot;, &quot;rote&quot;, &quot;Jagdmütze&quot;, &quot;trug.&quot;, &quot;Da&quot;, &quot;nur&quot;, &quot;einer&quot;, &quot;von&quot;, &quot;uns&quot;, &quot;Holden&quot;, &quot;heißen&quot;, &quot;konnte,&quot;, &quot;nannte&quot;, &quot;sich&quot;, &quot;der&quot;, &quot;andere&quot;, &quot;Edgar,&quot;, &quot;benannt&quot;, &quot;nach&quot;, &quot;Holdens&quot;, &quot;Bewunderer&quot;, &quot;aus&quot;, &quot;einem&quot;, &quot;Roman&quot;, &quot;von&quot;, &quot;Ulrich&quot;, &quot;Plenzdorf.&quot;, &quot;Es&quot;, &quot;gab&quot;, &quot;nichts&quot;, &quot;Schöneres,&quot;, &quot;als&quot;, &quot;wenn&quot;, &quot;im&quot;, &quot;Imbiss&quot;, &quot;unsere&quot;, &quot;Bestellungen&quot;, &quot;ausgerufen&quot;, &quot;wurden:&quot;, &quot;Pizza&quot;, &quot;für&quot;, &quot;Holden,&quot;, &quot;Spaghetti&quot;, &quot;für&quot;, &quot;Edgar.&quot;, &quot;Helden&quot;, &quot;wie&quot;, &quot;Holden,&quot;, &quot;das&quot;, &quot;wollten&quot;, &quot;wir&quot;, &quot;sein!&quot;, &quot;Mit&quot;, &quot;ihm&quot;, &quot;sprach&quot;, &quot;endlich&quot;, &quot;jemand&quot;, &quot;aus,&quot;, &quot;was&quot;, &quot;wir&quot;, &quot;dachten,&quot;, &quot;nur&quot;, &quot;besser.&quot;, &quot;Merkwürdig&quot;, &quot;alterslos&quot;, &quot;kommt&quot;, &quot;die&quot;, &quot;Geschichte&quot;, &quot;daher.&quot;, &quot;Sie&quot;, &quot;erzählt&quot;, &quot;von&quot;, &quot;der&quot;, &quot;Suche&quot;, &quot;nach&quot;, &quot;einem&quot;, &quot;Platz&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Welt,&quot;, &quot;von&quot;, &quot;einer&quot;, &quot;\&quot;fast&quot;, &quot;rührenden&quot;, &quot;Rebellion\&quot;,&quot;, &quot;so&quot;, &quot;Literaturkritiker&quot;, &quot;Marcel&quot;, &quot;Reich-Ranicki.&quot;, &quot;Die&quot;, &quot;Handlung&quot;, &quot;beginnt&quot;, &quot;kurz&quot;, &quot;vor&quot;, &quot;Weihnachten,&quot;, &quot;draußen&quot;, &quot;ist&quot;, &quot;es&quot;, &quot;höllisch&quot;, &quot;kalt.&quot;, &quot;Holden&quot;, &quot;Caulfield&quot;, &quot;ist&quot;, &quot;gerade&quot;, &quot;von&quot;, &quot;der&quot;, &quot;Schule&quot;, &quot;geflogen&quot;, &quot;und&quot;, &quot;fährt&quot;, &quot;deshalb&quot;, &quot;schon&quot;, &quot;zwei&quot;, &quot;Tage&quot;, &quot;vor&quot;, &quot;Ferienbeginn&quot;, &quot;nach&quot;, &quot;Hause&quot;, &quot;nach&quot;, &quot;New&quot;, &quot;York.&quot;, &quot;Was&quot;, &quot;folgt,&quot;, &quot;ist&quot;, &quot;eine&quot;, &quot;zweitägige&quot;, &quot;Irrfahrt&quot;, &quot;durch&quot;, &quot;die&quot;, &quot;Großstadt.&quot;, &quot;\&quot;Ein&quot;, &quot;üblicher&quot;, &quot;Roman&quot;, &quot;würde&quot;, &quot;über&quot;, &quot;einem&quot;, &quot;solchen&quot;, &quot;Stoff&quot;, &quot;verhungern\&quot;,&quot;, &quot;schrieb&quot;, &quot;die&quot;, &quot;\&quot;Süddeutsche&quot;, &quot;Zeitung\&quot;&quot;, &quot;im&quot;, &quot;Jahr&quot;, &quot;1962.&quot;, &quot;\&quot;Nicht&quot;, &quot;was&quot;, &quot;er&quot;, &quot;mitzuteilen&quot;, &quot;hat,&quot;, &quot;sondern&quot;, &quot;wie&quot;, &quot;er&quot;, &quot;es&quot;, &quot;mitteilt,&quot;, &quot;das&quot;, &quot;macht&quot;, &quot;seine&quot;, &quot;Geschichte&quot;, &quot;aus.\&quot;&quot;, &quot;Es&quot;, &quot;stimmt:&quot;, &quot;Holdens&quot;, &quot;Blick&quot;, &quot;ist&quot;, &quot;gnadenlos,&quot;, &quot;seine&quot;, &quot;Worte&quot;, &quot;schnoddrig&quot;, &quot;und&quot;, &quot;rüde.&quot;, &quot;Aber&quot;, &quot;im&quot;, &quot;tiefsten&quot;, &quot;Herzen&quot;, &quot;ist&quot;, &quot;er&quot;, &quot;doch&quot;, &quot;verletzlicher&quot;, &quot;Menschenfreund.&quot;, &quot;Wir&quot;, &quot;bewunderten&quot;, &quot;Holden&quot;, &quot;für&quot;, &quot;seine&quot;, &quot;Kompromisslosigkeit,&quot;, &quot;denn&quot;, &quot;er&quot;, &quot;ist&quot;, &quot;kompromisslos&quot;, &quot;im&quot;, &quot;besten&quot;, &quot;Sinne:&quot;, &quot;In&quot;, &quot;seinem&quot;, &quot;Urteil,&quot;, &quot;seinen&quot;, &quot;Träumen,&quot;, &quot;seinem&quot;, &quot;Anspruch&quot;, &quot;an&quot;, &quot;sich&quot;, &quot;und&quot;, &quot;die&quot;, &quot;Welt.&quot;, &quot;Und&quot;, &quot;so&quot;, &quot;ist&quot;, &quot;es,&quot;, &quot;wenn&quot;, &quot;wir&quot;, &quot;heute&quot;, &quot;zu&quot;, &quot;\&quot;Der&quot;, &quot;Fänger&quot;, &quot;im&quot;, &quot;Roggen\&quot;&quot;, &quot;greifen,&quot;, &quot;als&quot;, &quot;wären&quot;, &quot;wir&quot;, &quot;wieder&quot;, &quot;Teenager.&quot;, &quot;Alles&quot;, &quot;ist&quot;, &quot;wieder&quot;, &quot;da:&quot;, &quot;Der&quot;, &quot;Schmerz,&quot;, &quot;die&quot;, &quot;Sehnsucht,&quot;, &quot;der&quot;, &quot;Zorn&quot;, &quot;auf&quot;, &quot;die&quot;, &quot;Welt.&quot;, &quot;\&quot;Manche&quot;, &quot;Sachen&quot;, &quot;sollten&quot;, &quot;so&quot;, &quot;bleiben,&quot;, &quot;wie&quot;, &quot;sie&quot;, &quot;sind\&quot;,&quot;, &quot;sagt&quot;, &quot;Holden&quot;, &quot;im&quot;, &quot;Buch.&quot;, &quot;\&quot;Man&quot;, &quot;sollte&quot;, &quot;sie&quot;, &quot;in&quot;, &quot;einen&quot;, &quot;großen&quot;, &quot;Glaskasten&quot;, &quot;stecken&quot;, &quot;und&quot;, &quot;so&quot;, &quot;lassen&quot;, &quot;können.&quot;, &quot;Natürlich&quot;, &quot;ist&quot;, &quot;das&quot;, &quot;unmöglich,&quot;, &quot;das&quot;, &quot;weiß&quot;, &quot;ich.\&quot;&quot;, &quot;Ihm&quot;, &quot;ist&quot;, &quot;es&quot;, &quot;trotzdem&quot;, &quot;gelungen.&quot;, &quot;Niemand&quot;, &quot;ist&quot;, &quot;so&quot;, &quot;unsterblich&quot;, &quot;siebzehn&quot;, &quot;wie&quot;, &quot;er.&quot;];&amp;#10;var t1_06 = [&quot;Sie&quot;, &quot;besuchte&quot;, &quot;ihn&quot;, &quot;regelmäßig&quot;, &quot;in&quot;, &quot;seinem&quot;, &quot;Haus&quot;, &quot;und&quot;, &quot;bekam&quot;, &quot;Briefe&quot;, &quot;und&quot;, &quot;Gedichte&quot;, &quot;von&quot;, &quot;ihm.&quot;, &quot;Manchmal&quot;, &quot;durfte&quot;, &quot;sie&quot;, &quot;ihm&quot;, &quot;sogar&quot;, &quot;die&quot;, &quot;Haare&quot;, &quot;schneiden.&quot;, &quot;Johanna&quot;, &quot;Fantova&quot;, &quot;galt&quot;, &quot;als&quot;, &quot;letzte&quot;, &quot;Freundin&quot;, &quot;von&quot;, &quot;Albert&quot;, &quot;Einstein.&quot;, &quot;Die&quot;, &quot;beiden&quot;, &quot;trafen&quot;, &quot;sich&quot;, &quot;regelmäßig,&quot;, &quot;telefonierten&quot;, &quot;viel,&quot;, &quot;und&quot;, &quot;gingen&quot;, &quot;miteinander&quot;, &quot;segeln.&quot;, &quot;Nun&quot;, &quot;wurde&quot;, &quot;bekannt,&quot;, &quot;was&quot;, &quot;offenbar&quot;, &quot;nicht&quot;, &quot;einmal&quot;, &quot;Einstein&quot;, &quot;wusste:&quot;, &quot;Johanna&quot;, &quot;Fantova&quot;, &quot;fertigte&quot;, &quot;Notizen&quot;, &quot;über&quot;, &quot;den&quot;, &quot;Inhalt&quot;, &quot;ihrer&quot;, &quot;Gespräche&quot;, &quot;an.&quot;, &quot;In&quot;, &quot;ihren&quot;, &quot;Aufzeichnungen&quot;, &quot;zeigt&quot;, &quot;sie&quot;, &quot;ihn&quot;, &quot;nicht&quot;, &quot;als&quot;, &quot;den&quot;, &quot;großen&quot;, &quot;Mann,&quot;, &quot;der&quot;, &quot;zu&quot;, &quot;Lebzeiten&quot;, &quot;zur&quot;, &quot;Legende&quot;, &quot;wurde,&quot;, &quot;sondern&quot;, &quot;als&quot;, &quot;Einstein,&quot;, &quot;den&quot;, &quot;Menschenfreund.&quot;, &quot;Die&quot;, &quot;Nachwelt&quot;, &quot;dürfte&quot;, &quot;ihr&quot;, &quot;dankbar&quot;, &quot;sein.&quot;, &quot;Ohne&quot;, &quot;die&quot;, &quot;Notizen&quot;, &quot;wüssten&quot;, &quot;wir&quot;, &quot;heute&quot;, &quot;nichts&quot;, &quot;von&quot;, &quot;Bibo,&quot;, &quot;dem&quot;, &quot;traurigen&quot;, &quot;Papagei.&quot;, &quot;Auch&quot;, &quot;eine&quot;, &quot;ganze&quot;, &quot;Reihe&quot;, &quot;kluger&quot;, &quot;und&quot;, &quot;lustiger&quot;, &quot;Zitate&quot;, &quot;von&quot;, &quot;Einstein&quot;, &quot;wären&quot;, &quot;verloren&quot;, &quot;gegangen.&quot;, &quot;Es&quot;, &quot;ist&quot;, &quot;bisher&quot;, &quot;das&quot;, &quot;einzige&quot;, &quot;bekannte&quot;, &quot;Tagebuch&quot;, &quot;von&quot;, &quot;einer&quot;, &quot;Person,&quot;, &quot;die&quot;, &quot;während&quot;, &quot;seiner&quot;, &quot;letzten&quot;, &quot;Jahre&quot;, &quot;eng&quot;, &quot;mit&quot;, &quot;Einstein&quot;, &quot;befreundet&quot;, &quot;war.&quot;, &quot;Die&quot;, &quot;22&quot;, &quot;Jahre&quot;, &quot;jüngere&quot;, &quot;Johanna&quot;, &quot;Fantova&quot;, &quot;stammte&quot;, &quot;wie&quot;, &quot;Einstein&quot;, &quot;aus&quot;, &quot;Europa.&quot;, &quot;Die&quot;, &quot;Eltern&quot;, &quot;ihres&quot;, &quot;Ehemannes&quot;, &quot;Otto&quot;, &quot;Fanta&quot;, &quot;empfingen&quot;, &quot;vor&quot;, &quot;dem&quot;, &quot;Krieg&quot;, &quot;viele&quot;, &quot;berühmte&quot;, &quot;Gäste&quot;, &quot;in&quot;, &quot;ihrem&quot;, &quot;Salon.&quot;, &quot;Neben&quot;, &quot;Einstein&quot;, &quot;zählten&quot;, &quot;dazu&quot;, &quot;auch&quot;, &quot;Schriftsteller&quot;, &quot;wie&quot;, &quot;Franz&quot;, &quot;Kafka.&quot;, &quot;Johanna&quot;, &quot;Fantova&quot;, &quot;war&quot;, &quot;für&quot;, &quot;Einstein&quot;, &quot;daher&quot;, &quot;ein&quot;, &quot;Teil&quot;, &quot;der&quot;, &quot;alten&quot;, &quot;Welt.&quot;, &quot;Sie&quot;, &quot;war&quot;, &quot;eine&quot;, &quot;Verbindung&quot;, &quot;zu&quot;, &quot;Dingen,&quot;, &quot;die&quot;, &quot;er&quot;, &quot;vermisste.&quot;, &quot;In&quot;, &quot;Johanna&quot;, &quot;Fantovas&quot;, &quot;Manuskript&quot;, &quot;erscheint&quot;, &quot;Einstein&quot;, &quot;als&quot;, &quot;komischer&quot;, &quot;Eigenbrötler.&quot;, &quot;Zugleich&quot;, &quot;beschreibt&quot;, &quot;sie&quot;, &quot;ihn&quot;, &quot;aber&quot;, &quot;auch&quot;, &quot;als&quot;, &quot;Menschenfreund,&quot;, &quot;der&quot;, &quot;vielen&quot;, &quot;Freunden&quot;, &quot;bei&quot;, &quot;persönlichen&quot;, &quot;Problemen&quot;, &quot;half.&quot;, &quot;Und&quot;, &quot;doch&quot;, &quot;fühlte&quot;, &quot;sich&quot;, &quot;Einstein&quot;, &quot;scheinbar&quot;, &quot;nie&quot;, &quot;wirklich&quot;, &quot;mit&quot;, &quot;seinen&quot;, &quot;Mitmenschen&quot;, &quot;verbunden.&quot;, &quot;Angesichts&quot;, &quot;seiner&quot;, &quot;eigenen&quot;, &quot;gescheiterten&quot;, &quot;Beziehungen&quot;, &quot;betrachtete&quot;, &quot;er&quot;, &quot;Beziehungen&quot;, &quot;seiner&quot;, &quot;Freunde&quot;, &quot;mit&quot;, &quot;spöttischer&quot;, &quot;Distanz:&quot;, &quot;\&quot;Ich&quot;, &quot;war&quot;, &quot;bei&quot;, &quot;einem&quot;, &quot;Nachbarn.&quot;, &quot;Es&quot;, &quot;besteht&quot;, &quot;die&quot;, &quot;Gefahr,&quot;, &quot;dass&quot;, &quot;sein&quot;, &quot;Sohn&quot;, &quot;heiratet\&quot;.&quot;, &quot;Rührend&quot;, &quot;kümmerte&quot;, &quot;er&quot;, &quot;sich&quot;, &quot;dagegen&quot;, &quot;um&quot;, &quot;sein&quot;, &quot;Haustier,&quot;, &quot;einen&quot;, &quot;deprimierten&quot;, &quot;Papagei&quot;, &quot;namens&quot;, &quot;Bibo.&quot;, &quot;\&quot;Der&quot;, &quot;Papagei&quot;, &quot;ist&quot;, &quot;noch&quot;, &quot;ganz&quot;, &quot;verschüchtert.&quot;, &quot;Er&quot;, &quot;kam&quot;, &quot;mit&quot;, &quot;der&quot;, &quot;Post\&quot;.&quot;, &quot;Einstein&quot;, &quot;schritt&quot;, &quot;sofort&quot;, &quot;zur&quot;, &quot;Tat.&quot;, &quot;Der&quot;, &quot;Erfolg&quot;, &quot;blieb&quot;, &quot;jedoch&quot;, &quot;leider&quot;, &quot;aus:&quot;, &quot;\&quot;Der&quot;, &quot;Papagei&quot;, &quot;ist&quot;, &quot;traurig.&quot;, &quot;Ich&quot;, &quot;versuche&quot;, &quot;ihn&quot;, &quot;aufzuheitern,&quot;, &quot;aber&quot;, &quot;er&quot;, &quot;versteht&quot;, &quot;leider&quot;, &quot;meine&quot;, &quot;Witze&quot;, &quot;nicht\&quot;.&quot;];&amp;#10;var t1_07 = [&quot;Kieron&quot;,&quot;Williamson,&quot;,&quot;ein&quot;,&quot;achtjähriger&quot;,&quot;Junge&quot;,&quot;aus&quot;,&quot;Großbritannien,&quot;,&quot;ist&quot;,&quot;derzeit&quot;,&quot;der&quot;,&quot;gefragteste&quot;,&quot;Künstler&quot;,&quot;seines&quot;,&quot;Landes.&quot;,&quot;Von&quot;,&quot;der&quot;,&quot;Presse&quot;,&quot;wird&quot;,&quot;er&quot;,&quot;\&quot;Mini-Monet\&quot;&quot;,&quot;genannt&quot;,&quot;und&quot;,&quot;für&quot;,&quot;seine&quot;,&quot;Werke&quot;,&quot;gibt&quot;,&quot;es&quot;,&quot;lange&quot;,&quot;Wartelisten.&quot;,&quot;Kierons&quot;,&quot;Eltern&quot;,&quot;sind&quot;,&quot;von&quot;,&quot;der&quot;,&quot;Aufregung&quot;,&quot;um&quot;,&quot;ihren&quot;,&quot;Sohn&quot;,&quot;immer&quot;,&quot;noch&quot;,&quot;überwältigt.&quot;,&quot;Michelle&quot;,&quot;Williamson&quot;,&quot;und&quot;,&quot;ihr&quot;,&quot;Mann&quot;,&quot;unterstützen&quot;,&quot;Kieron&quot;,&quot;nach&quot;,&quot;Kräften.&quot;,&quot;Trotzdem&quot;,&quot;machen&quot;,&quot;sich&quot;,&quot;die&quot;,&quot;Eltern&quot;,&quot;Sorgen,&quot;,&quot;ob&quot;,&quot;sie&quot;,&quot;das&quot;,&quot;Richtige&quot;,&quot;für&quot;,&quot;ihren&quot;,&quot;Jungen&quot;,&quot;tun.&quot;,&quot;Schließlich&quot;,&quot;ist&quot;,&quot;Kieron&quot;,&quot;schon&quot;,&quot;ein&quot;,&quot;kleiner&quot;,&quot;Medienstar.&quot;,&quot;Dabei&quot;,&quot;wirkt&quot;,&quot;Kieron&quot;,&quot;recht&quot;,&quot;bodenständig:&quot;,&quot;Der&quot;,&quot;Junge&quot;,&quot;spielt&quot;,&quot;begeistert&quot;,&quot;Fußball&quot;,&quot;und&quot;,&quot;treibt&quot;,&quot;sich&quot;,&quot;gern&quot;,&quot;am&quot;,&quot;Strand&quot;,&quot;herum.&quot;,&quot;Doch&quot;,&quot;er&quot;,&quot;kann&quot;,&quot;auch&quot;,&quot;über&quot;,&quot;die&quot;,&quot;Auswahl&quot;,&quot;einer&quot;,&quot;ganz&quot;,&quot;bestimmten&quot;,&quot;Farbe&quot;,&quot;diskutieren&quot;,&quot;und&quot;,&quot;über&quot;,&quot;das&quot;,&quot;Wechselspiel&quot;,&quot;von&quot;,&quot;Licht&quot;,&quot;und&quot;,&quot;Schatten.&quot;,&quot;Kühe&quot;,&quot;sind&quot;,&quot;für&quot;,&quot;ihn&quot;,&quot;besonders&quot;,&quot;einfach&quot;,&quot;zu&quot;,&quot;malen.&quot;,&quot;\&quot;Man&quot;,&quot;muss&quot;,&quot;sich&quot;,&quot;nicht&quot;,&quot;um&quot;,&quot;so&quot;,&quot;viele&quot;,&quot;Details&quot;,&quot;Gedanken&quot;,&quot;machen.\&quot;&quot;,&quot;Bei&quot;,&quot;Pferden&quot;,&quot;werde&quot;,&quot;es&quot;,&quot;schon&quot;,&quot;schwieriger:&quot;,&quot;\&quot;Ihre&quot;,&quot;Beine&quot;,&quot;muss&quot;,&quot;man&quot;,&quot;richtig&quot;,&quot;hinbekommen.\&quot;&quot;,&quot;Experten&quot;,&quot;beschäftigt&quot;,&quot;gerade&quot;,&quot;vor&quot;,&quot;allem&quot;,&quot;die&quot;,&quot;Frage,&quot;,&quot;wie&quot;,&quot;sich&quot;,&quot;die&quot;,&quot;Fähigkeiten&quot;,&quot;des&quot;,&quot;Jungen&quot;,&quot;entwickeln&quot;,&quot;werden,&quot;,&quot;wenn&quot;,&quot;er&quot;,&quot;älter&quot;,&quot;wird.&quot;,&quot;Der&quot;,&quot;Psychologe&quot;,&quot;Jack&quot;,&quot;Boyle&quot;,&quot;betont,&quot;,&quot;dass&quot;,&quot;die&quot;,&quot;meisten&quot;,&quot;Wunderkinder&quot;,&quot;ihr&quot;,&quot;Können&quot;,&quot;nicht&quot;,&quot;bis&quot;,&quot;ins&quot;,&quot;Erwachsenenalter&quot;,&quot;mitnehmen.&quot;,&quot;Kierons&quot;,&quot;Eltern&quot;,&quot;sollten&quot;,&quot;sich&quot;,&quot;allerdings&quot;,&quot;nicht&quot;,&quot;zu&quot;,&quot;viele&quot;,&quot;Sorgen&quot;,&quot;um&quot;,&quot;ihren&quot;,&quot;Sohn&quot;,&quot;machen,&quot;,&quot;rät&quot;,&quot;der&quot;,&quot;Psychologe.&quot;,&quot;Das&quot;,&quot;Talent&quot;,&quot;des&quot;,&quot;Jungen&quot;,&quot;werde&quot;,&quot;ihm&quot;,&quot;schließlich&quot;,&quot;nicht&quot;,&quot;schaden.&quot;,&quot;Sein&quot;,&quot;Rat&quot;,&quot;an&quot;,&quot;die&quot;,&quot;Eltern:&quot;,&quot;Möglichst&quot;,&quot;viel&quot;,&quot;Geld&quot;,&quot;mitnehmen,&quot;,&quot;ohne&quot;,&quot;dem&quot;,&quot;Kind&quot;,&quot;zu&quot;,&quot;schaden.&quot;,&quot;Kierons&quot;,&quot;Mutter&quot;,&quot;freut&quot;,&quot;sich&quot;,&quot;im&quot;,&quot;Moment&quot;,&quot;auf&quot;,&quot;den&quot;,&quot;Beginn&quot;,&quot;des&quot;,&quot;neuen&quot;,&quot;Schuljahrs.&quot;,&quot;Dann&quot;,&quot;werden&quot;,&quot;Ausstellungen&quot;,&quot;von&quot;,&quot;Hausaufgaben&quot;,&quot;und&quot;,&quot;der&quot;,&quot;Routine&quot;,&quot;eines&quot;,&quot;normalen&quot;,&quot;Kinderalltags&quot;,&quot;abgelöst.&quot;,&quot;Sollte&quot;,&quot;ihr&quot;,&quot;Sohn&quot;,&quot;irgendwann&quot;,&quot;nicht&quot;,&quot;mehr&quot;,&quot;malen&quot;,&quot;wollen,&quot;,&quot;wäre&quot;,&quot;sie&quot;,&quot;nicht&quot;,&quot;enttäuscht.&quot;,&quot;Für&quot;,&quot;seine&quot;,&quot;Eltern&quot;,&quot;zählt&quot;,&quot;nur,&quot;,&quot;ob&quot;,&quot;Kieron&quot;,&quot;glücklich&quot;,&quot;ist.&quot;,&quot;Der&quot;,&quot;Achtjährige&quot;,&quot;selbst&quot;,&quot;weiß&quot;,&quot;schon,&quot;,&quot;was&quot;,&quot;er&quot;,&quot;werden&quot;,&quot;will:&quot;,&quot;\&quot;Maler&quot;,&quot;und&quot;,&quot;Fußballer\&quot;.&quot;];&amp;#10;var t1_08 = [&quot;Nina&quot;, &quot;ist&quot;, &quot;seit&quot;, &quot;22&quot;, &quot;Jahren&quot;, &quot;Schauspielerin.&quot;, &quot;Nach&quot;, &quot;ihrem&quot;, &quot;ersten&quot;, &quot;Auftritt&quot;, &quot;in&quot;, &quot;einem&quot;, &quot;englischen&quot;, &quot;Film&quot;, &quot;bemühten&quot;, &quot;sich&quot;, &quot;immer&quot;, &quot;wieder&quot;, &quot;Regisseure&quot;, &quot;aus&quot;, &quot;Hollywood&quot;, &quot;um&quot;, &quot;sie.&quot;, &quot;Aber&quot;, &quot;Nina&quot;, &quot;wollte&quot;, &quot;Kunst,&quot;, &quot;nicht&quot;, &quot;Kitsch.&quot;, &quot;Der&quot;, &quot;französische&quot;, &quot;Film&quot;, &quot;hatte&quot;, &quot;es&quot;, &quot;ihr&quot;, &quot;angetan,&quot;, &quot;auch&quot;, &quot;der&quot;, &quot;russische.&quot;, &quot;Was&quot;, &quot;war&quot;, &quot;im&quot;, &quot;Vergleich&quot;, &quot;schon&quot;, &quot;Hollywood?&quot;, &quot;Die&quot;, &quot;Blondine&quot;, &quot;ahnte,&quot;, &quot;was&quot;, &quot;ihr&quot;, &quot;dort&quot;, &quot;bevorstehen&quot;, &quot;würde:&quot;, &quot;Eine&quot;, &quot;Karriere&quot;, &quot;als&quot;, &quot;Nazi,&quot;, &quot;\&quot;bis&quot;, &quot;in&quot;, &quot;alle&quot;, &quot;Ewigkeit\&quot;&quot;, &quot;wie&quot;, &quot;sie&quot;, &quot;sagt.&quot;, &quot;Steven&quot;, &quot;Spielberg&quot;, &quot;hat&quot;, &quot;sie&quot;, &quot;später&quot;, &quot;einmal&quot;, &quot;für&quot;, &quot;eine&quot;, &quot;Rolle&quot;, &quot;in&quot;, &quot;\&quot;Schindlers&quot;, &quot;Liste\&quot;&quot;, &quot;vorsprechen&quot;, &quot;lassen&quot;, &quot;und&quot;, &quot;ihr&quot;, &quot;Talent&quot;, &quot;gelobt.&quot;, &quot;Letztlich&quot;, &quot;hat&quot;, &quot;er&quot;, &quot;sie&quot;, &quot;jedoch&quot;, &quot;doch&quot;, &quot;nicht&quot;, &quot;engagiert,&quot;, &quot;weil&quot;, &quot;die&quot;, &quot;Deutsche&quot;, &quot;ihm&quot;, &quot;\&quot;nicht&quot;, &quot;jüdisch&quot;, &quot;genug\&quot;&quot;, &quot;erschien.&quot;, &quot;Seit&quot;, &quot;drei&quot;, &quot;Jahren&quot;, &quot;lebt&quot;, &quot;sie&quot;, &quot;nun&quot;, &quot;doch&quot;, &quot;in&quot;, &quot;Hollywood.&quot;, &quot;Heute&quot;, &quot;träumt&quot;, &quot;sie&quot;, &quot;nicht&quot;, &quot;mehr&quot;, &quot;davon,&quot;, &quot;Hollywood-Star&quot;, &quot;zu&quot;, &quot;werden.&quot;, &quot;\&quot;Mit&quot;, &quot;nahezu&quot;, &quot;40&quot;, &quot;wäre&quot;, &quot;das&quot;, &quot;wohl&quot;, &quot;reichlich&quot;, &quot;unrealistisch\&quot;,&quot;, &quot;meint&quot;, &quot;sie&quot;, &quot;selbstkritisch.&quot;, &quot;Wie&quot;, &quot;Nina&quot;, &quot;erleben&quot;, &quot;Zehntausende&quot;, &quot;die&quot;, &quot;Wirklichkeit:&quot;, &quot;Eine&quot;, &quot;20-Jährige&quot;, &quot;darf&quot;, &quot;in&quot;, &quot;Hollywood&quot;, &quot;noch&quot;, &quot;träumen.&quot;, &quot;Sie&quot;, &quot;darf&quot;, &quot;den&quot;, &quot;Geschichten&quot;, &quot;jener&quot;, &quot;Männer&quot;, &quot;glauben,&quot;, &quot;die&quot;, &quot;sich&quot;, &quot;als&quot;, &quot;Produzenten&quot;, &quot;ausgeben&quot;, &quot;oder&quot;, &quot;als&quot;, &quot;Regisseure&quot;, &quot;vorstellen,&quot;, &quot;in&quot;, &quot;Wahrheit&quot;, &quot;aber&quot;, &quot;ihre&quot;, &quot;Kreditkarten-Rechnung&quot;, &quot;nicht&quot;, &quot;tilgen&quot;, &quot;und&quot;, &quot;die&quot;, &quot;Miete&quot;, &quot;nicht&quot;, &quot;zahlen&quot;, &quot;können.&quot;, &quot;Jeder&quot;, &quot;kennt&quot;, &quot;die&quot;, &quot;Geschichten&quot;, &quot;von&quot;, &quot;berühmten&quot;, &quot;Schauspielern,&quot;, &quot;die&quot;, &quot;vor&quot;, &quot;ihrem&quot;, &quot;Durchbruch&quot;, &quot;als&quot;, &quot;Nachtportiers&quot;, &quot;oder&quot;, &quot;Kofferträger&quot;, &quot;ihre&quot;, &quot;Dollars&quot;, &quot;verdienen&quot;, &quot;mussten.&quot;, &quot;Neun&quot;, &quot;Jahre&quot;, &quot;hat&quot;, &quot;Vin&quot;, &quot;Diesel&quot;, &quot;in&quot;, &quot;einem&quot;, &quot;Club&quot;, &quot;als&quot;, &quot;Türsteher&quot;, &quot;gejobbt,&quot;, &quot;dann&quot;, &quot;kam&quot;, &quot;der&quot;, &quot;plötzliche&quot;, &quot;Ruhm&quot;, &quot;mit&quot;, &quot;\&quot;The&quot;, &quot;Fast&quot;, &quot;And&quot;, &quot;The&quot;, &quot;Furious\&quot;.&quot;, &quot;Selbst&quot;, &quot;Whoopie&quot;, &quot;Goldberg&quot;, &quot;hat&quot;, &quot;in&quot;, &quot;früheren&quot;, &quot;Jahren&quot;, &quot;ihren&quot;, &quot;Unterhalt&quot;, &quot;als&quot;, &quot;Leichenkosmetikerin&quot;, &quot;verdient.&quot;, &quot;Geschichten&quot;, &quot;wie&quot;, &quot;diese&quot;, &quot;geben&quot;, &quot;vielen&quot;, &quot;arbeitslosen&quot;, &quot;Schauspielern&quot;, &quot;Hoffnung.&quot;, &quot;Nina&quot;, &quot;Franoszek&quot;, &quot;kann&quot;, &quot;immerhin&quot;, &quot;von&quot;, &quot;ihren&quot;, &quot;europäischen&quot;, &quot;Gagen&quot;, &quot;in&quot;, &quot;Kalifornien&quot;, &quot;leben&quot;, &quot;und&quot;, &quot;auf&quot;, &quot;Rollen&quot;, &quot;hoffen.&quot;, &quot;Als&quot;, &quot;junge&quot;, &quot;Darstellerin&quot;, &quot;wollte&quot;, &quot;sie&quot;, &quot;jedoch&quot;, &quot;oft&quot;, &quot;aufhören&quot;, &quot;und&quot;, &quot;einen&quot;, &quot;ernsten&quot;, &quot;Beruf&quot;, &quot;ausüben.&quot;, &quot;Sie&quot;, &quot;träumte&quot;, &quot;davon&quot;, &quot;für&quot;, &quot;das&quot;, &quot;Magazin&quot;, &quot;\&quot;Geo\&quot;&quot;, &quot;Reportagen&quot;, &quot;aus&quot;, &quot;der&quot;, &quot;weiten&quot;, &quot;Welt&quot;, &quot;zu&quot;, &quot;schreiben.&quot;, &quot;Doch&quot;, &quot;immer&quot;, &quot;wieder&quot;, &quot;hat&quot;, &quot;sie&quot;, &quot;sich&quot;, &quot;neue&quot;, &quot;Rollen&quot;, &quot;aufquatschen&quot;, &quot;lassen.&quot;, &quot;Und&quot;, &quot;nun&quot;, &quot;denkt&quot;, &quot;sie&quot;, &quot;darüber&quot;, &quot;nach&quot;, &quot;wie&quot;, &quot;es&quot;, &quot;weitergehen&quot;, &quot;soll.&quot;, &quot;Vor&quot;, &quot;der&quot;, &quot;Kamera,&quot;, &quot;dahinter,&quot;, &quot;oder&quot;, &quot;ganz&quot;, &quot;anders?&quot;];&amp;#10;var t1_09 = [&quot;Beim&quot;, &quot;Anblick&quot;, &quot;der&quot;, &quot;Tiere&quot;, &quot;wird&quot;, &quot;klar,&quot;, &quot;warum&quot;, &quot;die&quot;, &quot;Seeleute&quot;, &quot;vergangener&quot;, &quot;Jahrhunderte&quot;, &quot;Angst&quot;, &quot;vor&quot;, &quot;Seeungeheuern&quot;, &quot;hatten.&quot;, &quot;Meterlange&quot;, &quot;Fangarme,&quot;, &quot;spitze&quot;, &quot;Mäuler&quot;, &quot;und&quot;, &quot;riesige&quot;, &quot;Augen&quot;, &quot;verleihen&quot;, &quot;den&quot;, &quot;großen&quot;, &quot;Kalmaren&quot;, &quot;ein&quot;, &quot;furchterregendes&quot;, &quot;Aussehen.&quot;, &quot;Vor&quot;, &quot;der&quot;, &quot;Küste&quot;, &quot;Chiles&quot;, &quot;sind&quot;, &quot;sie&quot;, &quot;aktuell&quot;, &quot;in&quot;, &quot;Massen&quot;, &quot;zu&quot;, &quot;sehen.&quot;, &quot;Hunderte&quot;, &quot;von&quot;, &quot;riesigen&quot;, &quot;Tintenfischen&quot;, &quot;schwimmen&quot;, &quot;in&quot;, &quot;den&quot;, &quot;flachen&quot;, &quot;Gewässern&quot;, &quot;und&quot;, &quot;fressen&quot;, &quot;dort&quot;, &quot;die&quot;, &quot;Fische.&quot;, &quot;Normalerweise&quot;, &quot;sind&quot;, &quot;die&quot;, &quot;großen&quot;, &quot;Kalmare&quot;, &quot;nur&quot;, &quot;schwer&quot;, &quot;zu&quot;, &quot;beobachten.&quot;, &quot;Sie&quot;, &quot;leben&quot;, &quot;eigentlich&quot;, &quot;im&quot;, &quot;offenen&quot;, &quot;Meer.&quot;, &quot;Nur&quot;, &quot;nachts&quot;, &quot;kommen&quot;, &quot;sie&quot;, &quot;an&quot;, &quot;die&quot;, &quot;Oberfläche,&quot;, &quot;um&quot;, &quot;kleine&quot;, &quot;Fische&quot;, &quot;zu&quot;, &quot;jagen.&quot;, &quot;Seit&quot;, &quot;zwei&quot;, &quot;Wochen&quot;, &quot;aber&quot;, &quot;sind&quot;, &quot;sie&quot;, &quot;auch&quot;, &quot;bei&quot;, &quot;Tageslicht&quot;, &quot;vor&quot;, &quot;der&quot;, &quot;Küste&quot;, &quot;zu&quot;, &quot;sehen.&quot;, &quot;Zunächst&quot;, &quot;wurden&quot;, &quot;mehr&quot;, &quot;als&quot;, &quot;200&quot;, &quot;Kalmare&quot;, &quot;vor&quot;, &quot;einer&quot;, &quot;Insel&quot;, &quot;vor&quot;, &quot;Chile&quot;, &quot;gesichtet.&quot;, &quot;Später&quot;, &quot;wurden&quot;, &quot;dann&quot;, &quot;weitere&quot;, &quot;Kalmare&quot;, &quot;an&quot;, &quot;anderen&quot;, &quot;Orten&quot;, &quot;entlang&quot;, &quot;der&quot;, &quot;Küste&quot;, &quot;Chiles&quot;, &quot;gesichtet.&quot;, &quot;Vor&quot;, &quot;allem&quot;, &quot;für&quot;, &quot;die&quot;, &quot;Fischer&quot;, &quot;ist&quot;, &quot;das&quot;, &quot;ärgerlich.&quot;, &quot;Die&quot;, &quot;Kalmare&quot;, &quot;fressen&quot;, &quot;Hechte,&quot;, &quot;Sardinen&quot;, &quot;und&quot;, &quot;Sardellen.&quot;, &quot;Und&quot;, &quot;sie&quot;, &quot;haben&quot;, &quot;großen&quot;, &quot;Hunger.&quot;, &quot;Die&quot;, &quot;Kalmare&quot;, &quot;selbst&quot;, &quot;haben&quot;, &quot;Glück.&quot;, &quot;Sie&quot;, &quot;gelten&quot;, &quot;zwar&quot;, &quot;in&quot;, &quot;manchen&quot;, &quot;Ländern&quot;, &quot;als&quot;, &quot;Delikatesse,&quot;, &quot;werden&quot;, &quot;in&quot;, &quot;Chile&quot;, &quot;jedoch&quot;, &quot;nicht&quot;, &quot;gegessen.&quot;, &quot;Meeresbiologen&quot;, &quot;standen&quot;, &quot;wegen&quot;, &quot;des&quot;, &quot;plötzlichen&quot;, &quot;Erscheinens&quot;, &quot;der&quot;, &quot;Kalmare&quot;, &quot;zunächst&quot;, &quot;vor&quot;, &quot;einem&quot;, &quot;Rätsel.&quot;, &quot;Nun&quot;, &quot;ist&quot;, &quot;jedoch&quot;, &quot;klar,&quot;, &quot;weshalb&quot;, &quot;die&quot;, &quot;Kalmare&quot;, &quot;plötzlich&quot;, &quot;auftauchten.&quot;, &quot;Im&quot;, &quot;Februar&quot;, &quot;erwärmte&quot;, &quot;sich&quot;, &quot;das&quot;, &quot;Meer&quot;, &quot;ungewöhnlich&quot;, &quot;stark.&quot;, &quot;Es&quot;, &quot;sammelten&quot;, &quot;sich&quot;, &quot;viele&quot;, &quot;kleine&quot;, &quot;Fische&quot;, &quot;vor&quot;, &quot;der&quot;, &quot;Küste.&quot;, &quot;Die&quot;, &quot;Kalmare&quot;, &quot;wurden&quot;, &quot;dadurch&quot;, &quot;magisch&quot;, &quot;angezogen.&quot;, &quot;Die&quot;, &quot;kleinen&quot;, &quot;Fische&quot;, &quot;bedeuten&quot;, &quot;für&quot;, &quot;sie&quot;, &quot;reiche&quot;, &quot;Beute.&quot;, &quot;Für&quot;, &quot;Forscher&quot;, &quot;ist&quot;, &quot;das&quot;, &quot;ein&quot;, &quot;außergewöhnlicher&quot;, &quot;Glücksfall.&quot;, &quot;Normalerweise&quot;, &quot;sind&quot;, &quot;die&quot;, &quot;großen&quot;, &quot;Kalmare&quot;, &quot;so&quot;, &quot;schwer&quot;, &quot;vor&quot;, &quot;die&quot;, &quot;Kamera&quot;, &quot;zu&quot;, &quot;bekommen,&quot;, &quot;dass&quot;, &quot;Meeresbiologen&quot;, &quot;teilweise&quot;, &quot;auf&quot;, &quot;seltsame&quot;, &quot;Ideen&quot;, &quot;kommen.&quot;, &quot;Ein&quot;, &quot;Biologe&quot;, &quot;aus&quot;, &quot;Neuseeland&quot;, &quot;etwa&quot;, &quot;will&quot;, &quot;versuchen,&quot;, &quot;den&quot;, &quot;sagenumwobenen&quot;, &quot;Riesenkalmar&quot;, &quot;mit&quot;, &quot;Sexualhormonen&quot;, &quot;vor&quot;, &quot;die&quot;, &quot;Linse&quot;, &quot;zu&quot;, &quot;locken.&quot;, &quot;Der&quot;, &quot;Riesenkalmar&quot;, &quot;ist&quot;, &quot;mit&quot;, &quot;bis&quot;, &quot;zu&quot;, &quot;20&quot;, &quot;Metern&quot;, &quot;Länge&quot;, &quot;und&quot;, &quot;einer&quot;, &quot;halben&quot;, &quot;Tonne&quot;, &quot;Gewicht&quot;, &quot;das&quot;, &quot;größte&quot;, &quot;wirbellose&quot;, &quot;Tier&quot;, &quot;der&quot;, &quot;Welt.&quot;, &quot;Bisher&quot;, &quot;wurde&quot;, &quot;er&quot;, &quot;aber&quot;, &quot;noch&quot;, &quot;nie&quot;, &quot;innerhalb&quot;, &quot;seines&quot;, &quot;natürlichen&quot;, &quot;Lebensraums&quot;, &quot;gefilmt.&quot;];&amp;#10;&amp;#10;// set longer texts for main blocks&amp;#10;// --&gt; select some of them later&amp;#10;var t2_01 = [&quot;Jerry&quot;, &quot;Robinson&quot;, &quot;war&quot;, &quot;17,&quot;, &quot;als&quot;, &quot;er&quot;, &quot;die&quot;, &quot;wichtigste&quot;, &quot;Entscheidung&quot;, &quot;seines&quot;, &quot;Lebens&quot;, &quot;traf&quot;, &quot;und&quot;, &quot;möglicherweise&quot;, &quot;seinen&quot;, &quot;größten&quot;, &quot;Fehler&quot;, &quot;beging.&quot;, &quot;Statt&quot;, &quot;wie&quot;, &quot;geplant&quot;, &quot;aufs&quot;, &quot;College&quot;, &quot;zu&quot;, &quot;gehen,&quot;, &quot;ließ&quot;, &quot;er&quot;, &quot;sich&quot;, &quot;von&quot;, &quot;einem&quot;, &quot;Mann&quot;, &quot;namens&quot;, &quot;Bob&quot;, &quot;Kane&quot;, &quot;als&quot;, &quot;Zeichner&quot;, &quot;engagieren.&quot;, &quot;Das&quot;, &quot;war&quot;, &quot;im&quot;, &quot;Sommer&quot;, &quot;1939.&quot;, &quot;Kane&quot;, &quot;hatte&quot;, &quot;gerade&quot;, &quot;die&quot;, &quot;Zeichnungen&quot;, &quot;für&quot;, &quot;ein&quot;, &quot;Comicheft&quot;, &quot;abgeliefert,&quot;, &quot;in&quot;, &quot;dem&quot;, &quot;er&quot;, &quot;eine&quot;, &quot;völlig&quot;, &quot;neue&quot;, &quot;Figur&quot;, &quot;auftreten&quot;, &quot;ließ.&quot;, &quot;Er&quot;, &quot;nannte&quot;, &quot;sie&quot;, &quot;\&quot;Batman\&quot;,&quot;, &quot;erdacht&quot;, &quot;von&quot;, &quot;ihm&quot;, &quot;und&quot;, &quot;dem&quot;, &quot;Autor&quot;, &quot;Bill&quot;, &quot;Finger.&quot;, &quot;Jetzt&quot;, &quot;machte&quot;, &quot;er&quot;, &quot;Urlaub&quot;, &quot;in&quot;, &quot;den&quot;, &quot;Poconos,&quot;, &quot;einem&quot;, &quot;Ausflugsgebiet&quot;, &quot;in&quot;, &quot;Pennsylvania.&quot;, &quot;Der&quot;, &quot;untergewichtige&quot;, &quot;Jerry&quot;, &quot;Robinson&quot;, &quot;war&quot;, &quot;auf&quot;, &quot;einer&quot;, &quot;Kur&quot;, &quot;dort,&quot;, &quot;um&quot;, &quot;Gewicht&quot;, &quot;zuzulegen,&quot;, &quot;und&quot;, &quot;wollte&quot;, &quot;eigentlich&quot;, &quot;ab&quot;, &quot;Herbst&quot;, &quot;aufs&quot;, &quot;College&quot;, &quot;gehen.&quot;, &quot;Um&quot;, &quot;Bob&quot;, &quot;Kane&quot;, &quot;von&quot;, &quot;seinem&quot;, &quot;Talent&quot;, &quot;als&quot;, &quot;Zeichner&quot;, &quot;zu&quot;, &quot;überzeugen,&quot;, &quot;fertigte&quot;, &quot;Jerry&quot;, &quot;Robinson&quot;, &quot;für&quot;, &quot;ihn&quot;, &quot;ein&quot;, &quot;paar&quot;, &quot;Zeichnungen&quot;, &quot;an.&quot;, &quot;Da&quot;, &quot;er&quot;, &quot;kein&quot;, &quot;Papier&quot;, &quot;zur&quot;, &quot;Hand&quot;, &quot;hatte,&quot;, &quot;zeichnete&quot;, &quot;er&quot;, &quot;kurzerhand&quot;, &quot;auf&quot;, &quot;seiner&quot;, &quot;Jacke.&quot;, &quot;Beeindruckt&quot;, &quot;stellte&quot;, &quot;Kane&quot;, &quot;den&quot;, &quot;Jungen&quot;, &quot;für&quot;, &quot;sein&quot;, &quot;Studio&quot;, &quot;in&quot;, &quot;New&quot;, &quot;York&quot;, &quot;an.&quot;, &quot;Nach&quot;, &quot;Bob&quot;, &quot;Kane&quot;, &quot;und&quot;, &quot;dem&quot;, &quot;Autor&quot;, &quot;Bill&quot;, &quot;Finger&quot;, &quot;war&quot;, &quot;der&quot;, &quot;minderjährige&quot;, &quot;Jerry&quot;, &quot;Robinson&quot;, &quot;damit&quot;, &quot;der&quot;, &quot;dritte&quot;, &quot;Mann&quot;, &quot;im&quot;, &quot;Batman-Team.&quot;, &quot;Bereits&quot;, &quot;ab&quot;, &quot;der&quot;, &quot;dritten&quot;, &quot;Ausgabe&quot;, &quot;der&quot;, &quot;Batman-Comics&quot;, &quot;war&quot;, &quot;er&quot;, &quot;der&quot;, &quot;Hauptzeichner&quot;, &quot;der&quot;, &quot;Serie.&quot;, &quot;Er&quot;, &quot;war&quot;, &quot;ein&quot;, &quot;besserer&quot;, &quot;Zeichner&quot;, &quot;als&quot;, &quot;Kane&quot;, &quot;und&quot;, &quot;schaffte&quot;, &quot;es,&quot;, &quot;Batmans&quot;, &quot;Abenteuer&quot;, &quot;professioneller&quot;, &quot;aussehen&quot;, &quot;zu&quot;, &quot;lassen.&quot;, &quot;Seine&quot;, &quot;Zeichnungen&quot;, &quot;fertigte&quot;, &quot;er&quot;, &quot;vor&quot;, &quot;allem&quot;, &quot;nachts&quot;, &quot;an.&quot;, &quot;Tagsüber&quot;, &quot;studierte&quot;, &quot;er&quot;, &quot;Journalistik&quot;, &quot;in&quot;, &quot;New&quot;, &quot;York.&quot;, &quot;Doch&quot;, &quot;nicht&quot;, &quot;nur&quot;, &quot;bei&quot;, &quot;der&quot;, &quot;Gestaltung&quot;, &quot;der&quot;, &quot;Hefte&quot;, &quot;machte&quot;, &quot;sich&quot;, &quot;Robinsons&quot;, &quot;Einfluss&quot;, &quot;bemerkbar.&quot;, &quot;Auch&quot;, &quot;bei&quot;, &quot;der&quot;, &quot;Entwicklung&quot;, &quot;der&quot;, &quot;Figuren&quot;, &quot;tat&quot;, &quot;er&quot;, &quot;sich&quot;, &quot;hervor.&quot;, &quot;Von&quot;, &quot;ihm&quot;, &quot;stammten&quot;, &quot;die&quot;, &quot;Entwürfe&quot;, &quot;für&quot;, &quot;Batmans&quot;, &quot;Butler&quot;, &quot;Alfred&quot;, &quot;und&quot;, &quot;den&quot;, &quot;jugendlichen&quot;, &quot;Helfer&quot;, &quot;Robin.&quot;, &quot;Letzterer&quot;, &quot;wurde&quot;, &quot;nach&quot;, &quot;Robin&quot;, &quot;Hood&quot;, &quot;benannt.&quot;, &quot;Der&quot;, &quot;erste&quot;, &quot;Auftritt&quot;, &quot;von&quot;, &quot;Robin&quot;, &quot;im&quot;, &quot;April&quot;, &quot;1940&quot;, &quot;verdoppelte&quot;, &quot;die&quot;, &quot;verkaufte&quot;, &quot;Auflage&quot;, &quot;der&quot;, &quot;\&quot;Batman\&quot;-Comics&quot;, &quot;schlagartig.&quot;, &quot;Fast&quot;, &quot;zeitgleich&quot;, &quot;hatte&quot;, &quot;der&quot;, &quot;Joker,&quot;, &quot;Batmans&quot;, &quot;Erzfeind,&quot;, &quot;seinen&quot;, &quot;ersten&quot;, &quot;Auftritt&quot;, &quot;in&quot;, &quot;einem&quot;, &quot;weiteren&quot;, &quot;Batman-Heft.&quot;, &quot;Robinson&quot;, &quot;behauptete&quot;, &quot;später,&quot;, &quot;die&quot;, &quot;Idee&quot;, &quot;zur&quot;, &quot;Figur&quot;, &quot;des&quot;, &quot;Jokers&quot;, &quot;sei&quot;, &quot;von&quot;, &quot;ihm&quot;, &quot;ausgegangen.&quot;, &quot;Zu&quot;, &quot;dieser&quot;, &quot;Zeit&quot;, &quot;gestaltete&quot;, &quot;er&quot;, &quot;die&quot;, &quot;Comics&quot;, &quot;allein&quot;, &quot;mit&quot;, &quot;Finger&quot;, &quot;und&quot;, &quot;Kane&quot;, &quot;in&quot;, &quot;einer&quot;, &quot;Wohnung&quot;, &quot;in&quot;, &quot;der&quot;, &quot;New&quot;, &quot;Yorker&quot;, &quot;Bronx.&quot;, &quot;Inspiriert&quot;, &quot;wurde&quot;, &quot;er&quot;, &quot;dabei&quot;, &quot;durch&quot;, &quot;ein&quot;, &quot;Kartenspiel,&quot;, &quot;das&quot;, &quot;die&quot;, &quot;Männer&quot;, &quot;immer&quot;, &quot;zur&quot;, &quot;Hand&quot;, &quot;hatten.&quot;, &quot;Sein&quot;, &quot;Hintergedanke&quot;, &quot;war,&quot;, &quot;einen&quot;, &quot;Gegner&quot;, &quot;zu&quot;, &quot;schaffen,&quot;, &quot;der&quot;, &quot;gefährlicher&quot;, &quot;war&quot;, &quot;als&quot;, &quot;die&quot;, &quot;üblichen&quot;, &quot;Bankräuber&quot;, &quot;und&quot;, &quot;irren&quot;, &quot;Grafen,&quot;, &quot;die&quot;, &quot;Batman&quot;, &quot;bis&quot;, &quot;zu&quot;, &quot;diesem&quot;, &quot;Zeitpunkt&quot;, &quot;fast&quot;, &quot;ausschließlich&quot;, &quot;bekämpft&quot;, &quot;hatte.&quot;, &quot;Laut&quot;, &quot;Bob&quot;, &quot;Kane&quot;, &quot;beruht&quot;, &quot;der&quot;, &quot;Entwurf&quot;, &quot;des&quot;, &quot;berühmten&quot;, &quot;Schurken&quot;, &quot;dagegen&quot;, &quot;auf&quot;, &quot;einem&quot;, &quot;Szenenfoto&quot;, &quot;aus&quot;, &quot;dem&quot;, &quot;Stummfilm&quot;, &quot;\&quot;The&quot;, &quot;Man&quot;, &quot;Who&quot;, &quot;Laughs\&quot;.&quot;, &quot;Gedacht&quot;, &quot;war&quot;, &quot;die&quot;, &quot;Figur&quot;, &quot;lediglich&quot;, &quot;für&quot;, &quot;einen&quot;, &quot;einzigen&quot;, &quot;Auftritt.&quot;, &quot;\&quot;Robinson&quot;, &quot;hatte&quot;, &quot;nichts&quot;, &quot;damit&quot;, &quot;zu&quot;, &quot;tun\&quot;,&quot;, &quot;war&quot;, &quot;sein&quot;, &quot;drastisches&quot;, &quot;Urteil.&quot;, &quot;Hier&quot;, &quot;rächte&quot;, &quot;es&quot;, &quot;sich,&quot;, &quot;dass&quot;, &quot;Jerry&quot;, &quot;Robinson,&quot;, &quot;obwohl&quot;, &quot;er&quot;, &quot;einen&quot;, &quot;Großteil&quot;, &quot;der&quot;, &quot;Comics&quot;, &quot;zeichnete,&quot;, &quot;lediglich&quot;, &quot;als&quot;, &quot;Assistent&quot;, &quot;engagiert&quot;, &quot;war.&quot;, &quot;Kane&quot;, &quot;dagegen&quot;, &quot;hatte&quot;, &quot;sich&quot;, &quot;vertraglich&quot;, &quot;alle&quot;, &quot;Rechte&quot;, &quot;an&quot;, &quot;sämtlichen&quot;, &quot;Figuren&quot;, &quot;aus&quot;, &quot;den&quot;, &quot;Batman-Comics&quot;, &quot;zugesichert.&quot;, &quot;Hinzu&quot;, &quot;kommt,&quot;, &quot;dass&quot;, &quot;die&quot;, &quot;drei&quot;, &quot;Männer&quot;, &quot;die&quot;, &quot;Arbeit&quot;, &quot;in&quot;, &quot;ihrem&quot;, &quot;Studio&quot;, &quot;allein&quot;, &quot;erledigten.&quot;, &quot;Insofern&quot;, &quot;gab&quot;, &quot;es&quot;, &quot;keine&quot;, &quot;weiteren&quot;, &quot;Zeugen&quot;, &quot;für&quot;, &quot;die&quot;, &quot;Erfindung&quot;, &quot;des&quot;, &quot;Jokers.&quot;, &quot;Nicht&quot;, &quot;zuletzt&quot;, &quot;deshalb&quot;, &quot;begann&quot;, &quot;Jerry&quot;, &quot;Robinson&quot;, &quot;ab&quot;, &quot;1940&quot;, &quot;nicht&quot;, &quot;mehr&quot;, &quot;für&quot;, &quot;Kane,&quot;, &quot;sondern&quot;, &quot;für&quot;, &quot;den&quot;, &quot;Comicverlag&quot;, &quot;direkt&quot;, &quot;zu&quot;, &quot;arbeiten.&quot;, &quot;In&quot;, &quot;dessen&quot;, &quot;Studio&quot;, &quot;saß&quot;, &quot;er&quot;, &quot;zeitweise&quot;, &quot;neben&quot;, &quot;\&quot;Superman\&quot;-Miterfinder&quot;, &quot;Joe&quot;, &quot;Shuster&quot;, &quot;und&quot;, &quot;dem&quot;, &quot;späteren&quot;, &quot;Marvel-Zeichner&quot;, &quot;Jack&quot;, &quot;Kirby&quot;, &quot;in&quot;, &quot;einer&quot;, &quot;Reihe&quot;, &quot;am&quot;, &quot;Zeichentisch.&quot;, &quot;Bis&quot;, &quot;1947&quot;, &quot;zeichnete&quot;, &quot;er&quot;, &quot;Batman&quot;, &quot;und&quot;, &quot;andere&quot;, &quot;Superhelden,&quot;, &quot;ehe&quot;, &quot;er&quot;, &quot;sich&quot;, &quot;auf&quot;, &quot;Western-&quot;, &quot;und&quot;, &quot;Abenteuercomics&quot;, &quot;verlegte.&quot;, &quot;Später&quot;, &quot;arbeitete&quot;, &quot;er&quot;, &quot;als&quot;, &quot;politischer&quot;, &quot;Karikaturist&quot;, &quot;und&quot;, &quot;zeichnete&quot;, &quot;fast&quot;, &quot;ein&quot;, &quot;Jahrzehnt&quot;, &quot;lang&quot;, &quot;einen&quot;, &quot;Lehrer-Comic.&quot;, &quot;Erst&quot;, &quot;in&quot;, &quot;den&quot;, &quot;siebziger&quot;, &quot;Jahren&quot;, &quot;näherte&quot;, &quot;sich&quot;, &quot;Robinson&quot;, &quot;den&quot;, &quot;Superhelden-Comics&quot;, &quot;allmählich&quot;, &quot;wieder&quot;, &quot;an.&quot;];&amp;#10;var t2_02 = [&quot;Es&quot;, &quot;findet&quot;, &quot;sich&quot;, &quot;fast&quot;, &quot;versteckt,&quot;, &quot;in&quot;, &quot;einem&quot;, &quot;Regal&quot;, &quot;im&quot;, &quot;ersten&quot;, &quot;Obergeschoss.&quot;, &quot;Halb&quot;, &quot;verborgen&quot;, &quot;zwischen&quot;, &quot;\&quot;Giraffen&quot;, &quot;können&quot;, &quot;nicht&quot;, &quot;tanzen\&quot;&quot;, &quot;und&quot;, &quot;\&quot;Dinosaurier&quot;, &quot;lieben&quot;, &quot;Unterhosen\&quot;.&quot;, &quot;Die&quot;, &quot;Präsentation&quot;, &quot;ist&quot;, &quot;unauffällig,&quot;, &quot;ohne&quot;, &quot;Werbung.&quot;, &quot;Wer&quot;, &quot;Barack&quot;, &quot;Obamas&quot;, &quot;neuestes&quot;, &quot;Buch&quot;, &quot;sucht,&quot;, &quot;muss&quot;, &quot;sich&quot;, &quot;schon&quot;, &quot;anstrengen.&quot;, &quot;Der&quot;, &quot;Autor,&quot;, &quot;hauptberuflich&quot;, &quot;Präsident&quot;, &quot;der&quot;, &quot;Vereinigten&quot;, &quot;Staaten,&quot;, &quot;geht&quot;, &quot;nicht&quot;, &quot;auf&quot;, &quot;Lesereise.&quot;, &quot;Er&quot;, &quot;tingelt&quot;, &quot;auch&quot;, &quot;nicht&quot;, &quot;durch&quot;, &quot;die&quot;, &quot;Talkshows,&quot;, &quot;lässt&quot;, &quot;sich&quot;, &quot;zu&quot;, &quot;seinem&quot;, &quot;Buch&quot;, &quot;nicht&quot;, &quot;interviewen.&quot;, &quot;Obamas&quot;, &quot;neues&quot;, &quot;Buch&quot;, &quot;ist&quot;, &quot;eher&quot;, &quot;geräuschlos&quot;, &quot;in&quot;, &quot;die&quot;, &quot;Läden&quot;, &quot;gekommen.&quot;, &quot;Denn&quot;, &quot;\&quot;Of&quot;, &quot;Thee&quot;, &quot;I&quot;, &quot;Sing\&quot;&quot;, &quot;ist&quot;, &quot;ein&quot;, &quot;Bilderbuch&quot;, &quot;für&quot;, &quot;Kinder.&quot;, &quot;Es&quot;, &quot;ist&quot;, &quot;gerade&quot;, &quot;mal&quot;, &quot;31&quot;, &quot;Seiten&quot;, &quot;stark,&quot;, &quot;mit&quot;, &quot;großer&quot;, &quot;Schrift&quot;, &quot;und&quot;, &quot;im&quot;, &quot;großen&quot;, &quot;Format&quot;, &quot;gedruckt.&quot;, &quot;Es&quot;, &quot;ist&quot;, &quot;ein&quot;, &quot;\&quot;Brief\&quot;&quot;, &quot;an&quot;, &quot;seine&quot;, &quot;Töchter&quot;, &quot;Malia&quot;, &quot;und&quot;, &quot;Sasha.&quot;, &quot;Auf&quot;, &quot;den&quot;, &quot;ersten&quot;, &quot;Blick&quot;, &quot;jedenfalls.&quot;, &quot;Obama&quot;, &quot;hat&quot;, &quot;ein&quot;, &quot;einfaches,&quot;, &quot;elegant&quot;, &quot;illustriertes&quot;, &quot;Buch&quot;, &quot;über&quot;, &quot;amerikanische&quot;, &quot;Ideale&quot;, &quot;geschrieben.&quot;, &quot;Es&quot;, &quot;handelt&quot;, &quot;von&quot;, &quot;dreizehn&quot;, &quot;historischen&quot;, &quot;Figuren,&quot;, &quot;an&quot;, &quot;denen&quot;, &quot;sich&quot;, &quot;die&quot;, &quot;Kinder&quot;, &quot;und&quot;, &quot;ihre&quot;, &quot;Eltern&quot;, &quot;ein&quot;, &quot;Vorbild&quot;, &quot;nehmen&quot;, &quot;sollten.&quot;, &quot;Seine&quot;, &quot;Geschichten&quot;, &quot;handeln&quot;, &quot;etwa&quot;, &quot;von&quot;, &quot;Abraham&quot;, &quot;Lincoln,&quot;, &quot;Martin&quot;, &quot;Luther&quot;, &quot;King&quot;, &quot;oder&quot;, &quot;dem&quot;, &quot;Sioux-Häuptling&quot;, &quot;Sitting&quot;, &quot;Bull.&quot;, &quot;Doch&quot;, &quot;das&quot;, &quot;reale&quot;, &quot;Amerika&quot;, &quot;ist&quot;, &quot;heute&quot;, &quot;weit&quot;, &quot;von&quot;, &quot;Obamas&quot;, &quot;Idealen&quot;, &quot;entfernt.&quot;, &quot;Präsident&quot;, &quot;Obama&quot;, &quot;will&quot;, &quot;mit&quot;, &quot;seinem&quot;, &quot;Buch&quot;, &quot;den&quot;, &quot;Kindern&quot;, &quot;Werte&quot;, &quot;wie&quot;, &quot;Besonnenheit&quot;, &quot;und&quot;, &quot;Toleranz&quot;, &quot;vermitteln,&quot;, &quot;seine&quot;, &quot;Kritiker&quot;, &quot;reagieren&quot;, &quot;aber&quot;, &quot;wie&quot;, &quot;auf&quot;, &quot;Kommando&quot;, &quot;mit&quot;, &quot;Hysterie.&quot;, &quot;Dabei&quot;, &quot;war&quot;, &quot;schon&quot;, &quot;vorher&quot;, &quot;klar,&quot;, &quot;dass&quot;, &quot;Obama&quot;, &quot;selbst&quot;, &quot;mit&quot;, &quot;einem&quot;, &quot;Kinderbuch&quot;, &quot;keine&quot;, &quot;positiven&quot;, &quot;Reaktionen&quot;, &quot;hervorrufen&quot;, &quot;würde.&quot;, &quot;Schließlich&quot;, &quot;ist&quot;, &quot;er&quot;, &quot;zurzeit&quot;, &quot;Amerikas&quot;, &quot;Prügelknabe&quot;, &quot;Nummer&quot;, &quot;eins.&quot;, &quot;Der&quot;, &quot;Lieblingsfeind&quot;, &quot;der&quot;, &quot;Rechten&quot;, &quot;und&quot;, &quot;der&quot;, &quot;Linken.&quot;, &quot;Ein&quot;, &quot;Sündenbock&quot;, &quot;für&quot;, &quot;alles,&quot;, &quot;was&quot;, &quot;gerade&quot;, &quot;schiefläuft.&quot;, &quot;Kein&quot;, &quot;Wunder&quot;, &quot;also,&quot;, &quot;dass&quot;, &quot;auch&quot;, &quot;in&quot;, &quot;sein&quot;, &quot;neuestes&quot;, &quot;Buch&quot;, &quot;alle&quot;, &quot;möglichen&quot;, &quot;Motive&quot;, &quot;hineingelesen&quot;, &quot;werden.&quot;, &quot;Getarnte&quot;, &quot;Rede&quot;, &quot;an&quot;, &quot;die&quot;, &quot;Nation?&quot;, &quot;Sentimentale&quot;, &quot;Erinnerung&quot;, &quot;an&quot;, &quot;die&quot;, &quot;eigenen&quot;, &quot;Erfolge?&quot;, &quot;Dabei&quot;, &quot;ist&quot;, &quot;Obamas&quot;, &quot;Kinderbuch&quot;, &quot;kaum&quot;, &quot;mehr&quot;, &quot;als&quot;, &quot;eine&quot;, &quot;Mixtur&quot;, &quot;anrührender&quot;, &quot;Nationaltugenden,&quot;, &quot;vermischt&quot;, &quot;mit&quot;, &quot;amerikanischen&quot;, &quot;Helden:&quot;, &quot;George&quot;, &quot;Washington&quot;, &quot;ist&quot;, &quot;\&quot;patriotisch\&quot;.&quot;, &quot;Albert&quot;, &quot;Einstein&quot;, &quot;ist&quot;, &quot;\&quot;klug\&quot;.&quot;, &quot;Der&quot;, &quot;schwarze&quot;, &quot;Baseball-Pionier&quot;, &quot;Jackie&quot;, &quot;Robinson&quot;, &quot;ist&quot;, &quot;\&quot;tapfer\&quot;.&quot;, &quot;Neil&quot;, &quot;Armstrong&quot;, &quot;ist&quot;, &quot;\&quot;abenteuerlustig\&quot;,&quot;, &quot;die&quot;, &quot;Malerin&quot;, &quot;Georgia&quot;, &quot;O'Keefe&quot;, &quot;\&quot;kreativ\&quot;&quot;, &quot;und&quot;, &quot;die&quot;, &quot;taub-blinde&quot;, &quot;Autorin&quot;, &quot;Helen&quot;, &quot;Keller&quot;, &quot;\&quot;stark\&quot;.&quot;, &quot;Über&quot;, &quot;die&quot;, &quot;Rollenbesetzung&quot;, &quot;mag&quot;, &quot;man&quot;, &quot;sich&quot;, &quot;streiten.&quot;, &quot;Die&quot;, &quot;Botschaft&quot;, &quot;aber&quot;, &quot;ist&quot;, &quot;klar.&quot;, &quot;Der&quot;, &quot;Präsident&quot;, &quot;beschwört&quot;, &quot;ein&quot;, &quot;Bild&quot;, &quot;der&quot;, &quot;USA,&quot;, &quot;das&quot;, &quot;ihn&quot;, &quot;noch&quot;, &quot;vor&quot;, &quot;zwei&quot;, &quot;Jahren&quot;, &quot;ins&quot;, &quot;Weiße&quot;, &quot;Haus&quot;, &quot;beförderte.&quot;, &quot;Ein&quot;, &quot;Amerika&quot;, &quot;der&quot;, &quot;rührseligen&quot;, &quot;Selbstlosigkeit,&quot;, &quot;ein&quot;, &quot;Amerika&quot;, &quot;einfacher&quot;, &quot;Ästhetik,&quot;, &quot;und,&quot;, &quot;in&quot;, &quot;einem&quot;, &quot;etwas&quot;, &quot;seltsamen&quot;, &quot;Eintrag&quot;, &quot;über&quot;, &quot;eine&quot;, &quot;Bildhauerin,&quot;, &quot;ein&quot;, &quot;Amerika&quot;, &quot;der&quot;, &quot;Ehrenmale.&quot;, &quot;Man&quot;, &quot;mag&quot;, &quot;es&quot;, &quot;Obama&quot;, &quot;nachsehen,&quot;, &quot;dass&quot;, &quot;er&quot;, &quot;die&quot;, &quot;rosa&quot;, &quot;Brille&quot;, &quot;aufgesetzt&quot;, &quot;hat.&quot;, &quot;Schließlich&quot;, &quot;hat&quot;, &quot;er&quot;, &quot;sein&quot;, &quot;Buch&quot;, &quot;in&quot;, &quot;den&quot;, &quot;magischen&quot;, &quot;Monaten&quot;, &quot;zwischen&quot;, &quot;Wahlsieg&quot;, &quot;und&quot;, &quot;Vereidigung&quot;, &quot;verfasst,&quot;, &quot;als&quot;, &quot;die&quot;, &quot;Nation&quot;, &quot;noch&quot;, &quot;ganz&quot;, &quot;einträchtig&quot;, &quot;zu&quot;, &quot;sein&quot;, &quot;schien.&quot;, &quot;Zuerst&quot;, &quot;war&quot;, &quot;das&quot;, &quot;Buch&quot;, &quot;eine&quot;, &quot;reine&quot;, &quot;Vertragsarbeit.&quot;, &quot;Das&quot;, &quot;dritte&quot;, &quot;von&quot;, &quot;drei&quot;, &quot;Büchern,&quot;, &quot;zu&quot;, &quot;denen&quot;, &quot;Obama&quot;, &quot;sich&quot;, &quot;in&quot;, &quot;einem&quot;, &quot;Deal&quot;, &quot;mit&quot;, &quot;dem&quot;, &quot;Verlag&quot;, &quot;Random&quot;, &quot;House&quot;, &quot;verpflichtet&quot;, &quot;hatte.&quot;, &quot;Alle&quot;, &quot;Erlöse&quot;, &quot;aus&quot;, &quot;dem&quot;, &quot;Verkauf&quot;, &quot;des&quot;, &quot;Buches&quot;, &quot;gehen&quot;, &quot;an&quot;, &quot;die&quot;, &quot;Kinder&quot;, &quot;gefallener&quot;, &quot;oder&quot;, &quot;verletzter&quot;, &quot;US-Soldaten.&quot;, &quot;Die&quot;, &quot;beiden&quot;, &quot;ersten&quot;, &quot;Bücher&quot;, &quot;von&quot;, &quot;Obama&quot;, &quot;wurden&quot;, &quot;zu&quot;, &quot;inspirierenden&quot;, &quot;Bestsellern.&quot;, &quot;Das&quot;, &quot;dritte&quot;, &quot;wirkt&quot;, &quot;nun&quot;, &quot;ungewollt&quot;, &quot;wie&quot;, &quot;ein&quot;, &quot;merkwürdiger&quot;, &quot;Appell&quot;, &quot;an&quot;, &quot;die&quot;, &quot;US-Bürger.&quot;, &quot;Als&quot;, &quot;wolle&quot;, &quot;er&quot;, &quot;alle&quot;, &quot;dazu&quot;, &quot;auffordern&quot;, &quot;sich&quot;, &quot;wieder&quot;, &quot;auf&quot;, &quot;all&quot;, &quot;das&quot;, &quot;zu&quot;, &quot;besinnen,&quot;, &quot;was&quot;, &quot;gut&quot;, &quot;sei&quot;, &quot;an&quot;, &quot;der&quot;, &quot;Nation.&quot;, &quot;\&quot;Ein&quot;, &quot;Mann&quot;, &quot;namens&quot;, &quot;Abraham&quot;, &quot;Lincoln&quot;, &quot;wusste,&quot;, &quot;dass&quot;, &quot;ganz&quot;, &quot;Amerika&quot;, &quot;zusammenarbeiten&quot;, &quot;muss\&quot;.&quot;, &quot;Obama&quot;, &quot;bezieht&quot;, &quot;sich&quot;, &quot;damit&quot;, &quot;auf&quot;, &quot;Präsident&quot;, &quot;Lincolns&quot;, &quot;flammende&quot;, &quot;Rede&quot;, &quot;über&quot;, &quot;das&quot;, &quot;\&quot;gespaltene&quot;, &quot;Haus\&quot;,&quot;, &quot;die&quot;, &quot;er&quot;, &quot;im&quot;, &quot;Jahr&quot;, &quot;1858&quot;, &quot;hielt.&quot;, &quot;Drei&quot;, &quot;Jahre&quot;, &quot;später&quot;, &quot;versank&quot;, &quot;Amerika&quot;, &quot;im&quot;, &quot;Bürgerkrieg.&quot;];&amp;#10;var t2_04 = [&quot;Unfälle&quot;, &quot;sind&quot;, &quot;Alejandro&quot;, &quot;Iñárritus&quot;, &quot;Spezialität.&quot;, &quot;In&quot;, &quot;seinem&quot;, &quot;ersten&quot;, &quot;Film&quot;, &quot;dient&quot;, &quot;ein&quot;, &quot;Vekehrsunfall&quot;, &quot;dient&quot;, &quot;ein&quot;, &quot;Verkehrsunfall&quot;, &quot;als&quot;, &quot;Aufhänger&quot;, &quot;für&quot;, &quot;die&quot;, &quot;Handlung.&quot;, &quot;Und&quot;, &quot;auch&quot;, &quot;in&quot;, &quot;seinem&quot;, &quot;zweiten&quot;, &quot;Film&quot;, &quot;ist&quot;, &quot;es&quot;, &quot;ein&quot;, &quot;Autounfall,&quot;, &quot;der&quot;, &quot;die&quot;, &quot;Figuren&quot;, &quot;zueinander&quot;, &quot;führt.&quot;, &quot;Wenn&quot;, &quot;man&quot;, &quot;die&quot;, &quot;Filme&quot;, &quot;des&quot;, &quot;Regisseurs&quot;, &quot;als&quot;, &quot;eine&quot;, &quot;Einheit&quot;, &quot;betrachtet,&quot;, &quot;dann&quot;, &quot;ist&quot;, &quot;es&quot;, &quot;nur&quot;, &quot;sinnvoll,&quot;, &quot;dass&quot;, &quot;auch&quot;, &quot;in&quot;, &quot;seinem&quot;, &quot;dritten&quot;, &quot;Film&quot;, &quot;\&quot;Babel\&quot;&quot;, &quot;ein&quot;, &quot;Unfall&quot;, &quot;den&quot;, &quot;Ausschlag&quot;, &quot;für&quot;, &quot;eine&quot;, &quot;ganze&quot;, &quot;Kette&quot;, &quot;von&quot;, &quot;Ereignissen&quot;, &quot;gibt.&quot;, &quot;Dieses&quot;, &quot;Mal&quot;, &quot;erstreckt&quot;, &quot;sich&quot;, &quot;die&quot;, &quot;Handlung&quot;, &quot;sich&quot;, &quot;jedoch&quot;, &quot;über&quot;, &quot;drei&quot;, &quot;Kontinente.&quot;, &quot;Der&quot;, &quot;Film&quot;, &quot;beginnt&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Wüste&quot;, &quot;Marokkos.&quot;, &quot;Zwei&quot;, &quot;Jungen&quot;, &quot;bekommen&quot;, &quot;von&quot;, &quot;ihrem&quot;, &quot;Vater&quot;, &quot;ein&quot;, &quot;Jagdgewehr,&quot;, &quot;mit&quot;, &quot;dem&quot;, &quot;sie&quot;, &quot;Kojoten&quot;, &quot;vertreiben&quot;, &quot;sollen.&quot;, &quot;Von&quot;, &quot;einer&quot;, &quot;Anhöhe&quot;, &quot;aus&quot;, &quot;testen&quot;, &quot;die&quot;, &quot;beiden&quot;, &quot;die&quot;, &quot;Reichweite&quot;, &quot;des&quot;, &quot;Gewehrs.&quot;, &quot;Weit&quot;, &quot;unten&quot;, &quot;auf&quot;, &quot;einer&quot;, &quot;staubigen&quot;, &quot;Straße&quot;, &quot;fährt&quot;, &quot;ein&quot;, &quot;Touristenbus,&quot;, &quot;ein&quot;, &quot;kleiner&quot;, &quot;Fremdkörper&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Wüste.&quot;, &quot;Für&quot;, &quot;die&quot;, &quot;Jungen&quot;, &quot;ist&quot;, &quot;der&quot;, &quot;Bus&quot;, &quot;die&quot;, &quot;perfekte&quot;, &quot;Zielscheibe.&quot;, &quot;Der&quot;, &quot;jüngere&quot;, &quot;Bruder&quot;, &quot;zielt,&quot;, &quot;drückt&quot;, &quot;ab,&quot;, &quot;aber&quot;, &quot;nichts&quot;, &quot;passiert.&quot;, &quot;Doch&quot;, &quot;dann&quot;, &quot;hält&quot;, &quot;der&quot;, &quot;Bus&quot;, &quot;plötzlich&quot;, &quot;an.&quot;, &quot;Die&quot;, &quot;Jungen&quot;, &quot;laufen&quot;, &quot;weg.&quot;, &quot;Kleine&quot;, &quot;Ursache,&quot;, &quot;große&quot;, &quot;Wirkung.&quot;, &quot;Im&quot;, &quot;Bus&quot;, &quot;sitzt&quot;, &quot;das&quot;, &quot;amerikanische&quot;, &quot;Ehepaar&quot;, &quot;Jones,&quot;, &quot;das&quot;, &quot;seiner&quot;, &quot;Ehekrise&quot;, &quot;mit&quot;, &quot;einer&quot;, &quot;Reise&quot;, &quot;nach&quot;, &quot;Marokko&quot;, &quot;entkommen&quot;, &quot;wollte.&quot;, &quot;Doch&quot;, &quot;trotz&quot;, &quot;der&quot;, &quot;schönen&quot;, &quot;Kulisse&quot;, &quot;herrscht&quot;, &quot;eisiges&quot;, &quot;Schweigen&quot;, &quot;zwischen&quot;, &quot;Richard&quot;, &quot;und&quot;, &quot;Susan,&quot;, &quot;gespielt&quot;, &quot;von&quot;, &quot;Brad&quot;, &quot;Pitt&quot;, &quot;und&quot;, &quot;Cate&quot;, &quot;Blanchett.&quot;, &quot;Der&quot;, &quot;Schuss&quot;, &quot;aus&quot;, &quot;dem&quot;, &quot;Gewehr&quot;, &quot;trifft&quot;, &quot;Susan&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Schulter.&quot;, &quot;Daheim&quot;, &quot;in&quot;, &quot;den&quot;, &quot;USA&quot;, &quot;hat&quot;, &quot;inzwischen&quot;, &quot;die&quot;, &quot;Kinderfrau&quot;, &quot;des&quot;, &quot;Ehepaars&quot;, &quot;ein&quot;, &quot;Problem:&quot;, &quot;Eigentlich&quot;, &quot;müsste&quot;, &quot;sie&quot;, &quot;zur&quot;, &quot;Hochzeit&quot;, &quot;ihres&quot;, &quot;Sohnes&quot;, &quot;nach&quot;, &quot;Mexiko.&quot;, &quot;Durch&quot;, &quot;Susans&quot;, &quot;Unfall&quot;, &quot;gerät&quot;, &quot;nun&quot;, &quot;allerdings&quot;, &quot;die&quot;, &quot;Babysitter-Planung&quot;, &quot;durcheinander.&quot;, &quot;Kurzerhand&quot;, &quot;entschließt&quot;, &quot;sie&quot;, &quot;sich,&quot;, &quot;die&quot;, &quot;Kinder&quot;, &quot;von&quot;, &quot;Susan&quot;, &quot;und&quot;, &quot;Richard&quot;, &quot;mit&quot;, &quot;nach&quot;, &quot;Mexiko&quot;, &quot;zu&quot;, &quot;nehmen.&quot;, &quot;Eine&quot;, &quot;verhängnisvolle&quot;, &quot;Entscheidung.&quot;, &quot;Auf&quot;, &quot;der&quot;, &quot;Rückfahrt&quot;, &quot;in&quot;, &quot;die&quot;, &quot;USA&quot;, &quot;kommt&quot;, &quot;es&quot;, &quot;zu&quot;, &quot;einem&quot;, &quot;Zwischenfall&quot;, &quot;an&quot;, &quot;der&quot;, &quot;Grenze.&quot;, &quot;In&quot;, &quot;Marokko&quot;, &quot;verläuft&quot;, &quot;die&quot;, &quot;Rettung&quot;, &quot;der&quot;, &quot;verletzten&quot;, &quot;Susan&quot;, &quot;derweil&quot;, &quot;eher&quot;, &quot;schleppend.&quot;, &quot;Richard&quot;, &quot;wird&quot;, &quot;immer&quot;, &quot;panischer.&quot;, &quot;Ein&quot;, &quot;Guide&quot;, &quot;führt&quot;, &quot;die&quot;, &quot;Reisegruppe&quot;, &quot;schließlich&quot;, &quot;mitsamt&quot;, &quot;der&quot;, &quot;Schwerverletzten&quot;, &quot;in&quot;, &quot;sein&quot;, &quot;Heimatdorf.&quot;, &quot;Dort&quot;, &quot;kümmert&quot;, &quot;sich&quot;, &quot;ein&quot;, &quot;Tierarzt&quot;, &quot;um&quot;, &quot;Susans&quot;, &quot;Verletzung.&quot;, &quot;Richard&quot;, &quot;muss&quot;, &quot;sich&quot;, &quot;mit&quot;, &quot;Händen&quot;, &quot;und&quot;, &quot;Füßen&quot;, &quot;verständigen,&quot;, &quot;um&quot;, &quot;mit&quot;, &quot;den&quot;, &quot;Dorfbewohnern&quot;, &quot;zu&quot;, &quot;kommunizieren.&quot;, &quot;Trotzdem&quot;, &quot;kommt&quot;, &quot;er&quot;, &quot;mit&quot;, &quot;den&quot;, &quot;Berbern&quot;, &quot;und&quot;, &quot;ihrer&quot;, &quot;fremden&quot;, &quot;Kultur&quot;, &quot;besser&quot;, &quot;zurecht&quot;, &quot;als&quot;, &quot;mit&quot;, &quot;seinen&quot;, &quot;Landsleuten.&quot;, &quot;Die&quot;, &quot;fürchten&quot;, &quot;nur&quot;, &quot;um&quot;, &quot;ihr&quot;, &quot;eigenes&quot;, &quot;Wohl&quot;, &quot;und&quot;, &quot;lassen&quot;, &quot;schließlich&quot;, &quot;das&quot;, &quot;Paar&quot;, &quot;ohne&quot;, &quot;den&quot;, &quot;Bus&quot;, &quot;zurück.&quot;, &quot;Vor&quot;, &quot;allem&quot;, &quot;amerikanische&quot;, &quot;Kritiker&quot;, &quot;warfen&quot;, &quot;dem&quot;, &quot;Regisseur&quot;, &quot;vor,&quot;, &quot;dass&quot;, &quot;er&quot;, &quot;sein&quot;, &quot;Publikum&quot;, &quot;mit&quot;, &quot;schönen&quot;, &quot;Bildern&quot;, &quot;und&quot;, &quot;eindrücklicher&quot;, &quot;Musik&quot;, &quot;so&quot;, &quot;ablenke,&quot;, &quot;dass&quot;, &quot;man&quot;, &quot;am&quot;, &quot;Ende&quot;, &quot;gar&quot;, &quot;nicht&quot;, &quot;merke,&quot;, &quot;dass&quot;, &quot;es&quot;, &quot;im&quot;, &quot;Grunde&quot;, &quot;um&quot;, &quot;nichts&quot;, &quot;geht&quot;, &quot;als&quot;, &quot;Missverständnisse.&quot;, &quot;Vielleicht&quot;, &quot;ist&quot;, &quot;es&quot;, &quot;aber&quot;, &quot;genau&quot;, &quot;diese&quot;, &quot;Einfachheit,&quot;, &quot;die&quot;, &quot;\&quot;Babel\&quot;&quot;, &quot;zu&quot;, &quot;einem&quot;, &quot;der&quot;, &quot;interessantesten&quot;, &quot;Filme&quot;, &quot;des&quot;, &quot;Jahres&quot;, &quot;macht.&quot;, &quot;Nach&quot;, &quot;über&quot;, &quot;zwei&quot;, &quot;Stunden&quot;, &quot;komplexer&quot;, &quot;Handlung&quot;, &quot;steht&quot;, &quot;am&quot;, &quot;Ende&quot;, &quot;die&quot;, &quot;banale&quot;, &quot;Erkenntnis,&quot;, &quot;dass&quot;, &quot;die&quot;, &quot;Menschen&quot;, &quot;sich&quot;, &quot;einfach&quot;, &quot;nicht&quot;, &quot;verstehen.&quot;, &quot;Der&quot;, &quot;Filmtitel&quot;, &quot;ist&quot;, &quot;angelehnt&quot;, &quot;an&quot;, &quot;die&quot;, &quot;Geschichte&quot;, &quot;vom&quot;, &quot;Turmbau&quot;, &quot;zu&quot;, &quot;Babel&quot;, &quot;aus&quot;, &quot;der&quot;, &quot;Bibel.&quot;, &quot;Wütend&quot;, &quot;über&quot;, &quot;die&quot;, &quot;Menschen,&quot;, &quot;die&quot;, &quot;ihren&quot;, &quot;Turm&quot;, &quot;bis&quot;, &quot;in&quot;, &quot;den&quot;, &quot;Himmel&quot;, &quot;bauen&quot;, &quot;wollen,&quot;, &quot;verwirrt&quot;, &quot;Gott&quot;, &quot;die&quot;, &quot;bisher&quot;, &quot;einheitliche&quot;, &quot;Sprache&quot;, &quot;der&quot;, &quot;Menschen&quot;, &quot;und&quot;, &quot;verstreut&quot;, &quot;sie&quot;, &quot;über&quot;, &quot;die&quot;, &quot;Erde.&quot;, &quot;Er&quot;, &quot;sorgte&quot;, &quot;so&quot;, &quot;für&quot;, &quot;die&quot;, &quot;bis&quot;, &quot;heute&quot;, &quot;herrschende&quot;, &quot;Unfähigkeit,&quot;, &quot;sich&quot;, &quot;miteinander&quot;, &quot;zu&quot;, &quot;verständigen.&quot;, &quot;Und&quot;, &quot;daran&quot;, &quot;wird&quot;, &quot;sich&quot;, &quot;wohl&quot;, &quot;kaum&quot;, &quot;etwas&quot;, &quot;ändern,&quot;, &quot;wenn&quot;, &quot;man&quot;, &quot;dem&quot;, &quot;Film&quot;, &quot;glaubt.&quot;, &quot;Und&quot;, &quot;vermittelt&quot;, &quot;der&quot;, &quot;Film&quot;, &quot;auch&quot;, &quot;Hoffnung.&quot;, &quot;Immerhin&quot;, &quot;kommen&quot;, &quot;sich&quot;, &quot;Richard&quot;, &quot;und&quot;, &quot;Susan&quot;, &quot;auf&quot;, &quot;dem&quot;, &quot;Krankenlager&quot;, &quot;wieder&quot;, &quot;näher.&quot;, &quot;Neben&quot;, &quot;den&quot;, &quot;beiden&quot;, &quot;Handlungssträngen&quot;, &quot;in&quot;, &quot;Marokko&quot;, &quot;und&quot;, &quot;den&quot;, &quot;USA&quot;, &quot;gibt&quot;, &quot;es&quot;, &quot;noch&quot;, &quot;eine&quot;, &quot;weitere&quot;, &quot;Geschichte&quot;, &quot;im&quot;, &quot;Film.&quot;, &quot;Sie&quot;, &quot;handelt&quot;, &quot;von&quot;, &quot;dem&quot;, &quot;einsamen&quot;, &quot;taubstummen&quot;, &quot;Mädchen&quot;, &quot;Chieko,&quot;, &quot;das&quot;, &quot;im&quot;, &quot;lauten&quot;, &quot;Tokyo&quot;, &quot;nach&quot;, &quot;Nähe&quot;, &quot;sucht.&quot;, &quot;Es&quot;, &quot;gibt&quot;, &quot;nur&quot;, &quot;einen&quot;, &quot;ganz&quot;, &quot;kurzen&quot;, &quot;Moment,&quot;, &quot;in&quot;, &quot;dem&quot;, &quot;sie&quot;, &quot;ganz&quot;, &quot;mit&quot;, &quot;der&quot;, &quot;Welt&quot;, &quot;im&quot;, &quot;Reinen&quot;, &quot;ist:&quot;, &quot;In&quot;, &quot;der&quot;, &quot;Disko.&quot;, &quot;Dort&quot;, &quot;ist&quot;, &quot;die&quot;, &quot;Musik&quot;, &quot;so&quot;, &quot;laut,&quot;, &quot;dass&quot;, &quot;keiner&quot;, &quot;hören&quot;, &quot;kann,&quot;, &quot;was&quot;, &quot;gesagt&quot;, &quot;wird.&quot;, &quot;Wie&quot;, &quot;Chieko&quot;, &quot;sind&quot;, &quot;auf&quot;, &quot;einmal&quot;, &quot;alle&quot;, &quot;auf&quot;, &quot;Zeichensprache&quot;, &quot;angewiesen.&quot;, &quot;Statt&quot;, &quot;sich&quot;, &quot;zu&quot;, &quot;hören,&quot;, &quot;spürt&quot;, &quot;man&quot;, &quot;sich.&quot;, &quot;Es&quot;, &quot;ist&quot;, &quot;das&quot;, &quot;versöhnlichste&quot;, &quot;Bild,&quot;, &quot;das&quot;, &quot;uns&quot;, &quot;der&quot;, &quot;Regisseur&quot;, &quot;anbietet,&quot;, &quot;der&quot;, &quot;sich&quot;, &quot;als&quot;, &quot;gelernter&quot;, &quot;Filmkomponist&quot;, &quot;mit&quot;, &quot;der&quot;, &quot;Macht&quot;, &quot;der&quot;, &quot;Musik&quot;, &quot;auskennt.&quot;, &quot;Trotz&quot;, &quot;der&quot;, &quot;Kritik&quot;, &quot;an&quot;, &quot;der&quot;, &quot;Grenzpolitik&quot;, &quot;der&quot;, &quot;Amerikaner&quot;, &quot;hatte&quot;, &quot;er&quot;, &quot;keine&quot;, &quot;Schwierigkeiten,&quot;, &quot;in&quot;, &quot;den&quot;, &quot;USA&quot;, &quot;Geld&quot;, &quot;für&quot;, &quot;seinen&quot;, &quot;Film&quot;, &quot;aufzutreiben.&quot;, &quot;Der&quot;, &quot;Regisseur&quot;, &quot;Iñárritu&quot;, &quot;war&quot;, &quot;durch&quot;, &quot;seine&quot;, &quot;beiden&quot;, &quot;vorigen&quot;, &quot;Filme&quot;, &quot;bereits&quot;, &quot;so&quot;, &quot;bekannt,&quot;, &quot;dass&quot;, &quot;selbst&quot;, &quot;Hollywood-Stars&quot;, &quot;wie&quot;, &quot;Brad&quot;, &quot;Pitt&quot;, &quot;und&quot;, &quot;Cate&quot;, &quot;Blanchett&quot;, &quot;Interesse&quot;, &quot;zeigten.&quot;, &quot;So&quot;, &quot;kommt&quot;, &quot;es,&quot;, &quot;dass&quot;, &quot;\&quot;Babel\&quot;&quot;, &quot;eine&quot;, &quot;seltsame&quot;, &quot;Mischung&quot;, &quot;ist&quot;, &quot;aus&quot;, &quot;Kunst&quot;, &quot;und&quot;, &quot;einem&quot;, &quot;Hauch&quot;, &quot;Hollywood.&quot;];&amp;#10;var t2_05 = [&quot;Es&quot;, &quot;ist&quot;, &quot;schon&quot;, &quot;eine&quot;, &quot;merkwürdige&quot;, &quot;Gruppe,&quot;, &quot;die&quot;, &quot;sich&quot;, &quot;da&quot;, &quot;mitten&quot;, &quot;in&quot;, &quot;Istanbul&quot;, &quot;in&quot;, &quot;ihrem&quot;, &quot;Mietshaus&quot;, &quot;zusammengefunden&quot;, &quot;hat:&quot;, &quot;Im&quot;, &quot;Keller&quot;, &quot;wohnt&quot;, &quot;der&quot;, &quot;Hausmeister&quot;, &quot;Musa.&quot;, &quot;Seine&quot;, &quot;Frau&quot;, &quot;ist&quot;, &quot;so&quot;, &quot;abergläubisch,&quot;, &quot;dass&quot;, &quot;sie&quot;, &quot;überall&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Wohnung&quot;, &quot;Amulette&quot;, &quot;aufgehängt&quot;, &quot;hat.&quot;, &quot;Bei&quot;, &quot;Tisch&quot;, &quot;legt&quot;, &quot;sie&quot;, &quot;stets&quot;, &quot;ein&quot;, &quot;Stück&quot;, &quot;Brot&quot;, &quot;neben&quot;, &quot;sich,&quot;, &quot;um&quot;, &quot;die&quot;, &quot;Blicke&quot;, &quot;der&quot;, &quot;Neider&quot;, &quot;zu&quot;, &quot;sättigen.&quot;, &quot;Im&quot;, &quot;Erdgeschoss&quot;, &quot;haben&quot;, &quot;die&quot;, &quot;Zwillinge&quot;, &quot;Cemal&quot;, &quot;und&quot;, &quot;Celal&quot;, &quot;ihr&quot;, &quot;Friseurgeschäft.&quot;, &quot;Daneben&quot;, &quot;wohnt&quot;, &quot;der&quot;, &quot;Hausverwalter&quot;, &quot;Hadschi&quot;, &quot;Hadschi,&quot;, &quot;der&quot;, &quot;seinen&quot;, &quot;Enkeln&quot;, &quot;oft&quot;, &quot;alte&quot;, &quot;Sagen&quot;, &quot;erzählt.&quot;, &quot;Oben&quot;, &quot;wohnt&quot;, &quot;ein&quot;, &quot;frisch&quot;, &quot;geschiedener&quot;, &quot;Akademiker,&quot;, &quot;der&quot;, &quot;mit&quot;, &quot;seiner&quot;, &quot;Nachbarin&quot;, &quot;anbändelt.&quot;, &quot;Diese&quot;, &quot;ist&quot;, &quot;jedoch&quot;, &quot;die&quot;, &quot;Geliebte&quot;, &quot;eines&quot;, &quot;Olivenöl-Händlers.&quot;, &quot;Dann&quot;, &quot;gibt&quot;, &quot;es&quot;, &quot;noch&quot;, &quot;die&quot;, &quot;Hausfrau&quot;, &quot;Nadja,&quot;, &quot;die&quot;, &quot;keine&quot;, &quot;Folge&quot;, &quot;der&quot;, &quot;TV-Seifenoper&quot;, &quot;\&quot;Oleander&quot;, &quot;der&quot;, &quot;Leidenschaft\&quot;&quot;, &quot;verpasst.&quot;, &quot;Eines&quot;, &quot;Tages&quot;, &quot;findet&quot;, &quot;sie&quot;, &quot;jedoch&quot;, &quot;heraus,&quot;, &quot;dass&quot;, &quot;ihr&quot;, &quot;Mann&quot;, &quot;ausgerechnet&quot;, &quot;mit&quot;, &quot;der&quot;, &quot;Synchronsprecherin&quot;, &quot;der&quot;, &quot;Hauptfigur&quot;, &quot;fremdgeht.&quot;, &quot;Skurril&quot;, &quot;ist&quot;, &quot;auch&quot;, &quot;die&quot;, &quot;Geschichte&quot;, &quot;des&quot;, &quot;Hauses,&quot;, &quot;das&quot;, &quot;auf&quot;, &quot;planierten&quot;, &quot;Grabfeldern&quot;, &quot;gebaut&quot;, &quot;wurde.&quot;, &quot;Von&quot;, &quot;der&quot;, &quot;Frau&quot;, &quot;des&quot;, &quot;Erbauers&quot;, &quot;wurde&quot;, &quot;es&quot;, &quot;aus&quot;, &quot;einer&quot;, &quot;Laune&quot;, &quot;heraus&quot;, &quot;Bonbonpalast&quot;, &quot;genannt,&quot;, &quot;auch&quot;, &quot;wenn&quot;, &quot;es&quot;, &quot;eher&quot;, &quot;Flohpalast&quot;, &quot;heißen&quot;, &quot;müsste.&quot;, &quot;In&quot;, &quot;diesem&quot;, &quot;verrückten&quot;, &quot;Umfeld&quot;, &quot;spielt&quot;, &quot;der&quot;, &quot;neue&quot;, &quot;Roman&quot;, &quot;der&quot;, &quot;Autorin&quot;, &quot;Elif&quot;, &quot;Shafak.&quot;, &quot;Der&quot;, &quot;Bonbonpalast&quot;, &quot;ist&quot;, &quot;ein&quot;, &quot;Symbol&quot;, &quot;für&quot;, &quot;Istanbul,&quot;, &quot;diese&quot;, &quot;schillernde&quot;, &quot;Stadt,&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Menschen&quot;, &quot;unterschiedlichster&quot;, &quot;Herkunft&quot;, &quot;zusammenleben.&quot;, &quot;In&quot;, &quot;Istanbul&quot;, &quot;lebt&quot;, &quot;auch&quot;, &quot;Elif&quot;, &quot;Shafak,&quot;, &quot;derzeit&quot;, &quot;eine&quot;, &quot;der&quot;, &quot;interessantesten&quot;, &quot;türkischen&quot;, &quot;Autorinnen.&quot;, &quot;Shafak&quot;, &quot;wuchs&quot;, &quot;in&quot;, &quot;Europa&quot;, &quot;und&quot;, &quot;Jordanien&quot;, &quot;auf,&quot;, &quot;studierte&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Türkei,&quot;, &quot;und&quot;, &quot;lebte&quot;, &quot;einige&quot;, &quot;Jahre&quot;, &quot;in&quot;, &quot;den&quot;, &quot;USA.&quot;, &quot;Diese&quot;, &quot;Biografie&quot;, &quot;spiegelt&quot;, &quot;sich&quot;, &quot;auch&quot;, &quot;in&quot;, &quot;ihren&quot;, &quot;Romanen.&quot;, &quot;Shafak&quot;, &quot;pendelt&quot;, &quot;zwischen&quot;, &quot;den&quot;, &quot;Kulturen.&quot;, &quot;Sie&quot;, &quot;ist&quot;, &quot;eine&quot;, &quot;weltgewandte&quot;, &quot;Erzählerin,&quot;, &quot;die&quot;, &quot;das&quot;, &quot;lang&quot;, &quot;verdrängte&quot;, &quot;Erbe&quot;, &quot;ihres&quot;, &quot;Landes&quot;, &quot;wiederentdeckt.&quot;, &quot;\&quot;Lange&quot;, &quot;dachten&quot;, &quot;wir,&quot;, &quot;um&quot;, &quot;so&quot;, &quot;zu&quot;, &quot;werden&quot;, &quot;wie&quot;, &quot;der&quot;, &quot;Westen,&quot;, &quot;müssten&quot;, &quot;wir&quot;, &quot;die&quot;, &quot;östliche&quot;, &quot;Seite&quot;, &quot;unserer&quot;, &quot;Kultur&quot;, &quot;abschütteln\&quot;,&quot;, &quot;bemerkt&quot;, &quot;Shafak.&quot;, &quot;Das&quot;, &quot;war&quot;, &quot;in&quot;, &quot;ihren&quot;, &quot;Augen&quot;, &quot;ein&quot;, &quot;Irrtum:&quot;, &quot;\&quot;Wir&quot;, &quot;sind&quot;, &quot;die&quot;, &quot;Enkel&quot;, &quot;des&quot;, &quot;Osmanischen&quot;, &quot;Reiches&quot;, &quot;mit&quot;, &quot;seiner&quot;, &quot;ganzen&quot;, &quot;kulturellen&quot;, &quot;Vielfalt.\&quot;&quot;, &quot;Schon&quot;, &quot;als&quot;, &quot;junges&quot;, &quot;Mädchen&quot;, &quot;fing&quot;, &quot;sie&quot;, &quot;an&quot;, &quot;zu&quot;, &quot;schreiben.&quot;, &quot;Sie&quot;, &quot;interessiert&quot;, &quot;sich&quot;, &quot;vor&quot;, &quot;allem&quot;, &quot;für&quot;, &quot;Grenzgänger&quot;, &quot;und&quot;, &quot;Menschen,&quot;, &quot;die&quot;, &quot;schräg&quot;, &quot;im&quot;, &quot;Leben&quot;, &quot;stehen.&quot;, &quot;In&quot;, &quot;ihren&quot;, &quot;Büchern&quot;, &quot;leuchtet&quot;, &quot;sie&quot;, &quot;die&quot;, &quot;Ränder&quot;, &quot;der&quot;, &quot;Gesellschaft&quot;, &quot;aus.&quot;, &quot;Sie&quot;, &quot;wagt&quot;, &quot;sich&quot;, &quot;an&quot;, &quot;Hässliches,&quot;, &quot;Peinliches&quot;, &quot;und&quot;, &quot;bricht&quot;, &quot;Tabus.&quot;, &quot;In&quot;, &quot;ihrem&quot;, &quot;neuesten&quot;, &quot;Roman&quot;, &quot;setzt&quot;, &quot;sie&quot;, &quot;sich&quot;, &quot;mit&quot;, &quot;dem&quot;, &quot;schwierigen&quot;, &quot;Thema&quot;, &quot;der&quot;, &quot;Wochenbett-Depression&quot;, &quot;auseinander.&quot;, &quot;Dabei&quot;, &quot;offenbart&quot;, &quot;sie&quot;, &quot;auch,&quot;, &quot;dass&quot;, &quot;sie&quot;, &quot;nach&quot;, &quot;der&quot;, &quot;Geburt&quot;, &quot;ihres&quot;, &quot;ersten&quot;, &quot;Kindes&quot;, &quot;selbst&quot;, &quot;darunter&quot;, &quot;litt.&quot;, &quot;Ihr&quot;, &quot;Roman&quot;, &quot;\&quot;Der&quot;, &quot;Bastard&quot;, &quot;von&quot;, &quot;Istanbul\&quot;&quot;, &quot;hingegen&quot;, &quot;brachte&quot;, &quot;ihr&quot;, &quot;den&quot;, &quot;Hass&quot;, &quot;der&quot;, &quot;türkischen&quot;, &quot;Nationalisten&quot;, &quot;ein.&quot;, &quot;Sie&quot;, &quot;kam&quot;, &quot;sogar&quot;, &quot;vor&quot;, &quot;Gericht&quot;, &quot;wegen&quot;, &quot;vermeintlicher&quot;, &quot;\&quot;Verunglimpfung&quot;, &quot;des&quot;, &quot;Türkentums\&quot;.&quot;, &quot;Als&quot;, &quot;der&quot;, &quot;Prozess&quot;, &quot;im&quot;, &quot;September&quot;, &quot;2006&quot;, &quot;stattfand,&quot;, &quot;brachte&quot;, &quot;sie&quot;, &quot;gerade&quot;, &quot;ihre&quot;, &quot;Tochter&quot;, &quot;zur&quot;, &quot;Welt.&quot;, &quot;Im&quot;, &quot;Krankenzimmer&quot;, &quot;sah&quot;, &quot;sie&quot;, &quot;die&quot;, &quot;Nachrichten&quot;, &quot;über&quot;, &quot;Proteste&quot;, &quot;vor&quot;, &quot;Gericht.&quot;, &quot;Sie&quot;, &quot;sah,&quot;, &quot;wie&quot;, &quot;Menschen&quot;, &quot;auf&quot;, &quot;ihr&quot;, &quot;Foto&quot;, &quot;spuckten&quot;, &quot;und&quot;, &quot;sie&quot;, &quot;beschimpften.&quot;, &quot;\&quot;Diese&quot;, &quot;Bilder&quot;, &quot;werde&quot;, &quot;ich&quot;, &quot;nie&quot;, &quot;vergessen\&quot;,&quot;, &quot;sagt&quot;, &quot;sie.&quot;, &quot;Sie&quot;, &quot;wurde&quot;, &quot;freigesprochen,&quot;, &quot;musste&quot;, &quot;aber&quot;, &quot;lange&quot;, &quot;Zeit&quot;, &quot;von&quot;, &quot;einem&quot;, &quot;Bodyguard&quot;, &quot;beschützt&quot;, &quot;werden.&quot;, &quot;Sie&quot;, &quot;ist&quot;, &quot;damit&quot;, &quot;nicht&quot;, &quot;allein.&quot;, &quot;So&quot;, &quot;wie&quot;, &quot;ihr&quot;, &quot;geht&quot;, &quot;es&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Türkei&quot;, &quot;vielen&quot;, &quot;Schriftstellern.&quot;, &quot;\&quot;Die&quot;, &quot;Türkei&quot;, &quot;ist&quot;, &quot;ein&quot;, &quot;Land,&quot;, &quot;in&quot;, &quot;dem&quot;, &quot;Worte&quot;, &quot;einen&quot;, &quot;in&quot;, &quot;Schwierigkeiten&quot;, &quot;bringen&quot;, &quot;können\&quot;,&quot;, &quot;sagt&quot;, &quot;die&quot;, &quot;Autorin,&quot;, &quot;\&quot;aber&quot;, &quot;gleichzeitig&quot;, &quot;ist&quot;, &quot;es&quot;, &quot;ein&quot;, &quot;so&quot;, &quot;ungemein&quot;, &quot;bereicherndes&quot;, &quot;Land.&quot;, &quot;Die&quot;, &quot;türkische&quot;, &quot;Gesellschaft&quot;, &quot;ist&quot;, &quot;bunt,&quot;, &quot;sehr&quot;, &quot;wandlungsfähig&quot;, &quot;und&quot;, &quot;zukunftsorientiert.\&quot;&quot;, &quot;Das&quot;, &quot;Buch&quot;, &quot;wurde&quot;, &quot;ein&quot;, &quot;Bestseller.&quot;, &quot;Es&quot;, &quot;ist&quot;, &quot;ein&quot;, &quot;Beweis&quot;, &quot;dafür,&quot;, &quot;dass&quot;, &quot;die&quot;, &quot;türkischen&quot;, &quot;Leser&quot;, &quot;kritische,&quot;, &quot;fortschrittliche&quot;, &quot;Bücher&quot;, &quot;zu&quot;, &quot;schätzen&quot;, &quot;wissen&quot;, &quot;und&quot;, &quot;sich&quot;, &quot;von&quot;, &quot;den&quot;, &quot;offiziellen&quot;, &quot;Tabus&quot;, &quot;nicht&quot;, &quot;beschränken&quot;, &quot;lassen.&quot;, &quot;Überhaupt&quot;, &quot;ist&quot;, &quot;Elif&quot;, &quot;Shafak&quot;, &quot;eine&quot;, &quot;sehr&quot;, &quot;beliebte&quot;, &quot;Autorin&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Türkei.&quot;, &quot;Sie&quot;, &quot;schreibt&quot;, &quot;für&quot;, &quot;Zeitungen&quot;, &quot;und&quot;, &quot;hat&quot;, &quot;sich&quot;, &quot;auch&quot;, &quot;schon&quot;, &quot;politisch&quot;, &quot;engagiert,&quot;, &quot;etwa&quot;, &quot;für&quot;, &quot;Schwule&quot;, &quot;oder&quot;, &quot;Minderheiten.&quot;, &quot;\&quot;Ein&quot;, &quot;türkischer&quot;, &quot;Schriftsteller&quot;, &quot;hat&quot;, &quot;nicht&quot;, &quot;den&quot;, &quot;Luxus,&quot;, &quot;unpolitisch&quot;, &quot;zu&quot;, &quot;sein\&quot;.&quot;, &quot;Doch&quot;, &quot;seit&quot;, &quot;ihrem&quot;, &quot;Prozess&quot;, &quot;und&quot;, &quot;den&quot;, &quot;Drohungen&quot;, &quot;der&quot;, &quot;Nationalisten&quot;, &quot;ist&quot;, &quot;sie&quot;, &quot;stiller&quot;, &quot;geworden.&quot;, &quot;Elif&quot;, &quot;Shafak&quot;, &quot;ist&quot;, &quot;eine&quot;, &quot;der&quot;, &quot;wenigen&quot;, &quot;türkischen&quot;, &quot;Linken,&quot;, &quot;die&quot;, &quot;sich&quot;, &quot;für&quot;, &quot;Religion&quot;, &quot;begeistern.&quot;, &quot;Immer&quot;, &quot;wieder&quot;, &quot;tauchen&quot;, &quot;in&quot;, &quot;ihren&quot;, &quot;Geschichten&quot;, &quot;Derwische&quot;, &quot;auf.&quot;, &quot;Auch&quot;, &quot;Dschinns&quot;, &quot;bevölkern&quot;, &quot;ihre&quot;, &quot;Geschichten.&quot;, &quot;Im&quot;, &quot;\&quot;Bonbonpalast\&quot;&quot;, &quot;etwa&quot;, &quot;lebt&quot;, &quot;ein&quot;, &quot;kleiner,&quot;, &quot;seltsamer&quot;, &quot;Junge,&quot;, &quot;den&quot;, &quot;sein&quot;, &quot;Großvater&quot;, &quot;für&quot;, &quot;einen&quot;, &quot;Dschinn&quot;, &quot;hält.&quot;, &quot;Neben&quot;, &quot;dem&quot;, &quot;Schreiben&quot;, &quot;verfolgt&quot;, &quot;Elif&quot;, &quot;Shafak&quot;, &quot;ihre&quot;, &quot;akademische&quot;, &quot;Karriere.&quot;, &quot;Die&quot;, &quot;studierte&quot;, &quot;Politologin&quot;, &quot;schrieb&quot;, &quot;ihre&quot;, &quot;Doktorarbeit&quot;, &quot;über&quot;, &quot;die&quot;, &quot;Modernisierung&quot;, &quot;der&quot;, &quot;Türkei.&quot;, &quot;Ihre&quot;, &quot;Bildung&quot;, &quot;ist&quot;, &quot;in&quot;, &quot;ihren&quot;, &quot;Romanen&quot;, &quot;nicht&quot;, &quot;zu&quot;, &quot;verkennen.&quot;, &quot;Der&quot;, &quot;Ich-Erzähler&quot;, &quot;im&quot;, &quot;\&quot;Bonbonpalast\&quot;&quot;, &quot;ist&quot;, &quot;ein&quot;, &quot;Dozent&quot;, &quot;für&quot;, &quot;politische&quot;, &quot;Philosophie.&quot;, &quot;Gleich&quot;, &quot;zu&quot;, &quot;Beginn&quot;, &quot;des&quot;, &quot;Romans&quot;, &quot;diskutiert&quot;, &quot;er&quot;, &quot;die&quot;, &quot;Grenze&quot;, &quot;zwischen&quot;, &quot;Wahrheit,&quot;, &quot;Ersponnenem&quot;, &quot;und&quot;, &quot;Lüge.&quot;, &quot;Die&quot;, &quot;Romane&quot;, &quot;Shafaks&quot;, &quot;spielen&quot;, &quot;hauptsächlich&quot;, &quot;in&quot;, &quot;Istanbul.&quot;, &quot;Wer&quot;, &quot;ein&quot;, &quot;ruhiges&quot;, &quot;Leben&quot;, &quot;leben&quot;, &quot;will,&quot;, &quot;für&quot;, &quot;den&quot;, &quot;ist&quot;, &quot;es&quot;, &quot;sicher&quot;, &quot;nicht&quot;, &quot;der&quot;, &quot;richtige&quot;, &quot;Platz.&quot;, &quot;Aber&quot;, &quot;für&quot;, &quot;Schriftsteller&quot;, &quot;sei&quot;, &quot;die&quot;, &quot;Stadt&quot;, &quot;ein&quot;, &quot;Traum:&quot;, &quot;Anregend,&quot;, &quot;widersprüchlich,&quot;, &quot;voller&quot;, &quot;Geschichten.&quot;, &quot;Wenn&quot;, &quot;sie&quot;, &quot;noch&quot;, &quot;einmal&quot;, &quot;auf&quot;, &quot;die&quot;, &quot;Welt&quot;, &quot;kommen&quot;, &quot;könnte,&quot;, &quot;wie&quot;, &quot;und&quot;, &quot;wo&quot;, &quot;sie&quot;, &quot;wolle,&quot;, &quot;hätte&quot;, &quot;sie&quot;, &quot;sich&quot;, &quot;erneut&quot;, &quot;für&quot;, &quot;ein&quot;, &quot;Leben&quot;, &quot;in&quot;, &quot;Istanbul&quot;, &quot;entschieden.&quot;, &quot;Aber&quot;, &quot;dieses&quot;, &quot;Mal&quot;, &quot;nicht&quot;, &quot;als&quot;, &quot;Mensch,&quot;, &quot;sondern&quot;, &quot;als&quot;, &quot;Möwe,&quot;, &quot;so&quot;, &quot;die&quot;, &quot;Autorin.&quot;];&amp;#10;var t2_06 = [&quot;Ein&quot;, &quot;wenig&quot;, &quot;verlassen&quot;, &quot;sitzt&quot;, &quot;Tom&quot;, &quot;Gauld&quot;, &quot;im&quot;, &quot;Eingangsbereichs&quot;, &quot;eines&quot;, &quot;Edelhotels&quot;, &quot;in&quot;, &quot;Luzern.&quot;, &quot;Sein&quot;, &quot;Katzentisch&quot;, &quot;wirkt&quot;, &quot;neben&quot;, &quot;der&quot;, &quot;breiten&quot;, &quot;Treppe&quot;, &quot;etwas&quot;, &quot;verloren.&quot;, &quot;Hier&quot;, &quot;wird&quot;, &quot;er&quot;, &quot;zehn&quot;, &quot;Tage&quot;, &quot;lang&quot;, &quot;zeichnen.&quot;, &quot;Normalerweise&quot;, &quot;arbeitet&quot;, &quot;Tom&quot;, &quot;Gauld&quot;, &quot;als&quot;, &quot;Illustrator,&quot;, &quot;unter&quot;, &quot;anderem&quot;, &quot;für&quot;, &quot;die&quot;, &quot;Zeitung&quot;, &quot;&quot;, &quot;\&quot;Guardian\&quot;.&quot;, &quot;Hier&quot;, &quot;in&quot;, &quot;Luzern&quot;, &quot;soll&quot;, &quot;er&quot;, &quot;aber&quot;, &quot;auf&quot;, &quot;dem&quot;, &quot;Comic-Festival&quot;, &quot;Fumetto&quot;, &quot;als&quot;, &quot;Gastzeichner&quot;, &quot;live&quot;, &quot;Comics&quot;, &quot;zeichnen.&quot;, &quot;Er&quot;, &quot;soll&quot;, &quot;so&quot;, &quot;zeigen,&quot;, &quot;dass&quot;, &quot;Zeichnen&quot;, &quot;etwas&quot;, &quot;völlig&quot;, &quot;Normales&quot;, &quot;ist,&quot;, &quot;nicht&quot;, &quot;nur&quot;, &quot;eine&quot;, &quot;Beschäftigung&quot;, &quot;für&quot;, &quot;Kinder.&quot;, &quot;Inzwischen&quot;, &quot;hat&quot;, &quot;sich&quot;, &quot;das&quot;, &quot;Festival&quot;, &quot;als&quot;, &quot;Treffen&quot;, &quot;für&quot;, &quot;Fans&quot;, &quot;von&quot;, &quot;außergewöhnlichen&quot;, &quot;Comics&quot;, &quot;etabliert.&quot;, &quot;Superhelden&quot;, &quot;gibt&quot;, &quot;es&quot;, &quot;hier&quot;, &quot;nicht.&quot;, &quot;Auch&quot;, &quot;kein&quot;, &quot;Disney&quot;, &quot;und&quot;, &quot;keine&quot;, &quot;der&quot;, &quot;berühmten&quot;, &quot;Gestalten&quot;, &quot;der&quot;, &quot;französisch-belgischen&quot;, &quot;Comic-Schule&quot;, &quot;wie&quot;, &quot;Tim&quot;, &quot;und&quot;, &quot;Struppi.&quot;, &quot;Das&quot;, &quot;Festival&quot;, &quot;Fumetto&quot;, &quot;ist&quot;, &quot;Arthaus&quot;, &quot;für&quot;, &quot;Comic-Leser.&quot;, &quot;Und&quot;, &quot;deswegen&quot;, &quot;ist&quot;, &quot;jemand&quot;, &quot;wie&quot;, &quot;Tom&quot;, &quot;Gauld&quot;, &quot;hier,&quot;, &quot;dessen&quot;, &quot;witzige,&quot;, &quot;tiefschwarze&quot;, &quot;Comics&quot;, &quot;meist&quot;, &quot;selbstverlegt&quot;, &quot;erscheinen&quot;, &quot;und&quot;, &quot;dessen&quot;, &quot;Leserschaft&quot;, &quot;recht&quot;, &quot;überschaubar&quot;, &quot;ist.&quot;, &quot;Fumetto&quot;, &quot;ist&quot;, &quot;der&quot;, &quot;Anlaufpunkt&quot;, &quot;für&quot;, &quot;eher&quot;, &quot;unbekannte&quot;, &quot;Künstler.&quot;, &quot;Wie&quot;, &quot;passt&quot;, &quot;das&quot;, &quot;alles&quot;, &quot;in&quot;, &quot;die&quot;, &quot;biedere&quot;, &quot;Touristenstadt&quot;, &quot;Luzern,&quot;, &quot;wo&quot;, &quot;alles&quot;, &quot;brav&quot;, &quot;und&quot;, &quot;teuer&quot;, &quot;ist?&quot;, &quot;Nicht&quot;, &quot;ganz&quot;, &quot;problemlos.&quot;, &quot;Den&quot;, &quot;Kern&quot;, &quot;des&quot;, &quot;Festivals&quot;, &quot;bilden&quot;, &quot;dieses&quot;, &quot;Jahr&quot;, &quot;mehr&quot;, &quot;als&quot;, &quot;zwanzig&quot;, &quot;Ausstellungen.&quot;, &quot;Sie&quot;, &quot;sind&quot;, &quot;über&quot;, &quot;die&quot;, &quot;ganze&quot;, &quot;Luzerner&quot;, &quot;Altstadt&quot;, &quot;verstreut.&quot;, &quot;Es&quot;, &quot;gibt&quot;, &quot;in&quot;, &quot;Luzern&quot;, &quot;keine&quot;, &quot;Halle,&quot;, &quot;die&quot;, &quot;groß&quot;, &quot;genug&quot;, &quot;wäre&quot;, &quot;für&quot;, &quot;so&quot;, &quot;viel&quot;, &quot;Kunst&quot;, &quot;und&quot;, &quot;zugleich&quot;, &quot;bezahlbar&quot;, &quot;für&quot;, &quot;die&quot;, &quot;Veranstalter.&quot;, &quot;Darum&quot;, &quot;läuft&quot;, &quot;man&quot;, &quot;von&quot;, &quot;Haus&quot;, &quot;zu&quot;, &quot;Haus,&quot;, &quot;immer&quot;, &quot;Ausschau&quot;, &quot;haltend&quot;, &quot;nach&quot;, &quot;den&quot;, &quot;weißen&quot;, &quot;Fahnen&quot;, &quot;des&quot;, &quot;Festivals.&quot;, &quot;Manches&quot;, &quot;findet&quot;, &quot;sich&quot;, &quot;leicht,&quot;, &quot;etwa&quot;, &quot;die&quot;, &quot;große&quot;, &quot;Schau&quot;, &quot;von&quot;, &quot;Christophe&quot;, &quot;Blain.&quot;, &quot;Blain&quot;, &quot;ist&quot;, &quot;der&quot;, &quot;Stargast&quot;, &quot;des&quot;, &quot;Festivals.&quot;, &quot;Verstaubten&quot;, &quot;Genres&quot;, &quot;wie&quot;, &quot;dem&quot;, &quot;Abenteuer-Comic&quot;, &quot;oder&quot;, &quot;dem&quot;, &quot;Western&quot;, &quot;haucht&quot;, &quot;er&quot;, &quot;mit&quot;, &quot;viel&quot;, &quot;Sinn&quot;, &quot;für&quot;, &quot;absurden&quot;, &quot;Humor&quot;, &quot;neues&quot;, &quot;Leben&quot;, &quot;ein.&quot;, &quot;Auf&quot;, &quot;seiner&quot;, &quot;Ausstellungsfläche&quot;, &quot;sieht&quot;, &quot;man&quot;, &quot;Plastik-Eisberge,&quot;, &quot;auf&quot;, &quot;denen&quot;, &quot;wunderschöne&quot;, &quot;Kunstdrucke&quot;, &quot;mit&quot;, &quot;Zeichnungen&quot;, &quot;von&quot;, &quot;Blain&quot;, &quot;angebracht&quot;, &quot;sind.&quot;, &quot;Es&quot;, &quot;sind&quot;, &quot;Eindrücke&quot;, &quot;seiner&quot;, &quot;Reise&quot;, &quot;zum&quot;, &quot;Nordpol.&quot;, &quot;An&quot;, &quot;den&quot;, &quot;Wänden&quot;, &quot;hängen&quot;, &quot;überall&quot;, &quot;Originalseiten&quot;, &quot;seiner&quot;, &quot;Comics.&quot;, &quot;Und&quot;, &quot;weil&quot;, &quot;das&quot;, &quot;noch&quot;, &quot;nicht&quot;, &quot;reicht,&quot;, &quot;hat&quot;, &quot;Blain&quot;, &quot;gleich&quot;, &quot;die&quot;, &quot;ganze&quot;, &quot;Welt&quot;, &quot;seiner&quot;, &quot;Comics&quot;, &quot;nachgebaut:&quot;, &quot;Alte&quot;, &quot;Herrenhaus-Sessel&quot;, &quot;und&quot;, &quot;Silbermünzen&quot;, &quot;für&quot;, &quot;seine&quot;, &quot;Seefahrer-Serie&quot;, &quot;\&quot;Isaak&quot;, &quot;der&quot;, &quot;Pirat\&quot;,&quot;, &quot;Pistolen&quot;, &quot;und&quot;, &quot;Pokerkarten&quot;, &quot;für&quot;, &quot;den&quot;, &quot;Western-Comic&quot;, &quot;\&quot;Gus\&quot;.&quot;, &quot;Ein&quot;, &quot;anderer&quot;, &quot;Comic-Künstler&quot;, &quot;namens&quot;, &quot;Igort&quot;, &quot;treibt&quot;, &quot;das&quot;, &quot;Ganze&quot;, &quot;noch&quot;, &quot;etwas&quot;, &quot;weiter.&quot;, &quot;Er&quot;, &quot;präsentiert&quot;, &quot;auf&quot;, &quot;dem&quot;, &quot;Festival&quot;, &quot;seine&quot;, &quot;laufende&quot;, &quot;Serie&quot;, &quot;\&quot;Baobab\&quot;.&quot;, &quot;Die&quot;, &quot;Comic-Serie&quot;, &quot;spielt&quot;, &quot;im&quot;, &quot;Südamerika&quot;, &quot;und&quot;, &quot;Japan&quot;, &quot;der&quot;, &quot;zwanziger&quot;, &quot;Jahre.&quot;, &quot;Skizzen,&quot;, &quot;Ideen&quot;, &quot;und&quot;, &quot;kurze&quot;, &quot;Comic-Ausschnitte&quot;, &quot;hängen&quot;, &quot;in&quot;, &quot;einer&quot;, &quot;malerischen&quot;, &quot;Zwanziger-Jahre-Dekoration.&quot;, &quot;Es&quot;, &quot;sind&quot;, &quot;Ausstellungen&quot;, &quot;wie&quot;, &quot;diese,&quot;, &quot;die&quot;, &quot;man&quot;, &quot;nicht&quot;, &quot;mal&quot;, &quot;eben&quot;, &quot;so&quot;, &quot;durchlaufen&quot;, &quot;kann.&quot;, &quot;Anders&quot;, &quot;als&quot;, &quot;die&quot;, &quot;Ausstellungen&quot;, &quot;von&quot;, &quot;Igort&quot;, &quot;und&quot;, &quot;Blain&quot;, &quot;muss&quot;, &quot;man&quot;, &quot;die&quot;, &quot;von&quot;, &quot;Boris&quot;, &quot;Hoppek&quot;, &quot;auf&quot;, &quot;dem&quot;, &quot;Festival&quot;, &quot;erst&quot;, &quot;suchen.&quot;, &quot;Der&quot;, &quot;deutsche&quot;, &quot;Graffiti-Künstler&quot;, &quot;ist&quot;, &quot;vor&quot;, &quot;allem&quot;, &quot;durch&quot;, &quot;seine&quot;, &quot;niedlichen&quot;, &quot;Figuren&quot;, &quot;bekannt,&quot;, &quot;die&quot;, &quot;seit&quot;, &quot;2006&quot;, &quot;in&quot;, &quot;den&quot;, &quot;Werbespots&quot;, &quot;von&quot;, &quot;Opel&quot;, &quot;gezeigt&quot;, &quot;werden.&quot;, &quot;In&quot;, &quot;der&quot;, &quot;Luzerner&quot;, &quot;Kunsthochschule&quot;, &quot;hat&quot;, &quot;Hoppek&quot;, &quot;eine&quot;, &quot;riesige&quot;, &quot;braune&quot;, &quot;Kuh&quot;, &quot;aus&quot;, &quot;Fellresten&quot;, &quot;aufgebaut.&quot;, &quot;Wenn&quot;, &quot;man&quot;, &quot;kräftig&quot;, &quot;an&quot;, &quot;einem&quot;, &quot;Seil&quot;, &quot;zieht,&quot;, &quot;wackelt&quot;, &quot;die&quot;, &quot;Kuh&quot;, &quot;und&quot;, &quot;eine&quot;, &quot;Kuhglocke&quot;, &quot;bimmelt.&quot;, &quot;Die&quot;, &quot;Kuh&quot;, &quot;geht&quot;, &quot;gerade&quot;, &quot;noch&quot;, &quot;als&quot;, &quot;Satire&quot;, &quot;auf&quot;, &quot;Schweizer&quot;, &quot;Klischees&quot;, &quot;durch.&quot;, &quot;Dass&quot;, &quot;es&quot;, &quot;etwas&quot;, &quot;\&quot;zu&quot;, &quot;entdecken\&quot;&quot;, &quot;gäbe,&quot;, &quot;wird&quot;, &quot;oft&quot;, &quot;über&quot;, &quot;Festivals&quot;, &quot;gesagt.&quot;, &quot;Auf&quot;, &quot;das&quot;, &quot;Fumetto&quot;, &quot;mit&quot;, &quot;seinen&quot;, &quot;vielen&quot;, &quot;Ausstellungsorten&quot;, &quot;trifft&quot;, &quot;es&quot;, &quot;ausnahmsweise&quot;, &quot;wirklich&quot;, &quot;zu.&quot;, &quot;Nur&quot;, &quot;muss&quot;, &quot;man&quot;, &quot;manchmal&quot;, &quot;genauer&quot;, &quot;hinschauen,&quot;, &quot;um&quot;, &quot;jemanden&quot;, &quot;wie&quot;, &quot;Tom&quot;, &quot;Gauld&quot;, &quot;zu&quot;, &quot;finden,&quot;, &quot;der&quot;, &quot;fleißig&quot;, &quot;jeden&quot;, &quot;Tag&quot;, &quot;seine&quot;, &quot;Comics&quot;, &quot;zeichnet.&quot;, &quot;Katzentisch&quot;, &quot;hin&quot;, &quot;oder&quot;, &quot;her.&quot;];&amp;#10;var t2_07 = [&quot;Es&quot;, &quot;ist&quot;, &quot;eine&quot;, &quot;lustige&quot;, &quot;Truppe,&quot;, &quot;die&quot;, &quot;sich&quot;, &quot;eines&quot;, &quot;Montags&quot;, &quot;mit&quot;, &quot;der&quot;, &quot;Bahn&quot;, &quot;auf&quot;, &quot;den&quot;, &quot;Weg&quot;, &quot;macht.&quot;, &quot;Alkohol&quot;, &quot;ist&quot;, &quot;bei&quot;, &quot;dem&quot;, &quot;Ausflug&quot;, &quot;jedoch&quot;, &quot;streng&quot;, &quot;verboten.&quot;, &quot;Sowohl&quot;, &quot;der&quot;, &quot;Organisator&quot;, &quot;des&quot;, &quot;Ausflugs&quot;, &quot;als&quot;, &quot;auch&quot;, &quot;seine&quot;, &quot;mehr&quot;, &quot;als&quot;, &quot;500&quot;, &quot;Mitreisenden&quot;, &quot;sind&quot;, &quot;kämpferische&quot;, &quot;Alkohol-Gegner.&quot;, &quot;Statt&quot;, &quot;Gin&quot;, &quot;sorgen&quot;, &quot;also&quot;, &quot;Stullen,&quot;, &quot;Tee&quot;, &quot;und&quot;, &quot;eine&quot;, &quot;Blaskapelle&quot;, &quot;für&quot;, &quot;Stimmung.&quot;, &quot;Für&quot;, &quot;je&quot;, &quot;einen&quot;, &quot;Schilling&quot;, &quot;hat&quot;, &quot;der&quot;, &quot;Prediger&quot;, &quot;Thomas&quot;, &quot;Cook&quot;, &quot;die&quot;, &quot;Tickets&quot;, &quot;für&quot;, &quot;die&quot;, &quot;Fahrt&quot;, &quot;verkauft.&quot;, &quot;Auf&quot;, &quot;Flugzetteln&quot;, &quot;hat&quot;, &quot;er&quot;, &quot;für&quot;, &quot;seinen&quot;, &quot;Ausflug&quot;, &quot;geworben:&quot;, &quot;Es&quot;, &quot;geht&quot;, &quot;zu&quot;, &quot;einer&quot;, &quot;Demonstration&quot;, &quot;gegen&quot;, &quot;den&quot;, &quot;Alkohol.&quot;, &quot;Das&quot;, &quot;Ereignis&quot;, &quot;sorgte&quot;, &quot;für&quot;, &quot;große&quot;, &quot;Begeisterung.&quot;, &quot;Es&quot;, &quot;war&quot;, &quot;die&quot;, &quot;Geburtsstunde&quot;, &quot;des&quot;, &quot;Massen-Tourismus.&quot;, &quot;Cook&quot;, &quot;hat&quot;, &quot;die&quot;, &quot;vorhandenen&quot;, &quot;Möglichkeiten&quot;, &quot;extrem&quot;, &quot;clever&quot;, &quot;genutzt.&quot;, &quot;Das&quot;, &quot;neue&quot;, &quot;Transportmittel&quot;, &quot;Eisenbahn&quot;, &quot;war&quot;, &quot;ideal,&quot;, &quot;um&quot;, &quot;auch&quot;, &quot;ärmeren&quot;, &quot;Menschen&quot;, &quot;Reisen&quot;, &quot;zu&quot;, &quot;ermöglichen.&quot;, &quot;Die&quot;, &quot;Zeit&quot;, &quot;war&quot;, &quot;reif&quot;, &quot;für&quot;, &quot;organisierte&quot;, &quot;Ausflüge&quot;, &quot;für&quot;, &quot;alle.&quot;, &quot;Wenn&quot;, &quot;Cook&quot;, &quot;es&quot;, &quot;nicht&quot;, &quot;getan&quot;, &quot;hätte,&quot;, &quot;dann&quot;, &quot;ein&quot;, &quot;anderer.&quot;, &quot;Schon&quot;, &quot;einige&quot;, &quot;Jahre&quot;, &quot;nach&quot;, &quot;dem&quot;, &quot;ersten&quot;, &quot;Ausflug&quot;, &quot;bringt&quot;, &quot;Cook&quot;, &quot;seine&quot;, &quot;Gäste&quot;, &quot;auf&quot;, &quot;den&quot;, &quot;europäischen&quot;, &quot;Kontinent,&quot;, &quot;nach&quot;, &quot;Nordamerika&quot;, &quot;und&quot;, &quot;nach&quot;, &quot;Ägypten.&quot;, &quot;Doch&quot;, &quot;er&quot;, &quot;tritt&quot;, &quot;zunächst&quot;, &quot;nicht&quot;, &quot;als&quot;, &quot;Reiseveranstalter&quot;, &quot;auf,&quot;, &quot;sondern&quot;, &quot;als&quot;, &quot;Mann&quot;, &quot;mit&quot;, &quot;einer&quot;, &quot;Mission:&quot;, &quot;Der&quot;, &quot;Enkelsohn&quot;, &quot;eines&quot;, &quot;Pastors&quot;, &quot;hat&quot;, &quot;sein&quot;, &quot;Leben&quot;, &quot;dem&quot;, &quot;Kampf&quot;, &quot;gegen&quot;, &quot;den&quot;, &quot;Alkohol&quot;, &quot;verschrieben.&quot;, &quot;Bereits&quot;, &quot;als&quot;, &quot;Lehrling&quot;, &quot;mit&quot;, &quot;alkoholkranken&quot;, &quot;Chefs&quot;, &quot;hat&quot;, &quot;Cook&quot;, &quot;die&quot;, &quot;zerstörerische&quot;, &quot;Kraft&quot;, &quot;des&quot;, &quot;Alkohols&quot;, &quot;kennengelernt.&quot;, &quot;Weite&quot;, &quot;Teile&quot;, &quot;der&quot;, &quot;unteren&quot;, &quot;gesellschaftlichen&quot;, &quot;Schichten&quot;, &quot;in&quot;, &quot;Großbritannien&quot;, &quot;waren&quot;, &quot;damals&quot;, &quot;abhängig&quot;, &quot;von&quot;, &quot;Alkohol.&quot;, &quot;Gigantische&quot;, &quot;Mengen&quot;, &quot;an&quot;, &quot;Gin&quot;, &quot;überfluten&quot;, &quot;das&quot;, &quot;Land.&quot;, &quot;Niedrige&quot;, &quot;Steuern&quot;, &quot;und&quot;, &quot;zahllose&quot;, &quot;Kneipen&quot;, &quot;helfen&quot;, &quot;dabei.&quot;, &quot;Armut&quot;, &quot;und&quot;, &quot;Elend&quot;, &quot;treiben&quot;, &quot;die&quot;, &quot;Menschen&quot;, &quot;in&quot;, &quot;die&quot;, &quot;Schankhäuser.&quot;, &quot;Die&quot;, &quot;sogenannte&quot;, &quot;Abstinenz-Bewegung&quot;, &quot;versucht,&quot;, &quot;dem&quot;, &quot;entgegenzutreten.&quot;, &quot;Dazu&quot;, &quot;gehört&quot;, &quot;auch&quot;, &quot;Thomas&quot;, &quot;Cook,&quot;, &quot;der&quot;, &quot;sich&quot;, &quot;mit&quot;, &quot;voller&quot;, &quot;Kraft&quot;, &quot;in&quot;, &quot;ihren&quot;, &quot;Dienst&quot;, &quot;stellt.&quot;, &quot;Er&quot;, &quot;zieht&quot;, &quot;übers&quot;, &quot;Land&quot;, &quot;um&quot;, &quot;mit&quot;, &quot;Menschen&quot;, &quot;über&quot;, &quot;die&quot;, &quot;Gefahren&quot;, &quot;von&quot;, &quot;Alkohol&quot;, &quot;zu&quot;, &quot;sprechen.&quot;, &quot;Er&quot;, &quot;druckt&quot;, &quot;und&quot;, &quot;verlegt&quot;, &quot;Broschüren&quot;, &quot;und&quot;, &quot;Zeitschriften&quot;, &quot;und&quot;, &quot;beherbergt&quot;, &quot;sogar&quot;, &quot;in&quot;, &quot;zwei&quot;, &quot;Hotels&quot;, &quot;reisende&quot;, &quot;Mitstreiter.&quot;, &quot;Ins&quot;, &quot;Reisegeschäft&quot;, &quot;gerät&quot;, &quot;Cook&quot;, &quot;eher&quot;, &quot;nebenbei.&quot;, &quot;Vier&quot;, &quot;Jahre&quot;, &quot;nach&quot;, &quot;dem&quot;, &quot;ersten&quot;, &quot;Bahn-Ausflug&quot;, &quot;veranstaltet&quot;, &quot;Cook&quot;, &quot;seine&quot;, &quot;ersten&quot;, &quot;eigenen&quot;, &quot;Fahrten.&quot;, &quot;Es&quot;, &quot;geht&quot;, &quot;mit&quot;, &quot;dem&quot;, &quot;Zug&quot;, &quot;nach&quot;, &quot;Liverpool.&quot;, &quot;Doch&quot;, &quot;er&quot;, &quot;hat&quot;, &quot;wenig&quot;, &quot;Erfolg.&quot;, &quot;Schon&quot;, &quot;ein&quot;, &quot;Jahr&quot;, &quot;später&quot;, &quot;muss&quot;, &quot;Cook&quot;, &quot;Bankrott&quot;, &quot;anmelden,&quot;, &quot;allerdings&quot;, &quot;kommt&quot;, &quot;er&quot;, &quot;schnell&quot;, &quot;wieder&quot;, &quot;auf&quot;, &quot;die&quot;, &quot;Beine.&quot;, &quot;Nach&quot;, &quot;und&quot;, &quot;nach&quot;, &quot;nimmt&quot;, &quot;er&quot;, &quot;sich&quot;, &quot;größere&quot;, &quot;Projekte&quot;, &quot;vor.&quot;, &quot;Cook&quot;, &quot;unternimmt&quot;, &quot;regelmäßige&quot;, &quot;Reisen&quot;, &quot;nach&quot;, &quot;Schottland.&quot;, &quot;Zur&quot;, &quot;Weltausstellung&quot;, &quot;in&quot;, &quot;London&quot;, &quot;führt&quot;, &quot;er&quot;, &quot;insgesamt&quot;, &quot;etwa&quot;, &quot;eine&quot;, &quot;Sechstel&quot;, &quot;Million&quot;, &quot;Gäste.&quot;, &quot;Zu&quot;, &quot;Sonderpreisen,&quot;, &quot;versteht&quot;, &quot;sich.&quot;, &quot;Klettern&quot;, &quot;in&quot;, &quot;den&quot;, &quot;Alpen,&quot;, &quot;Bildungsreisen&quot;, &quot;nach&quot;, &quot;Italien&quot;, &quot;und&quot;, &quot;Griechenland&quot;, &quot;zu&quot;, &quot;antiken&quot;, &quot;Stätten.&quot;, &quot;Lange&quot;, &quot;Zeit&quot;, &quot;war&quot;, &quot;Reisen&quot;, &quot;nur&quot;, &quot;etwas&quot;, &quot;für&quot;, &quot;Britanniens&quot;, &quot;Adelige.&quot;, &quot;Cooks&quot;, &quot;Gäste&quot;, &quot;stammen&quot;, &quot;dagegen&quot;, &quot;aus&quot;, &quot;der&quot;, &quot;Mittelschicht.&quot;, &quot;Sie&quot;, &quot;erleben&quot;, &quot;genau&quot;, &quot;geplante&quot;, &quot;Reisen&quot;, &quot;durch&quot;, &quot;ihr&quot;, &quot;Heimatland.&quot;, &quot;Cook&quot;, &quot;verhandelt&quot;, &quot;mit&quot;, &quot;den&quot;, &quot;Zugunternehmen&quot;, &quot;und&quot;, &quot;schließt&quot;, &quot;Verträge&quot;, &quot;mit&quot;, &quot;Hotels.&quot;, &quot;Seine&quot;, &quot;Kunden&quot;, &quot;erhalten&quot;, &quot;einen&quot;, &quot;detaillierten&quot;, &quot;Reisebericht.&quot;, &quot;Schließlich&quot;, &quot;kennt&quot;, &quot;sich&quot;, &quot;Cook&quot;, &quot;mit&quot;, &quot;dem&quot;, &quot;Verfassen&quot;, &quot;von&quot;, &quot;Texten&quot;, &quot;aus.&quot;, &quot;Später&quot;, &quot;nimmt&quot;, &quot;er&quot;, &quot;dann&quot;, &quot;auch&quot;, &quot;Deutschland,&quot;, &quot;Frankreich&quot;, &quot;und&quot;, &quot;Belgien&quot;, &quot;ins&quot;, &quot;Programm:&quot;, &quot;Paris,&quot;, &quot;Straßburg,&quot;, &quot;Brüssel&quot;, &quot;und&quot;, &quot;Köln.&quot;, &quot;Sein&quot;, &quot;System&quot;, &quot;macht&quot;, &quot;Reisen&quot;, &quot;unkompliziert,&quot;, &quot;später&quot;, &quot;auch&quot;, &quot;in&quot;, &quot;Amerika&quot;, &quot;und&quot;, &quot;Ägypten.&quot;, &quot;Die&quot;, &quot;Unterkünfte&quot;, &quot;sind&quot;, &quot;gebucht,&quot;, &quot;das&quot;, &quot;Essen&quot;, &quot;bezahlt.&quot;, &quot;Doch&quot;, &quot;ist&quot;, &quot;Cook&quot;, &quot;wirklich&quot;, &quot;der&quot;, &quot;Schöpfer&quot;, &quot;des&quot;, &quot;Massen-Tourismus?&quot;, &quot;\&quot;Es&quot;, &quot;ist&quot;, &quot;eine&quot;, &quot;großartige&quot;, &quot;Geschichte,&quot;, &quot;aber&quot;, &quot;sie&quot;, &quot;stimmt&quot;, &quot;nicht\&quot;,&quot;, &quot;sagt&quot;, &quot;ein&quot;, &quot;britischer&quot;, &quot;Historiker.&quot;, &quot;Cook&quot;, &quot;habe&quot;, &quot;nur&quot;, &quot;kopiert,&quot;, &quot;was&quot;, &quot;andere&quot;, &quot;schon&quot;, &quot;vorher&quot;, &quot;gemacht&quot;, &quot;haben.&quot;, &quot;Ausflüge&quot;, &quot;mit&quot;, &quot;der&quot;, &quot;Eisenbahn&quot;, &quot;hat&quot;, &quot;es&quot;, &quot;schon&quot;, &quot;vorher&quot;, &quot;gegeben.&quot;, &quot;Auch&quot;, &quot;Pauschalreisen&quot;, &quot;waren&quot;, &quot;keine&quot;, &quot;Neuheit.&quot;, &quot;Aber&quot;, &quot;warum&quot;, &quot;gilt&quot;, &quot;dann&quot;, &quot;Cook&quot;, &quot;als&quot;, &quot;Erfinder&quot;, &quot;des&quot;, &quot;Massentourismus?&quot;, &quot;Das&quot;, &quot;liegt&quot;, &quot;daran,&quot;, &quot;dass&quot;, &quot;Cook&quot;, &quot;nach&quot;, &quot;seinem&quot;, &quot;Tod&quot;, &quot;als&quot;, &quot;Figur&quot;, &quot;gezielt&quot;, &quot;beworben&quot;, &quot;wurde.&quot;, &quot;Die&quot;, &quot;Archive&quot;, &quot;seiner&quot;, &quot;Firma&quot;, &quot;existieren&quot;, &quot;bis&quot;, &quot;heute.&quot;, &quot;So&quot;, &quot;lässt&quot;, &quot;sich&quot;, &quot;auch&quot;, &quot;der&quot;, &quot;weitere&quot;, &quot;Aufstieg&quot;, &quot;Cooks&quot;, &quot;verfolgen,&quot;, &quot;ebenso&quot;, &quot;wie&quot;, &quot;sein&quot;, &quot;trauriges&quot;, &quot;Ende.&quot;, &quot;Im&quot;, &quot;April&quot;, &quot;1865&quot;, &quot;eröffnet&quot;, &quot;Cook&quot;, &quot;in&quot;, &quot;London&quot;, &quot;seine&quot;, &quot;erste&quot;, &quot;Filiale.&quot;, &quot;Einige&quot;, &quot;Jahre&quot;, &quot;später&quot;, &quot;bezieht&quot;, &quot;die&quot;, &quot;Firma&quot;, &quot;dann&quot;, &quot;ein&quot;, &quot;größeres&quot;, &quot;Büro&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Nähe&quot;, &quot;des&quot;, &quot;Geschäfts.&quot;, &quot;Cook&quot;, &quot;ernennt&quot;, &quot;seinen&quot;, &quot;Sohn&quot;, &quot;John&quot;, &quot;Mason&quot;, &quot;Cook&quot;, &quot;zum&quot;, &quot;Geschäftsführer.&quot;, &quot;Nach&quot;, &quot;und&quot;, &quot;nach&quot;, &quot;verschiebt&quot;, &quot;sich&quot;, &quot;die&quot;, &quot;Macht&quot;, &quot;im&quot;, &quot;Familienunternehmen:&quot;, &quot;vom&quot;, &quot;ländlichen&quot;, &quot;Leicester&quot;, &quot;ins&quot;, &quot;boomende&quot;, &quot;London,&quot;, &quot;vom&quot;, &quot;Vater&quot;, &quot;zum&quot;, &quot;Sohn.&quot;, &quot;Da&quot;, &quot;erfüllt&quot;, &quot;sich&quot;, &quot;Cook&quot;, &quot;im&quot;, &quot;Alter&quot;, &quot;von&quot;, &quot;63&quot;, &quot;Jahren&quot;, &quot;noch&quot;, &quot;einmal&quot;, &quot;einen&quot;, &quot;langgehegten&quot;, &quot;Traum:&quot;, &quot;Mit&quot;, &quot;einer&quot;, &quot;kleinen&quot;, &quot;Reisegruppe&quot;, &quot;reist&quot;, &quot;er&quot;, &quot;einmal&quot;, &quot;um&quot;, &quot;die&quot;, &quot;Erde.&quot;, &quot;Die&quot;, &quot;Weltreise&quot;, &quot;dauert&quot;, &quot;222&quot;, &quot;Tage&quot;, &quot;und&quot;, &quot;die&quot;, &quot;Gruppe&quot;, &quot;legt&quot;, &quot;mehr&quot;, &quot;als&quot;, &quot;40.000&quot;, &quot;Kilometer&quot;, &quot;zurück:&quot;, &quot;Mit&quot;, &quot;dem&quot;, &quot;Dampfer&quot;, &quot;über&quot;, &quot;den&quot;, &quot;Atlantik,&quot;, &quot;per&quot;, &quot;Kutsche&quot;, &quot;durch&quot;, &quot;Amerika,&quot;, &quot;nach&quot;, &quot;Japan,&quot;, &quot;China&quot;, &quot;und&quot;, &quot;schließlich&quot;, &quot;durch&quot;, &quot;den&quot;, &quot;neu&quot;, &quot;eröffneten&quot;, &quot;Suez-Kanal&quot;, &quot;wieder&quot;, &quot;nach&quot;, &quot;Hause&quot;, &quot;nach&quot;, &quot;England.&quot;, &quot;Unter&quot;, &quot;der&quot;, &quot;Leitung&quot;, &quot;seines&quot;, &quot;Sohns&quot;, &quot;vergrößert&quot;, &quot;sich&quot;, &quot;währenddessen&quot;, &quot;das&quot;, &quot;Unternehmen.&quot;, &quot;Doch&quot;, &quot;immer&quot;, &quot;häufiger&quot;, &quot;kommt&quot;, &quot;es&quot;, &quot;zum&quot;, &quot;Streit&quot;, &quot;zwischen&quot;, &quot;Vater&quot;, &quot;und&quot;, &quot;Sohn.&quot;, &quot;Schließlich&quot;, &quot;wird&quot;, &quot;Cook&quot;, &quot;von&quot;, &quot;seinem&quot;, &quot;Sohn&quot;, &quot;aus&quot;, &quot;der&quot;, &quot;Firma&quot;, &quot;gedrängt.&quot;, &quot;Thomas&quot;, &quot;Cook&quot;, &quot;zieht&quot;, &quot;zurück&quot;, &quot;in&quot;, &quot;die&quot;, &quot;heimische&quot;, &quot;Provinz,&quot;, &quot;während&quot;, &quot;sein&quot;, &quot;Sohn&quot;, &quot;die&quot;, &quot;Geschäfte&quot;, &quot;ins&quot;, &quot;Ausland&quot;, &quot;erweitert.&quot;, &quot;Er&quot;, &quot;verkauft&quot;, &quot;Millionen&quot;, &quot;von&quot;, &quot;Tickets,&quot;, &quot;befördert&quot;, &quot;Post&quot;, &quot;in&quot;, &quot;Ägypten&quot;, &quot;und&quot;, &quot;schippert&quot;, &quot;britische&quot;, &quot;Truppen&quot;, &quot;in&quot;, &quot;die&quot;, &quot;Welt.&quot;, &quot;Der&quot;, &quot;Cook-Konzern&quot;, &quot;hat&quot;, &quot;zu&quot;, &quot;diesem&quot;, &quot;Zeitpunkt&quot;, &quot;nicht&quot;, &quot;mehr&quot;, &quot;viel&quot;, &quot;mit&quot;, &quot;dem&quot;, &quot;kleinen&quot;, &quot;Reiseunternehmen&quot;, &quot;vom&quot;, &quot;Anfang&quot;, &quot;zu&quot;, &quot;tun.&quot;, &quot;Langsam&quot;, &quot;erblindet&quot;, &quot;Thomas&quot;, &quot;Cook&quot;, &quot;in&quot;, &quot;seinem&quot;, &quot;ländlichen&quot;, &quot;Exil,&quot;, &quot;wo&quot;, &quot;er&quot;, &quot;schließlich&quot;, &quot;nach&quot;, &quot;einem&quot;, &quot;Schlaganfall&quot;, &quot;stirbt.&quot;, &quot;Der&quot;, &quot;Sohn&quot;, &quot;überlebt&quot;, &quot;seinen&quot;, &quot;Vater&quot;, &quot;nur&quot;, &quot;um&quot;, &quot;sieben&quot;, &quot;Jahre.&quot;, &quot;Cooks&quot;, &quot;Enkel&quot;, &quot;verkaufen&quot;, &quot;das&quot;, &quot;Familienunternehmen&quot;, &quot;schließlich&quot;, &quot;an&quot;, &quot;die&quot;, &quot;Betreiber&quot;, &quot;des&quot;, &quot;Orient-Express.&quot;, &quot;Das&quot;, &quot;Unternehmen&quot;, &quot;verliert&quot;, &quot;seine&quot;, &quot;Eigenständigkeit.&quot;];&amp;#10;var t2_08 = [&quot;Ein&quot;, &quot;Löwe,&quot;, &quot;der&quot;, &quot;auf&quot;, &quot;einem&quot;, &quot;Pferd&quot;, &quot;reitet.&quot;, &quot;Die&quot;, &quot;Nummer&quot;, &quot;galt&quot;, &quot;als&quot;, &quot;Sensation.&quot;, &quot;1893&quot;, &quot;zeigte&quot;, &quot;Carl&quot;, &quot;Krone&quot;, &quot;das&quot;, &quot;Kunststück&quot;, &quot;zum&quot;, &quot;ersten&quot;, &quot;Mal.&quot;, &quot;Einige&quot;, &quot;Jahre&quot;, &quot;später&quot;, &quot;gründete&quot;, &quot;er&quot;, &quot;den&quot;, &quot;legendären&quot;, &quot;Zirkus&quot;, &quot;Krone.&quot;, &quot;Die&quot;, &quot;Dressur&quot;, &quot;wilder&quot;, &quot;Tiere&quot;, &quot;gehört&quot;, &quot;seit&quot;, &quot;mehr&quot;, &quot;als&quot;, &quot;hundert&quot;, &quot;Jahren&quot;, &quot;fest&quot;, &quot;zum&quot;, &quot;Programm&quot;, &quot;des&quot;, &quot;Unternehmens.&quot;, &quot;Geht&quot;, &quot;es&quot;, &quot;nach&quot;, &quot;dem&quot;, &quot;Bundesrat,&quot;, &quot;dann&quot;, &quot;sollen&quot;, &quot;solche&quot;, &quot;Kunststücke&quot;, &quot;in&quot;, &quot;Zukunft&quot;, &quot;jedoch&quot;, &quot;größtenteils&quot;, &quot;verboten&quot;, &quot;sein.&quot;, &quot;Die&quot;, &quot;Länderkammer&quot;, &quot;fordert&quot;, &quot;ein&quot;, &quot;Verbot&quot;, &quot;von&quot;, &quot;Elefanten,&quot;, &quot;Großbären,&quot;, &quot;Giraffen,&quot;, &quot;Nashörnern,&quot;, &quot;Flusspferden&quot;, &quot;und&quot;, &quot;Primaten&quot;, &quot;in&quot;, &quot;Zirkusbetrieben.&quot;, &quot;Merkwürdigerweise&quot;, &quot;stehen&quot;, &quot;Großkatzen&quot;, &quot;wie&quot;, &quot;Löwen&quot;, &quot;und&quot;, &quot;Tiger&quot;, &quot;nicht&quot;, &quot;auf&quot;, &quot;der&quot;, &quot;Liste.&quot;, &quot;Ob&quot;, &quot;das&quot;, &quot;Vorhaben&quot;, &quot;erfolgreich&quot;, &quot;sein&quot;, &quot;wird,&quot;, &quot;ist&quot;, &quot;offen.&quot;, &quot;Schon&quot;, &quot;vor&quot;, &quot;acht&quot;, &quot;Jahren&quot;, &quot;hatte&quot;, &quot;der&quot;, &quot;Bundesrat&quot;, &quot;vergeblich&quot;, &quot;ein&quot;, &quot;Verbot&quot;, &quot;von&quot;, &quot;Zirkustieren&quot;, &quot;gefordert.&quot;, &quot;Die&quot;, &quot;Argumentation&quot;, &quot;war&quot;, &quot;damals&quot;, &quot;die&quot;, &quot;gleiche&quot;, &quot;wie&quot;, &quot;heute:&quot;, &quot;Eine&quot;, &quot;artgerechte&quot;, &quot;Haltung&quot;, &quot;ist&quot;, &quot;nicht&quot;, &quot;möglich,&quot;, &quot;da&quot;, &quot;die&quot;, &quot;Tiere&quot;, &quot;einen&quot;, &quot;Großteil&quot;, &quot;ihres&quot;, &quot;Lebens&quot;, &quot;in&quot;, &quot;Käfigen&quot;, &quot;eingesperrt&quot;, &quot;sind.&quot;, &quot;Dieser&quot;, &quot;Aspekt&quot;, &quot;ist&quot;, &quot;zwar&quot;, &quot;wichtig,&quot;, &quot;aber&quot;, &quot;er&quot;, &quot;ist&quot;, &quot;nicht&quot;, &quot;entscheidend.&quot;, &quot;Ganz&quot;, &quot;unabhängig&quot;, &quot;davon,&quot;, &quot;ob&quot;, &quot;Tiere&quot;, &quot;während&quot;, &quot;der&quot;, &quot;Dressur&quot;, &quot;Schmerzen&quot;, &quot;erleiden&quot;, &quot;oder&quot;, &quot;in&quot;, &quot;Gefangenschaft&quot;, &quot;verkümmern:&quot;, &quot;Tiger,&quot;, &quot;Elefanten,&quot;, &quot;Bären&quot;, &quot;und&quot;, &quot;Giraffen&quot;, &quot;gehören&quot;, &quot;nicht&quot;, &quot;in&quot;, &quot;den&quot;, &quot;Zirkus.&quot;, &quot;Ihre&quot;, &quot;Vorführung&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Manege&quot;, &quot;ist&quot;, &quot;noch&quot;, &quot;ein&quot;, &quot;Überbleibsel&quot;, &quot;aus&quot;, &quot;früheren&quot;, &quot;Zeiten.&quot;, &quot;Damals&quot;, &quot;gab&quot;, &quot;es&quot;, &quot;exotische&quot;, &quot;Tiere&quot;, &quot;nur&quot;, &quot;im&quot;, &quot;Zoo&quot;, &quot;oder&quot;, &quot;im&quot;, &quot;Wanderzirkus&quot;, &quot;zu&quot;, &quot;sehen.&quot;, &quot;Heute&quot;, &quot;laufen&quot;, &quot;Tierdokus&quot;, &quot;jedoch&quot;, &quot;fast&quot;, &quot;täglich&quot;, &quot;im&quot;, &quot;Fernsehen.&quot;, &quot;Die&quot;, &quot;Grundhaltung,&quot;, &quot;dass&quot;, &quot;wilde&quot;, &quot;Tiere&quot;, &quot;wandelnde&quot;, &quot;Kuriositäten&quot;, &quot;sind&quot;, &quot;und&quot;, &quot;keine&quot;, &quot;Lebewesen,&quot;, &quot;denen&quot;, &quot;man&quot;, &quot;mit&quot;, &quot;Respekt&quot;, &quot;begegnen&quot;, &quot;sollte,&quot;, &quot;ist&quot;, &quot;heute&quot;, &quot;völlig&quot;, &quot;veraltet.&quot;, &quot;Der&quot;, &quot;Streit&quot;, &quot;über&quot;, &quot;das&quot;, &quot;Verbot&quot;, &quot;von&quot;, &quot;Zirkustieren&quot;, &quot;tobt&quot;, &quot;trotzdem&quot;, &quot;auch&quot;, &quot;heute&quot;, &quot;noch.&quot;, &quot;Nach&quot;, &quot;Meinung&quot;, &quot;der&quot;, &quot;Kritiker&quot;, &quot;ist&quot;, &quot;es&quot;, &quot;einem&quot;, &quot;Zirkus&quot;, &quot;prinzipiell&quot;, &quot;nicht&quot;, &quot;möglich,&quot;, &quot;einen&quot;, &quot;Tiger&quot;, &quot;unter&quot;, &quot;natürlichen&quot;, &quot;Bedingungen&quot;, &quot;zu&quot;, &quot;halten.&quot;, &quot;Die&quot;, &quot;Befürworter&quot;, &quot;halten&quot;, &quot;dagegen.&quot;, &quot;Sie&quot;, &quot;sind&quot;, &quot;der&quot;, &quot;Meinung,&quot;, &quot;dass&quot;, &quot;die&quot;, &quot;Tiere&quot;, &quot;an&quot;, &quot;das&quot;, &quot;Arbeiten&quot;, &quot;mit&quot;, &quot;Menschen&quot;, &quot;gewöhnt&quot;, &quot;sind.&quot;, &quot;Auch&quot;, &quot;die&quot;, &quot;Methoden&quot;, &quot;der&quot;, &quot;Dressur&quot;, &quot;sind&quot;, &quot;umstritten:&quot;, &quot;Tiertrainer&quot;, &quot;betonen&quot;, &quot;gern,&quot;, &quot;die&quot;, &quot;Tiere&quot;, &quot;würden&quot;, &quot;beim&quot;, &quot;Training&quot;, &quot;nicht&quot;, &quot;mehr&quot;, &quot;bestraft&quot;, &quot;werden.&quot;, &quot;Kritiker&quot;, &quot;halten&quot;, &quot;dagegen,&quot;, &quot;dass&quot;, &quot;nach&quot;, &quot;wie&quot;, &quot;vor&quot;, &quot;zu&quot;, &quot;Peitsche&quot;, &quot;und&quot;, &quot;Elektroschockern&quot;, &quot;gegriffen&quot;, &quot;wird.&quot;, &quot;In&quot;, &quot;jedem&quot;, &quot;Fall&quot;, &quot;sind&quot;, &quot;für&quot;, &quot;die&quot;, &quot;Tiere&quot;, &quot;die&quot;, &quot;Tricks&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Manege&quot;, &quot;ebenso&quot;, &quot;sinnlos&quot;, &quot;wie&quot;, &quot;unangenehm.&quot;, &quot;Über&quot;, &quot;allem&quot;, &quot;steht&quot;, &quot;aber&quot;, &quot;folgende&quot;, &quot;Frage:&quot;, &quot;Wieso&quot;, &quot;sollten&quot;, &quot;wilde&quot;, &quot;Tiere&quot;, &quot;überhaupt&quot;, &quot;in&quot;, &quot;Zirkussen&quot;, &quot;auftreten?&quot;, &quot;Denn&quot;, &quot;abgesehen&quot;, &quot;vom&quot;, &quot;Unterhaltungsfaktor&quot;, &quot;ist&quot;, &quot;ein&quot;, &quot;Sinn&quot;, &quot;dabei&quot;, &quot;schwer&quot;, &quot;zu&quot;, &quot;erkennen.&quot;, &quot;In&quot;, &quot;den&quot;, &quot;90er&quot;, &quot;Jahren&quot;, &quot;etwa&quot;, &quot;untersuchten&quot;, &quot;britische&quot;, &quot;Forscher&quot;, &quot;die&quot;, &quot;Situation&quot;, &quot;von&quot;, &quot;Zirkustieren.&quot;, &quot;Ihr&quot;, &quot;Ergebnis:&quot;, &quot;Es&quot;, &quot;gibt&quot;, &quot;keine&quot;, &quot;Hinweise&quot;, &quot;darauf,&quot;, &quot;dass&quot;, &quot;Zirkusse&quot;, &quot;zur&quot;, &quot;Bildung&quot;, &quot;der&quot;, &quot;Besucher&quot;, &quot;oder&quot;, &quot;zum&quot;, &quot;Artenschutz&quot;, &quot;der&quot;, &quot;Tiere&quot;, &quot;beitragen.&quot;, &quot;Trotzdem&quot;, &quot;glauben&quot;, &quot;Eltern&quot;, &quot;oft,&quot;, &quot;ihren&quot;, &quot;Kindern&quot;, &quot;mit&quot;, &quot;Zirkus-Besuchen&quot;, &quot;wie&quot;, &quot;mit&quot;, &quot;einem&quot;, &quot;Zoobesuch&quot;, &quot;etwas&quot;, &quot;Gutes&quot;, &quot;zu&quot;, &quot;tun.&quot;, &quot;Die&quot;, &quot;Haltung&quot;, &quot;von&quot;, &quot;Tieren&quot;, &quot;in&quot;, &quot;Zoos&quot;, &quot;ist&quot;, &quot;zwar&quot;, &quot;auch&quot;, &quot;umstritten,&quot;, &quot;aber&quot;, &quot;zumindest&quot;, &quot;geht&quot;, &quot;es&quot;, &quot;dort&quot;, &quot;meist&quot;, &quot;auch&quot;, &quot;um&quot;, &quot;Artenschutz.&quot;, &quot;Und&quot;, &quot;Löwen&quot;, &quot;müssen&quot;, &quot;dort&quot;, &quot;nicht&quot;, &quot;auf&quot;, &quot;Pferden&quot;, &quot;reiten.&quot;, &quot;Im&quot;, &quot;Zirkus&quot;, &quot;aber&quot;, &quot;machen&quot;, &quot;Elefanten&quot;, &quot;als&quot;, &quot;lustige&quot;, &quot;Rüsseltiere&quot;, &quot;für&quot;, &quot;Menschen&quot;, &quot;Männchen.&quot;, &quot;Löwen&quot;, &quot;und&quot;, &quot;Tiger&quot;, &quot;springen&quot;, &quot;durch&quot;, &quot;Reifen,&quot;, &quot;anstatt&quot;, &quot;Beute&quot;, &quot;zu&quot;, &quot;erlegen.&quot;, &quot;Bären&quot;, &quot;fahren&quot;, &quot;Motorrad.&quot;, &quot;Dass&quot;, &quot;die&quot;, &quot;Tiere&quot;, &quot;daran&quot;, &quot;Spaß&quot;, &quot;haben,&quot;, &quot;ist&quot;, &quot;zumindest&quot;, &quot;unbewiesen.&quot;, &quot;Wahrscheinlich&quot;, &quot;ist&quot;, &quot;eher&quot;, &quot;das&quot;, &quot;Gegenteil&quot;, &quot;der&quot;, &quot;Fall.&quot;, &quot;Der&quot;, &quot;CSU-Politiker&quot;, &quot;Gerd&quot;, &quot;Müller,&quot;, &quot;Staatssekretär&quot;, &quot;im&quot;, &quot;Bundes-Agrarministerium,&quot;, &quot;zeigte&quot;, &quot;sich&quot;, &quot;nur&quot;, &quot;bedingt&quot;, &quot;offen&quot;, &quot;für&quot;, &quot;ein&quot;, &quot;Verbot&quot;, &quot;von&quot;, &quot;Zirkustieren.&quot;, &quot;Seine&quot;, &quot;Argumentation:&quot;, &quot;\&quot;Es&quot;, &quot;wäre&quot;, &quot;schade,&quot;, &quot;wenn&quot;, &quot;es&quot;, &quot;einen&quot;, &quot;Zirkus&quot;, &quot;ohne&quot;, &quot;Elefanten&quot;, &quot;gäbe.\&quot;&quot;, &quot;Schade&quot;, &quot;für&quot;, &quot;wen?&quot;, &quot;Für&quot;, &quot;die&quot;, &quot;Zirkus-Betreiber,&quot;, &quot;die&quot;, &quot;in&quot;, &quot;Zukunft&quot;, &quot;weniger&quot;, &quot;Geld&quot;, &quot;mit&quot;, &quot;den&quot;, &quot;Tieren&quot;, &quot;verdienen&quot;, &quot;könnten?&quot;, &quot;Für&quot;, &quot;Kinder,&quot;, &quot;die&quot;, &quot;noch&quot;, &quot;zu&quot;, &quot;jung&quot;, &quot;sind,&quot;, &quot;um&quot;, &quot;die&quot;, &quot;Schattenseiten&quot;, &quot;der&quot;, &quot;Zirkus-Show&quot;, &quot;zu&quot;, &quot;begreifen?&quot;, &quot;Oder&quot;, &quot;für&quot;, &quot;Erwachsene,&quot;, &quot;die&quot;, &quot;mit&quot;, &quot;einem&quot;, &quot;Freizeitspaß&quot;, &quot;weniger&quot;, &quot;auskommen&quot;, &quot;müssten?&quot;, &quot;Und&quot;, &quot;warum&quot;, &quot;eigentlich&quot;, &quot;schade?&quot;, &quot;Weil&quot;, &quot;eine&quot;, &quot;Tradition&quot;, &quot;zu&quot;, &quot;Ende&quot;, &quot;ginge?&quot;, &quot;Eine&quot;, &quot;Tradition&quot;, &quot;muss&quot;, &quot;nicht&quot;, &quot;grundsätzlich&quot;, &quot;etwas&quot;, &quot;Gutes&quot;, &quot;sein.&quot;, &quot;Gerade&quot;, &quot;in&quot;, &quot;Deutschland&quot;, &quot;gibt&quot;, &quot;es&quot;, &quot;einige&quot;, &quot;gute&quot;, &quot;Beispiele&quot;, &quot;dafür,&quot;, &quot;dass&quot;, &quot;Traditionen&quot;, &quot;zu&quot;, &quot;Recht&quot;, &quot;auf&quot;, &quot;der&quot;, &quot;Müllhalde&quot;, &quot;der&quot;, &quot;Geschichte&quot;, &quot;landen,&quot;, &quot;wenn&quot;, &quot;sie&quot;, &quot;mit&quot;, &quot;modernen&quot;, &quot;Werten&quot;, &quot;nicht&quot;, &quot;mehr&quot;, &quot;vereinbar&quot;, &quot;sind.&quot;, &quot;Wenn&quot;, &quot;durch&quot;, &quot;ein&quot;, &quot;Wildtier-Verbot&quot;, &quot;der&quot;, &quot;eine&quot;, &quot;oder&quot;, &quot;andere&quot;, &quot;Zirkus&quot;, &quot;dicht&quot;, &quot;machen&quot;, &quot;müsste,&quot;, &quot;wäre&quot;, &quot;das&quot;, &quot;insgesamt&quot;, &quot;ein&quot;, &quot;geringer&quot;, &quot;Preis.&quot;, &quot;Veränderungen&quot;, &quot;führen&quot;, &quot;auch&quot;, &quot;in&quot;, &quot;anderen&quot;, &quot;Branchen&quot;, &quot;zu&quot;, &quot;Entlassungen.&quot;, &quot;Nur&quot;, &quot;sind&quot;, &quot;dann&quot;, &quot;meist&quot;, &quot;wesentlich&quot;, &quot;mehr&quot;, &quot;Mitarbeiter&quot;, &quot;betroffen,&quot;, &quot;als&quot;, &quot;es&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Zirkus-Branche&quot;, &quot;jemals&quot;, &quot;möglich&quot;, &quot;wäre.&quot;, &quot;Zudem&quot;, &quot;hieße&quot;, &quot;ein&quot;, &quot;Verbot&quot;, &quot;von&quot;, &quot;Wildtieren&quot;, &quot;nicht,&quot;, &quot;dass&quot;, &quot;es&quot;, &quot;keine&quot;, &quot;Zirkusse&quot;, &quot;mehr&quot;, &quot;geben&quot;, &quot;kann:&quot;, &quot;Viele&quot;, &quot;erfolgreiche&quot;, &quot;Zirkusse&quot;, &quot;kommen&quot;, &quot;auch&quot;, &quot;ohne&quot;, &quot;aus.&quot;, &quot;Für&quot;, &quot;die&quot;, &quot;Chefin&quot;, &quot;des&quot;, &quot;Zirkus&quot;, &quot;Krone&quot;, &quot;kommt&quot;, &quot;das&quot;, &quot;nicht&quot;, &quot;in&quot;, &quot;Frage:&quot;, &quot;\&quot;Zum&quot;, &quot;Zirkus&quot;, &quot;gehören&quot;, &quot;Tiere.&quot;, &quot;Ohne&quot;, &quot;Tiere&quot;, &quot;ist&quot;, &quot;der&quot;, &quot;Zirkus&quot;, &quot;kein&quot;, &quot;Zirkus&quot;, &quot;mehr.&quot;, &quot;Ein&quot;, &quot;Wildtier-Verbot&quot;, &quot;würde&quot;, &quot;wohl&quot;, &quot;auf&quot;, &quot;Dauer&quot;, &quot;das&quot;, &quot;Ende&quot;, &quot;des&quot;, &quot;klassischen&quot;, &quot;Zirkus&quot;, &quot;bedeuten\&quot;,&quot;, &quot;so&quot;, &quot;die&quot;, &quot;Zirkus-Chefin.&quot;, &quot;Wenn&quot;, &quot;der&quot;, &quot;klassische&quot;, &quot;Zirkus&quot;, &quot;wirklich&quot;, &quot;nicht&quot;, &quot;ohne&quot;, &quot;Motorrad&quot;, &quot;fahrende&quot;, &quot;Bären&quot;, &quot;auskommt -&quot;, &quot;er&quot;, &quot;hätte&quot;, &quot;sein&quot;, &quot;Ende&quot;, &quot;verdient.&quot;];&amp;#10;var t2_10 = [&quot;Die&quot;, &quot;Korallenriffe&quot;, &quot;und&quot;, &quot;die&quot;, &quot;sandigen&quot;, &quot;Buchten&quot;, &quot;sind&quot;, &quot;perfekt&quot;, &quot;für&quot;, &quot;jede&quot;, &quot;Urlaubsbroschüre.&quot;, &quot;Insgesamt&quot;, &quot;ist&quot;, &quot;die&quot;, &quot;Inselgruppe&quot;, &quot;namens&quot;, &quot;Nosy&quot;, &quot;Hara&quot;, &quot;vor&quot;, &quot;Madagaskar&quot;, &quot;aber&quot;, &quot;doch&quot;, &quot;recht&quot;, &quot;karg.&quot;, &quot;Nur&quot;, &quot;wenige&quot;, &quot;Pflanzen&quot;, &quot;bedecken&quot;, &quot;die&quot;, &quot;felsigen&quot;, &quot;Inselchen.&quot;, &quot;In&quot;, &quot;dieser&quot;, &quot;eher&quot;, &quot;lebensfeindlichen&quot;, &quot;Umgebung&quot;, &quot;haben&quot;, &quot;Biologen&quot;, &quot;nun&quot;, &quot;eine&quot;, &quot;neue&quot;, &quot;Tierart&quot;, &quot;entdeckt:&quot;, &quot;Das&quot;, &quot;winzige&quot;, &quot;Chamäleon&quot;, &quot;Brookesia&quot;, &quot;micra.&quot;, &quot;Von&quot;, &quot;der&quot;, &quot;Schnauze&quot;, &quot;bis&quot;, &quot;zum&quot;, &quot;Schwanzende&quot;, &quot;misst&quot;, &quot;es&quot;, &quot;weniger&quot;, &quot;als&quot;, &quot;drei&quot;, &quot;Zentimeter.&quot;, &quot;Damit&quot;, &quot;gehört&quot;, &quot;es&quot;, &quot;zu&quot;, &quot;den&quot;, &quot;kleinsten&quot;, &quot;Reptilien&quot;, &quot;der&quot;, &quot;Welt.&quot;, &quot;Farblich&quot;, &quot;machen&quot;, &quot;die&quot;, &quot;braun-grünen&quot;, &quot;Tierchen&quot;, &quot;wenig&quot;, &quot;her.&quot;, &quot;Anders&quot;, &quot;als&quot;, &quot;einige&quot;, &quot;andere&quot;, &quot;Chamäleons&quot;, &quot;können&quot;, &quot;sie&quot;, &quot;auch&quot;, &quot;nicht&quot;, &quot;ihre&quot;, &quot;Farbe&quot;, &quot;wechseln.&quot;, &quot;Doch&quot;, &quot;ihre&quot;, &quot;winzige&quot;, &quot;Körpergröße&quot;, &quot;fasziniert&quot;, &quot;die&quot;, &quot;Forscher.&quot;, &quot;\&quot;Das&quot;, &quot;ist&quot;, &quot;nichts,&quot;, &quot;wo&quot;, &quot;man&quot;, &quot;viele&quot;, &quot;Untersuchungen&quot;, &quot;machen&quot;, &quot;muss.&quot;, &quot;Man&quot;, &quot;erkennt&quot;, &quot;auch&quot;, &quot;so,&quot;, &quot;dass&quot;, &quot;das&quot;, &quot;etwas&quot;, &quot;Neues&quot;, &quot;ist\&quot;,&quot;, &quot;sagt&quot;, &quot;Miguel&quot;, &quot;Vences.&quot;, &quot;Der&quot;, &quot;Zoologe&quot;, &quot;berichtet&quot;, &quot;in&quot;, &quot;einem&quot;, &quot;Fachartikel&quot;, &quot;von&quot;, &quot;den&quot;, &quot;kleinen&quot;, &quot;Chamäleons.&quot;, &quot;Genetische&quot;, &quot;Untersuchungen&quot;, &quot;haben&quot;, &quot;Miguel&quot;, &quot;Vences&quot;, &quot;und&quot;, &quot;seine&quot;, &quot;Kollegen&quot;, &quot;natürlich&quot;, &quot;trotzdem&quot;, &quot;angestellt.&quot;, &quot;Dabei&quot;, &quot;berücksichtigen&quot;, &quot;die&quot;, &quot;Forscher&quot;, &quot;auch&quot;, &quot;weitere&quot;, &quot;Arten&quot;, &quot;von&quot;, &quot;Mini-Chamäleons&quot;, &quot;aus&quot;, &quot;Madagaskar.&quot;, &quot;Insgesamt&quot;, &quot;beschreiben&quot;, &quot;die&quot;, &quot;Biologen&quot;, &quot;in&quot;, &quot;ihrem&quot;, &quot;Artikel&quot;, &quot;gleich&quot;, &quot;vier&quot;, &quot;neue&quot;, &quot;Arten&quot;, &quot;von&quot;, &quot;Mini-Chamäleons.&quot;, &quot;Die&quot;, &quot;Forscher&quot;, &quot;stellten&quot;, &quot;jedoch&quot;, &quot;fest,&quot;, &quot;dass&quot;, &quot;die&quot;, &quot;vier&quot;, &quot;Arten&quot;, &quot;nur&quot;, &quot;entfernt&quot;, &quot;miteinander&quot;, &quot;verwandt&quot;, &quot;sind.&quot;, &quot;Ihre&quot;, &quot;Arten&quot;, &quot;haben&quot;, &quot;sich&quot;, &quot;scheinbar&quot;, &quot;bereits&quot;, &quot;vor&quot;, &quot;vielen&quot;, &quot;Millionen&quot;, &quot;Jahren&quot;, &quot;genetisch&quot;, &quot;getrennt.&quot;, &quot;Für&quot;, &quot;die&quot;, &quot;Forscher&quot;, &quot;bleibt&quot;, &quot;aber&quot;, &quot;noch&quot;, &quot;eine&quot;, &quot;weitere&quot;, &quot;wichtige&quot;, &quot;Frage&quot;, &quot;offen:&quot;, &quot;\&quot;Wie&quot;, &quot;haben&quot;, &quot;die&quot;, &quot;Tiere&quot;, &quot;eigentlich&quot;, &quot;so&quot;, &quot;lange&quot;, &quot;Zeit&quot;, &quot;auf&quot;, &quot;ihren&quot;, &quot;kleinen&quot;, &quot;Inselchen&quot;, &quot;überleben&quot;, &quot;können?\&quot;&quot;, &quot;Die&quot;, &quot;Heimat&quot;, &quot;der&quot;, &quot;Tiere&quot;, &quot;ist&quot;, &quot;nach&quot;, &quot;Schätzung&quot;, &quot;der&quot;, &quot;Forscher&quot;, &quot;gerade&quot;, &quot;einmal&quot;, &quot;so&quot;, &quot;groß&quot;, &quot;wie&quot;, &quot;70&quot;, &quot;Fußballfelder.&quot;, &quot;Laut&quot;, &quot;den&quot;, &quot;Forschern&quot;, &quot;weiß&quot;, &quot;man&quot;, &quot;von&quot;, &quot;den&quot;, &quot;Tieren&quot;, &quot;kaum&quot;, &quot;mehr,&quot;, &quot;als&quot;, &quot;dass&quot;, &quot;es&quot;, &quot;sie&quot;, &quot;gibt.&quot;, &quot;Zu&quot;, &quot;ihrer&quot;, &quot;Lebensweise&quot;, &quot;ist&quot;, &quot;nur&quot;, &quot;sehr&quot;, &quot;wenig&quot;, &quot;bekannt.&quot;, &quot;Ein&quot;, &quot;Teil&quot;, &quot;der&quot;, &quot;Erklärung&quot;, &quot;für&quot;, &quot;das&quot;, &quot;Überleben&quot;, &quot;in&quot;, &quot;ihrem&quot;, &quot;sehr&quot;, &quot;kleinen&quot;, &quot;Lebensraum&quot;, &quot;ist&quot;, &quot;wohl&quot;, &quot;die&quot;, &quot;Unauffälligkeit&quot;, &quot;der&quot;, &quot;kleinen&quot;, &quot;Reptilien.&quot;, &quot;Tagsüber&quot;, &quot;leben&quot;, &quot;die&quot;, &quot;kleinen&quot;, &quot;Chamäleons&quot;, &quot;am&quot;, &quot;Boden.&quot;, &quot;Wenn&quot;, &quot;möglich&quot;, &quot;verbergen&quot;, &quot;sie&quot;, &quot;sich&quot;, &quot;dabei&quot;, &quot;unter&quot;, &quot;einer&quot;, &quot;Schicht&quot;, &quot;Laub.&quot;, &quot;Nachts&quot;, &quot;geht&quot;, &quot;es&quot;, &quot;dann&quot;, &quot;auf&quot;, &quot;niedrig&quot;, &quot;gelegene&quot;, &quot;Äste&quot;, &quot;zum&quot;, &quot;Schlafen.&quot;, &quot;Direkte&quot;, &quot;Fressfeinde&quot;, &quot;haben&quot;, &quot;die&quot;, &quot;Tierchen&quot;, &quot;allerdings&quot;, &quot;wohl&quot;, &quot;eher&quot;, &quot;nicht.&quot;, &quot;Zu&quot;, &quot;ihrem&quot;, &quot;Glück,&quot;, &quot;so&quot;, &quot;die&quot;, &quot;Forscher.&quot;, &quot;Auf&quot;, &quot;solchen&quot;, &quot;kleinen&quot;, &quot;Inseln&quot;, &quot;kann&quot;, &quot;die&quot;, &quot;Konkurrenz&quot;, &quot;zwischen&quot;, &quot;den&quot;, &quot;Tierarten&quot;, &quot;schnell&quot;, &quot;sehr&quot;, &quot;groß&quot;, &quot;werden.&quot;, &quot;Auch&quot;, &quot;die&quot;, &quot;anderen&quot;, &quot;neuen&quot;, &quot;Chamäleon-Arten&quot;, &quot;besiedeln&quot;, &quot;nur&quot;, &quot;kleine&quot;, &quot;Gebiete&quot;, &quot;auf&quot;, &quot;Madagaskar.&quot;, &quot;Durch&quot;, &quot;die&quot;, &quot;Zerstörung&quot;, &quot;ihres&quot;, &quot;Lebensraums&quot;, &quot;sind&quot;, &quot;sie&quot;, &quot;jedoch&quot;, &quot;besonders&quot;, &quot;bedroht.&quot;, &quot;Eine&quot;, &quot;der&quot;, &quot;neuen&quot;, &quot;Arten,&quot;, &quot;genannt&quot;, &quot;Brookesia&quot;, &quot;desperata,&quot;, &quot;ist&quot;, &quot;nur&quot;, &quot;aus&quot;, &quot;einem&quot;, &quot;kleinen&quot;, &quot;Regenwald&quot;, &quot;bekannt.&quot;, &quot;Aber&quot;, &quot;obwohl&quot;, &quot;dieses&quot;, &quot;Gebiet&quot;, &quot;offiziell&quot;, &quot;unter&quot;, &quot;Schutz&quot;, &quot;steht,&quot;, &quot;werden&quot;, &quot;im&quot;, &quot;Inneren&quot;, &quot;des&quot;, &quot;Reservats&quot;, &quot;heimlich&quot;, &quot;fleißig&quot;, &quot;Bäume&quot;, &quot;gefällt.&quot;, &quot;Die&quot;, &quot;Tierwelt&quot;, &quot;von&quot;, &quot;Madagaskar&quot;, &quot;gilt&quot;, &quot;als&quot;, &quot;einzigartig.&quot;, &quot;Neben&quot;, &quot;den&quot;, &quot;berühmten&quot;, &quot;Maus-Makis&quot;, &quot;tummeln&quot;, &quot;sich&quot;, &quot;dort&quot;, &quot;unter&quot;, &quot;anderem&quot;, &quot;fast&quot;, &quot;300&quot;, &quot;Frosch-Arten&quot;, &quot;und&quot;, &quot;knapp&quot;, &quot;400&quot;, &quot;Reptilien-Arten.&quot;, &quot;Regelmäßig&quot;, &quot;werden&quot;, &quot;bei&quot;, &quot;Expeditionen&quot;, &quot;weitere&quot;, &quot;neue&quot;, &quot;Arten&quot;, &quot;entdeckt.&quot;, &quot;Doch&quot;, &quot;gleichzeitig&quot;, &quot;sind&quot;, &quot;viele&quot;, &quot;von&quot;, &quot;ihnen&quot;, &quot;stark&quot;, &quot;bedroht.&quot;, &quot;Rund&quot;, &quot;40&quot;, &quot;Prozent&quot;, &quot;der&quot;, &quot;Reptilien-Arten&quot;, &quot;auf&quot;, &quot;der&quot;, &quot;Madagaskar&quot;, &quot;gelten&quot;, &quot;mittlerweile&quot;, &quot;als&quot;, &quot;gefährdet.&quot;, &quot;Die&quot;, &quot;politische&quot;, &quot;Lage&quot;, &quot;auf&quot;, &quot;Madagaskar&quot;, &quot;ist&quot;, &quot;zudem&quot;, &quot;alles&quot;, &quot;andere&quot;, &quot;als&quot;, &quot;stabil.&quot;, &quot;Seit&quot;, &quot;dem&quot;, &quot;Jahr&quot;, &quot;2009&quot;, &quot;regiert&quot;, &quot;eine&quot;, &quot;Übergangsregierung,&quot;, &quot;die&quot;, &quot;mit&quot;, &quot;Gewalt&quot;, &quot;an&quot;, &quot;die&quot;, &quot;Macht&quot;, &quot;gekommen&quot;, &quot;ist.&quot;, &quot;Naturschutz&quot;, &quot;lässt&quot;, &quot;sich&quot;, &quot;unter&quot;, &quot;diesen&quot;, &quot;Bedingungen&quot;, &quot;nur&quot;, &quot;schwer&quot;, &quot;durchsetzen.&quot;, &quot;Die&quot;, &quot;Forscher&quot;, &quot;befürchten,&quot;, &quot;dass&quot;, &quot;auch&quot;, &quot;Brookesia&quot;, &quot;tristis,&quot;, &quot;eine&quot;, &quot;weitere&quot;, &quot;neue&quot;, &quot;entdeckte&quot;, &quot;Art,&quot;, &quot;einer&quot;, &quot;ungewissen&quot;, &quot;Zukunft&quot;, &quot;entgegen&quot;, &quot;sieht.&quot;, &quot;Zwar&quot;, &quot;ist&quot;, &quot;der&quot;, &quot;Lebensraum&quot;, &quot;des&quot;, &quot;Chamäleons&quot;, &quot;vor&quot;, &quot;wenigen&quot;, &quot;Jahren&quot;, &quot;unter&quot;, &quot;Schutz&quot;, &quot;gestellt&quot;, &quot;worden.&quot;, &quot;Doch&quot;, &quot;die&quot;, &quot;Abholzung&quot;, &quot;des&quot;, &quot;Gebiets&quot;, &quot;hat&quot;, &quot;seitdem&quot;, &quot;noch&quot;, &quot;zugenommen.&quot;, &quot;Mit&quot;, &quot;der&quot;, &quot;Wahl&quot;, &quot;der&quot;, &quot;Namen&quot;, &quot;der&quot;, &quot;neu&quot;, &quot;entdeckten&quot;, &quot;Chamäleon-Arten&quot;, &quot;wollen&quot;, &quot;sie&quot;, &quot;auf&quot;, &quot;die&quot;, &quot;große&quot;, &quot;Gefahr&quot;, &quot;hinweisen,&quot;, &quot;die&quot;, &quot;den&quot;, &quot;Chamäleons&quot;, &quot;droht.&quot;, &quot;Die&quot;, &quot;Botschaft&quot;, &quot;hinter&quot;, &quot;den&quot;, &quot;Namen&quot;, &quot;Brookesia&quot;, &quot;desperata&quot;, &quot;und&quot;, &quot;Brookesia&quot;, &quot;tristis&quot;, &quot;versteht&quot;, &quot;man&quot;, &quot;auch&quot;, &quot;ohne&quot;, &quot;Latein&quot;, &quot;zu&quot;, &quot;können:&quot;, &quot;Desperata&quot;, &quot;heißt&quot;, &quot;verzweifelt&quot;, &quot;und&quot;, &quot;tristis&quot;, &quot;so&quot;, &quot;viel&quot;, &quot;wie&quot;, &quot;traurig.&quot;];&amp;#10;var t2_11 = [&quot;Wer&quot;, &quot;Angkor&quot;, &quot;sagt,&quot;, &quot;meint&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Regel&quot;, &quot;Angkor&quot;, &quot;Wat.&quot;, &quot;Die&quot;, &quot;berühmte&quot;, &quot;Tempel-Anlage&quot;, &quot;wurde&quot;, &quot;vermutlich&quot;, &quot;vor&quot;, &quot;knapp&quot;, &quot;900&quot;, &quot;Jahren&quot;, &quot;in&quot;, &quot;den&quot;, &quot;Dschungel&quot;, &quot;Kambodschas&quot;, &quot;gebaut.&quot;, &quot;Doch&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Region&quot;, &quot;Angkor&quot;, &quot;gibt&quot;, &quot;es&quot;, &quot;mehr.&quot;, &quot;Viel&quot;, &quot;mehr,&quot;, &quot;als&quot;, &quot;selbst&quot;, &quot;Experten&quot;, &quot;bisher&quot;, &quot;vermutet&quot;, &quot;haben.&quot;, &quot;Seit&quot;, &quot;mehr&quot;, &quot;als&quot;, &quot;100&quot;, &quot;Jahren&quot;, &quot;hat&quot;, &quot;sich&quot;, &quot;die&quot;, &quot;Wissenschaft&quot;, &quot;auf&quot;, &quot;die&quot;, &quot;riesigen&quot;, &quot;Tempelanlagen&quot;, &quot;und&quot;, &quot;ihre&quot;, &quot;Inschriften&quot;, &quot;konzentriert.&quot;, &quot;Wo&quot;, &quot;und&quot;, &quot;wie&quot;, &quot;die&quot;, &quot;Menschen&quot;, &quot;dort&quot;, &quot;gelebt&quot;, &quot;haben,&quot;, &quot;wollte&quot;, &quot;niemand&quot;, &quot;herausfinden.&quot;, &quot;Oder&quot;, &quot;konnte&quot;, &quot;es&quot;, &quot;nicht&quot;, &quot;wegen&quot;, &quot;der&quot;, &quot;vielen&quot;, &quot;Jahre&quot;, &quot;der&quot;, &quot;Gewalt.&quot;, &quot;Erst&quot;, &quot;seit&quot;, &quot;dem&quot;, &quot;Ende&quot;, &quot;des&quot;, &quot;Terror-Regimes&quot;, &quot;der&quot;, &quot;Roten&quot;, &quot;Khmer&quot;, &quot;in&quot;, &quot;den&quot;, &quot;neunziger&quot;, &quot;Jahren&quot;, &quot;ist&quot;, &quot;die&quot;, &quot;Erforschung&quot;, &quot;von&quot;, &quot;Angkor&quot;, &quot;halbwegs&quot;, &quot;sicher.&quot;, &quot;Der&quot;, &quot;Forscher&quot;, &quot;Damian&quot;, &quot;Evans&quot;, &quot;hat&quot;, &quot;die&quot;, &quot;Zeit&quot;, &quot;gemeinsam&quot;, &quot;mit&quot;, &quot;seinem&quot;, &quot;Team&quot;, &quot;genutzt.&quot;, &quot;Denn&quot;, &quot;was&quot;, &quot;sie&quot;, &quot;jetzt&quot;, &quot;herausgefunden&quot;, &quot;haben,&quot;, &quot;ist&quot;, &quot;atemberaubend.&quot;, &quot;Ihrer&quot;, &quot;neuen&quot;, &quot;Karte&quot;, &quot;zufolge&quot;, &quot;haben&quot;, &quot;sich&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Gegend&quot;, &quot;von&quot;, &quot;Angkor&quot;, &quot;Wat&quot;, &quot;keineswegs&quot;, &quot;nur&quot;, &quot;verstreute&quot;, &quot;Tempel&quot;, &quot;befunden.&quot;, &quot;Stattdessen&quot;, &quot;geht&quot;, &quot;man&quot;, &quot;nun&quot;, &quot;davon&quot;, &quot;aus,&quot;, &quot;dass&quot;, &quot;Angkor&quot;, &quot;Wat&quot;, &quot;eine&quot;, &quot;Stadt&quot;, &quot;war,&quot;, &quot;die&quot;, &quot;sogar&quot;, &quot;größer&quot;, &quot;war&quot;, &quot;als&quot;, &quot;New&quot;, &quot;York.&quot;, &quot;Damit&quot;, &quot;ist&quot;, &quot;\&quot;Groß-Angkor\&quot;&quot;, &quot;die&quot;, &quot;mit&quot;, &quot;Abstand&quot;, &quot;größte&quot;, &quot;vorindustrielle&quot;, &quot;Siedlung&quot;, &quot;der&quot;, &quot;Welt.&quot;, &quot;Selbst&quot;, &quot;die&quot;, &quot;riesigen&quot;, &quot;Städte&quot;, &quot;der&quot;, &quot;Maya&quot;, &quot;erscheinen&quot;, &quot;dagegen&quot;, &quot;winzig.&quot;, &quot;Die&quot;, &quot;Forscher&quot;, &quot;fanden&quot;, &quot;außerdem&quot;, &quot;heraus,&quot;, &quot;dass&quot;, &quot;Angkor&quot;, &quot;eine&quot;, &quot;hydraulische&quot;, &quot;Stadt&quot;, &quot;war.&quot;, &quot;Dank&quot;, &quot;eines&quot;, &quot;komplizierten&quot;, &quot;Bewässerungssystems&quot;, &quot;konnten&quot;, &quot;die&quot;, &quot;mehr&quot;, &quot;als&quot;, &quot;eine&quot;, &quot;Million&quot;, &quot;Bewohner&quot;, &quot;versorgt&quot;, &quot;werden.&quot;, &quot;Durch&quot;, &quot;das&quot;, &quot;riesige&quot;, &quot;Netz&quot;, &quot;aus&quot;, &quot;Flüssen,&quot;, &quot;Kanälen&quot;, &quot;und&quot;, &quot;Stauseen&quot;, &quot;hat&quot;, &quot;die&quot;, &quot;mittelalterliche&quot;, &quot;Stadt&quot;, &quot;mehrmals&quot;, &quot;im&quot;, &quot;Jahr&quot;, &quot;Reis&quot;, &quot;ernten&quot;, &quot;können.&quot;, &quot;Das&quot;, &quot;verschaffte&quot;, &quot;den&quot;, &quot;Bewohnern&quot;, &quot;nicht&quot;, &quot;nur&quot;, &quot;volle&quot;, &quot;Teller,&quot;, &quot;sondern&quot;, &quot;auch&quot;, &quot;einen&quot;, &quot;enormen&quot;, &quot;Reichtum.&quot;, &quot;Die&quot;, &quot;Bewässerungsanlagen&quot;, &quot;wurden&quot;, &quot;bei&quot;, &quot;Vermessungen&quot;, &quot;des&quot;, &quot;Bodens&quot;, &quot;gefunden.&quot;, &quot;Es&quot;, &quot;konnten&quot;, &quot;mehr&quot;, &quot;als&quot;, &quot;tausend&quot;, &quot;künstlich&quot;, &quot;angelegte&quot;, &quot;Seen&quot;, &quot;entdeckt&quot;, &quot;werden.&quot;, &quot;Die&quot;, &quot;Karte&quot;, &quot;zeigt&quot;, &quot;erstmals,&quot;, &quot;dass&quot;, &quot;Angkor&quot;, &quot;keine&quot;, &quot;Ansammlung&quot;, &quot;von&quot;, &quot;Tempeln&quot;, &quot;war.&quot;, &quot;Es&quot;, &quot;war&quot;, &quot;vielmehr&quot;, &quot;eine&quot;, &quot;funktionierende&quot;, &quot;Stadt,&quot;, &quot;die&quot;, &quot;etwa&quot;, &quot;zehnmal&quot;, &quot;so&quot;, &quot;groß&quot;, &quot;ist&quot;, &quot;wie&quot;, &quot;alles,&quot;, &quot;was&quot;, &quot;bisher&quot;, &quot;aus&quot;, &quot;der&quot;, &quot;antiken&quot;, &quot;Welt&quot;, &quot;gefunden&quot;, &quot;wurde.&quot;, &quot;Die&quot;, &quot;Karte&quot;, &quot;zeigt&quot;, &quot;auch,&quot;, &quot;dass&quot;, &quot;die&quot;, &quot;Größe&quot;, &quot;antiker&quot;, &quot;Städte&quot;, &quot;nicht&quot;, &quot;einfach&quot;, &quot;anhand&quot;, &quot;ihrer&quot;, &quot;Stadtmauern&quot;, &quot;berechnet&quot;, &quot;werden&quot;, &quot;kann.&quot;, &quot;Angkor&quot;, &quot;Wat&quot;, &quot;ist&quot;, &quot;zwar&quot;, &quot;besonders&quot;, &quot;dicht&quot;, &quot;besiedelt&quot;, &quot;gewesen,&quot;, &quot;endete&quot;, &quot;aber&quot;, &quot;nicht&quot;, &quot;an&quot;, &quot;den&quot;, &quot;Stadtmauern.&quot;, &quot;Die&quot;, &quot;Stadt&quot;, &quot;umgab&quot;, &quot;ein&quot;, &quot;riesiges&quot;, &quot;Geflecht&quot;, &quot;aus&quot;, &quot;Äckern,&quot;, &quot;Häusern&quot;, &quot;und&quot;, &quot;Seen,&quot;, &quot;das&quot;, &quot;sich&quot;, &quot;über&quot;, &quot;mindestens&quot;, &quot;tausend&quot;, &quot;Quadratkilometer&quot;, &quot;erstreckte.&quot;, &quot;Auf&quot;, &quot;dieser&quot;, &quot;Fläche&quot;, &quot;gibt&quot;, &quot;es&quot;, &quot;kaum&quot;, &quot;einen&quot;, &quot;Fleck,&quot;, &quot;der&quot;, &quot;nicht&quot;, &quot;genutzt&quot;, &quot;worden&quot;, &quot;ist.&quot;, &quot;Das&quot;, &quot;Bewässerungsnetz&quot;, &quot;war&quot;, &quot;sogar&quot;, &quot;dazu&quot;, &quot;geeignet,&quot;, &quot;den&quot;, &quot;Reisanbau&quot;, &quot;zu&quot;, &quot;stärken.&quot;, &quot;Jede&quot;, &quot;einzelne&quot;, &quot;Wasserquelle&quot;, &quot;der&quot;, &quot;Region&quot;, &quot;wurde&quot;, &quot;rücksichtslos&quot;, &quot;ausgebeutet.&quot;, &quot;Das&quot;, &quot;hat&quot;, &quot;vermutlich&quot;, &quot;auch&quot;, &quot;zum&quot;, &quot;Untergang&quot;, &quot;der&quot;, &quot;Stadt&quot;, &quot;geführt.&quot;, &quot;Für&quot;, &quot;den&quot;, &quot;Anbau&quot;, &quot;von&quot;, &quot;Reis&quot;, &quot;braucht&quot;, &quot;man&quot;, &quot;extrem&quot;, &quot;viel&quot;, &quot;Wasser&quot;, &quot;und&quot;, &quot;riesige&quot;, &quot;Flächen.&quot;, &quot;Um&quot;, &quot;die&quot;, &quot;bewässerten&quot;, &quot;Felder&quot;, &quot;anzulegen&quot;, &quot;mussten&quot;, &quot;große&quot;, &quot;Waldflächen&quot;, &quot;gerodet&quot;, &quot;werden.&quot;, &quot;Mit&quot;, &quot;der&quot;, &quot;Zeit&quot;, &quot;führte&quot;, &quot;das&quot;, &quot;wahrscheinlich&quot;, &quot;zu&quot;, &quot;riesigen&quot;, &quot;Problemen&quot;, &quot;wie&quot;, &quot;Erdrutschen.&quot;, &quot;Das&quot;, &quot;gesamte&quot;, &quot;System&quot;, &quot;dürfte&quot;, &quot;außerdem&quot;, &quot;sehr&quot;, &quot;empfindlich&quot;, &quot;auf&quot;, &quot;Naturkatastrophen&quot;, &quot;reagiert&quot;, &quot;haben.&quot;, &quot;Insbesondere&quot;, &quot;im&quot;, &quot;Norden&quot;, &quot;der&quot;, &quot;Stadt&quot;, &quot;fand&quot;, &quot;man&quot;, &quot;Spuren&quot;, &quot;von&quot;, &quot;hektischen&quot;, &quot;Anpassungen&quot;, &quot;und&quot;, &quot;Deichbrüchen.&quot;, &quot;Genaueres&quot;, &quot;weiß&quot;, &quot;man&quot;, &quot;aber&quot;, &quot;nicht.&quot;, &quot;Die&quot;, &quot;neue&quot;, &quot;Karte&quot;, &quot;der&quot;, &quot;Stadt&quot;, &quot;verrät&quot;, &quot;aber&quot;, &quot;zumindest,&quot;, &quot;wo&quot;, &quot;man&quot;, &quot;nach&quot;, &quot;Antworten&quot;, &quot;suchen&quot;, &quot;sollte.&quot;];&amp;#10;var t2_13 = [&quot;Berlin,&quot;, &quot;windig,&quot;, &quot;zehn&quot;, &quot;Grad.&quot;, &quot;Der&quot;, &quot;Hut&quot;, &quot;sitzt.&quot;, &quot;Florence&quot;, &quot;Welch&quot;, &quot;gibt&quot;, &quot;auf&quot;, &quot;der&quot;, &quot;Dachterrasse&quot;, &quot;eines&quot;, &quot;Clubs&quot;, &quot;ein&quot;, &quot;kleines&quot;, &quot;Akustik-Konzert.&quot;, &quot;Die&quot;, &quot;25-jährige&quot;, &quot;Londonerin&quot;, &quot;tuschelt&quot;, &quot;mit&quot;, &quot;ihrem&quot;, &quot;Gitarristen&quot;, &quot;und&quot;, &quot;lacht&quot;, &quot;schallend.&quot;, &quot;Sobald&quot;, &quot;das&quot;, &quot;Zeichen&quot;, &quot;zum&quot;, &quot;Spielen&quot;, &quot;gegeben&quot;, &quot;wird&quot;, &quot;ist&quot;, &quot;sie&quot;, &quot;jedoch&quot;, &quot;sofort&quot;, &quot;wieder&quot;, &quot;hochkonzentriert.&quot;, &quot;Mit&quot;, &quot;ihrem&quot;, &quot;breitkrempigen&quot;, &quot;Hut&quot;, &quot;und&quot;, &quot;den&quot;, &quot;roten&quot;, &quot;Haaren&quot;, &quot;erinnert&quot;, &quot;sie&quot;, &quot;äußerlich&quot;, &quot;an&quot;, &quot;Sängerinnen&quot;, &quot;aus&quot;, &quot;den&quot;, &quot;Siebzigern&quot;, &quot;wie&quot;, &quot;Stevie&quot;, &quot;Nicks.&quot;, &quot;Das&quot;, &quot;Lied,&quot;, &quot;das&quot;, &quot;leise&quot;, &quot;begann,&quot;, &quot;nähert&quot;, &quot;sich&quot;, &quot;seinem&quot;, &quot;Höhepunkt.&quot;, &quot;Florence&quot;, &quot;Welchs&quot;, &quot;Gesang&quot;, &quot;wird&quot;, &quot;intensiver -&quot;, &quot;da&quot;, &quot;kommt&quot;, &quot;aus&quot;, &quot;den&quot;, &quot;Boxen&quot;, &quot;ein&quot;, &quot;plötzlicher&quot;, &quot;Hall,&quot;, &quot;die&quot;, &quot;Sängerin&quot;, &quot;bricht&quot;, &quot;ab.&quot;, &quot;Zwei&quot;, &quot;Stunden&quot;, &quot;später&quot;, &quot;und&quot;, &quot;fünf&quot;, &quot;Kilometer&quot;, &quot;weiter&quot;, &quot;sitzt&quot;, &quot;Florence&quot;, &quot;Welch&quot;, &quot;für&quot;, &quot;ein&quot;, &quot;Interview&quot;, &quot;an&quot;, &quot;einem&quot;, &quot;Tisch,&quot;, &quot;der&quot;, &quot;Hut&quot;, &quot;liegt&quot;, &quot;neben&quot;, &quot;ihr&quot;, &quot;auf&quot;, &quot;der&quot;, &quot;Sitzbank.&quot;, &quot;\&quot;Ich&quot;, &quot;liebe&quot;, &quot;Hüte.&quot;, &quot;Ich&quot;, &quot;kaufe&quot;, &quot;immer&quot;, &quot;welche,&quot;, &quot;wenn&quot;, &quot;ich&quot;, &quot;unterwegs&quot;, &quot;bin\&quot;,&quot;, &quot;sagt&quot;, &quot;sie.&quot;, &quot;Doch&quot;, &quot;sie&quot;, &quot;beklagt,&quot;, &quot;dass&quot;, &quot;sie&quot;, &quot;keine&quot;, &quot;vernünftige&quot;, &quot;Hutschachtel&quot;, &quot;habe:&quot;, &quot;\&quot;Zu&quot;, &quot;Hause&quot;, &quot;habe&quot;, &quot;ich&quot;, &quot;einige&quot;, &quot;schöne,&quot;, &quot;alte&quot;, &quot;Hutschachteln.&quot;, &quot;Aber&quot;, &quot;die&quot;, &quot;gehen&quot;, &quot;zu&quot;, &quot;leicht&quot;, &quot;kaputt.\&quot;&quot;, &quot;Aber&quot;, &quot;gibt&quot;, &quot;es&quot;, &quot;denn&quot;, &quot;keine&quot;, &quot;Hightech-Hutschachteln,&quot;, &quot;die&quot;, &quot;man&quot;, &quot;auch&quot;, &quot;in&quot;, &quot;Flugzeuge&quot;, &quot;und&quot;, &quot;Tourbusse&quot;, &quot;mitnehmen&quot;, &quot;kann?&quot;, &quot;\&quot;Kann&quot;, &quot;sein,&quot;, &quot;aber&quot;, &quot;ich&quot;, &quot;bin&quot;, &quot;kein&quot;, &quot;Hightech-Mädchen.&quot;, &quot;Das&quot;, &quot;würde&quot;, &quot;nicht&quot;, &quot;zu&quot;, &quot;mir&quot;, &quot;passen.&quot;, &quot;Ich&quot;, &quot;will&quot;, &quot;alte,&quot;, &quot;mit&quot;, &quot;Mustern&quot;, &quot;drauf.\&quot;&quot;, &quot;Mit&quot;, &quot;ihrer&quot;, &quot;etwas&quot;, &quot;altmodischen&quot;, &quot;Art&quot;, &quot;ist&quot;, &quot;Florence&quot;, &quot;Welch&quot;, &quot;seit&quot;, &quot;2009&quot;, &quot;für&quot;, &quot;immer&quot;, &quot;mehr&quot;, &quot;Menschen&quot;, &quot;zu&quot;, &quot;einem&quot;, &quot;besonderen&quot;, &quot;Popstar&quot;, &quot;geworden.&quot;, &quot;Sie&quot;, &quot;nennt&quot;, &quot;sich&quot;, &quot;\&quot;Florence&quot;, &quot;&amp;&quot;, &quot;The&quot;, &quot;Machine\&quot;.&quot;, &quot;\&quot;The&quot;, &quot;Machine\&quot;&quot;, &quot;ist&quot;, &quot;dabei&quot;, &quot;keine&quot;, &quot;feste&quot;, &quot;Band,&quot;, &quot;sondern&quot;, &quot;wer&quot;, &quot;auch&quot;, &quot;immer&quot;, &quot;sie&quot;, &quot;gerade&quot;, &quot;begleitet.&quot;, &quot;Und&quot;, &quot;Florence&quot;, &quot;ist&quot;, &quot;immer&quot;, &quot;die&quot;, &quot;Hauptperson.&quot;, &quot;Ihr&quot;, &quot;Debütalbum&quot;, &quot;\&quot;Lungs\&quot;&quot;, &quot;schaffte&quot;, &quot;es&quot;, &quot;auf&quot;, &quot;Platz&quot;, &quot;eins&quot;, &quot;der&quot;, &quot;britischen&quot;, &quot;Charts&quot;, &quot;und&quot;, &quot;wurde&quot;, &quot;auch&quot;, &quot;in&quot;, &quot;den&quot;, &quot;USA&quot;, &quot;mit&quot;, &quot;einer&quot;, &quot;Goldenen&quot;, &quot;Schallplatte&quot;, &quot;ausgezeichnet.&quot;, &quot;Zwei&quot;, &quot;Jahre&quot;, &quot;später&quot;, &quot;schaffte&quot;, &quot;es&quot;, &quot;Florence&quot;, &quot;Welch&quot;, &quot;sogar&quot;, &quot;auf&quot;, &quot;die&quot;, &quot;Liste&quot;, &quot;der&quot;, &quot;100&quot;, &quot;weltweit&quot;, &quot;einflussreichsten&quot;, &quot;Persönlichkeiten&quot;, &quot;des&quot;, &quot;Time&quot;, &quot;Magazine.&quot;, &quot;Doch&quot;, &quot;einen&quot;, &quot;solchen&quot;, &quot;Einfluss&quot;, &quot;hat&quot;, &quot;nicht,&quot;, &quot;wer&quot;, &quot;einfach&quot;, &quot;nur&quot;, &quot;eine&quot;, &quot;etwas&quot;, &quot;altmodische&quot;, &quot;Sängerin&quot;, &quot;ist,&quot;, &quot;die&quot;, &quot;mit&quot;, &quot;großer&quot;, &quot;Soulstimme&quot;, &quot;im&quot;, &quot;weitesten&quot;, &quot;Sinne&quot;, &quot;Indie-Popsongs&quot;, &quot;singt.&quot;, &quot;Florence&quot;, &quot;&amp;&quot;, &quot;The&quot;, &quot;Machine&quot;, &quot;ist&quot;, &quot;auch&quot;, &quot;ein&quot;, &quot;ausgesprochen&quot;, &quot;modernes&quot;, &quot;Pop-Produkt.&quot;, &quot;Der&quot;, &quot;Durchbruch&quot;, &quot;in&quot;, &quot;den&quot;, &quot;USA&quot;, &quot;kam&quot;, &quot;nach&quot;, &quot;einem&quot;, &quot;spektakulären&quot;, &quot;Auftritt&quot;, &quot;bei&quot;, &quot;den&quot;, &quot;MTV&quot;, &quot;Video&quot;, &quot;Music&quot;, &quot;Awards.&quot;, &quot;Florence&quot;, &quot;Welch&quot;, &quot;sang&quot;, &quot;dort&quot;, &quot;ihren&quot;, &quot;Song&quot;, &quot;\&quot;Dog&quot;, &quot;Days&quot;, &quot;Are&quot;, &quot;Over\&quot;&quot;, &quot;im&quot;, &quot;großen&quot;, &quot;Ballkleid&quot;, &quot;auf&quot;, &quot;einer&quot;, &quot;rotierenden&quot;, &quot;Scheibe,&quot;, &quot;umringt&quot;, &quot;von&quot;, &quot;Tänzern&quot;, &quot;und&quot;, &quot;Gospelchor.&quot;, &quot;Danach&quot;, &quot;tauchten&quot;, &quot;ihre&quot;, &quot;Lieder&quot;, &quot;im&quot;, &quot;Soundtrack&quot;, &quot;etlicher&quot;, &quot;amerikanischer&quot;, &quot;Fernsehserien&quot;, &quot;auf.&quot;, &quot;Welch&quot;, &quot;twittert&quot;, &quot;eifrig,&quot;, &quot;tritt&quot;, &quot;bei&quot;, &quot;Mitarbeiterversammlungen&quot;, &quot;von&quot;, &quot;Google&quot;, &quot;auf,&quot;, &quot;bei&quot;, &quot;der&quot;, &quot;Casting-Show&quot;, &quot;\&quot;X-Factor\&quot;&quot;, &quot;und&quot;, &quot;bei&quot;, &quot;Modenschauen&quot;, &quot;von&quot;, &quot;Karl&quot;, &quot;Lagerfeld.&quot;, &quot;Bei&quot;, &quot;dessen&quot;, &quot;Frühjahrsschau&quot;, &quot;entstieg&quot;, &quot;Florence&quot;, &quot;Welch&quot;, &quot;einer&quot;, &quot;Art&quot;, &quot;Muschel&quot;, &quot;und&quot;, &quot;ging&quot;, &quot;Hand&quot;, &quot;in&quot;, &quot;Hand&quot;, &quot;mit&quot;, &quot;dem&quot;, &quot;Designer&quot;, &quot;den&quot;, &quot;Catwalk&quot;, &quot;entlang.&quot;, &quot;Hätten&quot;, &quot;ihre&quot;, &quot;Heldinnen,&quot;, &quot;die&quot;, &quot;Soul-&quot;, &quot;und&quot;, &quot;Blues-Sängerinnen&quot;, &quot;der&quot;, &quot;sechziger&quot;, &quot;und&quot;, &quot;siebziger&quot;, &quot;Jahre,&quot;, &quot;all&quot;, &quot;das&quot;, &quot;mitgemacht?&quot;, &quot;\&quot;Schwer&quot;, &quot;zu&quot;, &quot;sagen.&quot;, &quot;Wir&quot;, &quot;leben&quot;, &quot;im&quot;, &quot;digitalen&quot;, &quot;Zeitalter.&quot;, &quot;Das&quot;, &quot;Internet&quot;, &quot;hat&quot;, &quot;den&quot;, &quot;Zugang&quot;, &quot;der&quot;, &quot;Menschen&quot;, &quot;zu&quot;, &quot;Musik&quot;, &quot;revolutioniert\&quot;,&quot;, &quot;sagt&quot;, &quot;Welch.&quot;, &quot;Aber&quot;, &quot;früher&quot;, &quot;seien&quot;, &quot;die&quot;, &quot;Sängerinnen&quot;, &quot;auch&quot;, &quot;ins&quot;, &quot;Fernsehen&quot;, &quot;gegangen,&quot;, &quot;sie&quot;, &quot;habe&quot;, &quot;zum&quot;, &quot;Beispiel&quot;, &quot;Ausschnitte&quot;, &quot;von&quot;, &quot;Janis&quot;, &quot;Joplin&quot;, &quot;gesehen.&quot;, &quot;Doch&quot;, &quot;sei&quot;, &quot;noch&quot;, &quot;nicht&quot;, &quot;alles&quot;, &quot;so&quot;, &quot;poliert&quot;, &quot;gewesen:&quot;, &quot;\&quot;Heute&quot;, &quot;suchen&quot;, &quot;alle&quot;, &quot;nach&quot;, &quot;dem&quot;, &quot;Hellsten,&quot;, &quot;Klarsten,&quot;, &quot;Schärfsten.&quot;, &quot;Das&quot;, &quot;interessiert&quot;, &quot;mich&quot;, &quot;gar&quot;, &quot;nicht&quot;, &quot;so.&quot;, &quot;Mir&quot;, &quot;ist&quot;, &quot;ein&quot;, &quot;knarrender&quot;, &quot;Kassettenrecorder&quot;, &quot;lieber&quot;, &quot;als&quot;, &quot;die&quot;, &quot;besten&quot;, &quot;Stereosysteme.\&quot;&quot;, &quot;Das&quot;, &quot;Seltsame&quot;, &quot;ist&quot;, &quot;nur:&quot;, &quot;Ihr&quot;, &quot;neues&quot;, &quot;Album&quot;, &quot;klingt&quot;, &quot;gar&quot;, &quot;nicht&quot;, &quot;nach&quot;, &quot;einer&quot;, &quot;solchen&quot;, &quot;Vorliebe&quot;, &quot;für&quot;, &quot;das&quot;, &quot;Unperfekte.&quot;, &quot;\&quot;Lungs\&quot;,&quot;, &quot;das&quot;, &quot;Debütalbum,&quot;, &quot;war&quot;, &quot;ein&quot;, &quot;charmanter&quot;, &quot;Mix&quot;, &quot;aus&quot;, &quot;Blues,&quot;, &quot;Disco&quot;, &quot;und&quot;, &quot;Soul,&quot;, &quot;aufgenommen&quot;, &quot;in&quot;, &quot;verschiedenen&quot;, &quot;Studios&quot;, &quot;mit&quot;, &quot;unterschiedlichen&quot;, &quot;Produzenten.&quot;, &quot;\&quot;Die&quot;, &quot;Lieder&quot;, &quot;habe&quot;, &quot;ich&quot;, &quot;im&quot;, &quot;Alter&quot;, &quot;von&quot;, &quot;17&quot;, &quot;bis&quot;, &quot;22&quot;, &quot;Jahren&quot;, &quot;geschrieben\&quot;,&quot;, &quot;sagt&quot;, &quot;Welch.&quot;, &quot;\&quot;Diesmal&quot;, &quot;wollte&quot;, &quot;ich&quot;, &quot;ein&quot;, &quot;einheitlicheres&quot;, &quot;Werk.&quot;, &quot;Ich&quot;, &quot;wollte&quot;, &quot;einen&quot;, &quot;bestimmten&quot;, &quot;Zeitpunkt&quot;, &quot;in&quot;, &quot;meinem&quot;, &quot;Leben&quot;, &quot;festhalten.\&quot;&quot;, &quot;Also&quot;, &quot;nahm&quot;, &quot;sie&quot;, &quot;ihr&quot;, &quot;neues&quot;, &quot;Album&quot;, &quot;ausschließlich&quot;, &quot;im&quot;, &quot;Abbey-Road-Studio&quot;, &quot;und&quot;, &quot;mit&quot;, &quot;nur&quot;, &quot;einem&quot;, &quot;Produzenten&quot;, &quot;auf.&quot;, &quot;Sehr&quot;, &quot;eindrucksvolle&quot;, &quot;Musik&quot;, &quot;ist&quot;, &quot;darauf&quot;, &quot;zu&quot;, &quot;hören.&quot;, &quot;Schöne&quot;, &quot;Produktionsideen,&quot;, &quot;bewegende&quot;, &quot;Texte&quot;, &quot;über&quot;, &quot;Bedauern&quot;, &quot;und&quot;, &quot;Betrug&quot;, &quot;oder&quot;, &quot;Begräbnisse&quot;, &quot;wie&quot;, &quot;im&quot;, &quot;herausragenden&quot;, &quot;Song&quot;, &quot;\&quot;No&quot;, &quot;Light,&quot;, &quot;No&quot;, &quot;Light\&quot;.&quot;, &quot;Das&quot;, &quot;amerikanische&quot;, &quot;Musik-Magazin&quot;, &quot;\&quot;Rolling&quot;, &quot;Stone\&quot;&quot;, &quot;sieht&quot;, &quot;sie&quot;, &quot;bereits&quot;, &quot;auf&quot;, &quot;dem&quot;, &quot;Weg&quot;, &quot;zu&quot;, &quot;U2-artiger&quot;, &quot;Popularität.&quot;, &quot;Eines&quot;, &quot;scheint&quot;, &quot;sicher:&quot;, &quot;Um&quot;, &quot;ihren&quot;, &quot;Hutschachtel-Nachschub&quot;, &quot;wird&quot;, &quot;sich&quot;, &quot;Florence&quot;, &quot;Welch&quot;, &quot;in&quot;, &quot;Zukunft&quot;, &quot;keine&quot;, &quot;Sorgen&quot;, &quot;machen&quot;, &quot;müssen.&quot;];&amp;#10;var t2_14 = [&quot;Strenge&quot;, &quot;Verhöre,&quot;, &quot;Wochen&quot;, &quot;in&quot;, &quot;einer&quot;, &quot;Zelle&quot;, &quot;ohne&quot;, &quot;Licht.&quot;, &quot;Nach&quot;, &quot;dem&quot;, &quot;Ende&quot;, &quot;des&quot;, &quot;zweiten&quot;, &quot;Weltkriegs&quot;, &quot;1945&quot;, &quot;befragten&quot;, &quot;die&quot;, &quot;Briten&quot;, &quot;den&quot;, &quot;Spionage-Chef&quot;, &quot;der&quot;, &quot;Nazis&quot;, &quot;Walter&quot;, &quot;Schellenberg.&quot;, &quot;Dieser&quot;, &quot;berichtete&quot;, &quot;im&quot;, &quot;Laufe&quot;, &quot;des&quot;, &quot;Verhörs&quot;, &quot;von&quot;, &quot;einer&quot;, &quot;Geheimoperation&quot;, &quot;mit&quot;, &quot;dem&quot;, &quot;Namen&quot;, &quot;\&quot;Modellhut\&quot;.&quot;, &quot;Aus&quot;, &quot;heutiger&quot;, &quot;Sicht&quot;, &quot;hört&quot;, &quot;sich&quot;, &quot;die&quot;, &quot;Operation&quot;, &quot;an&quot;, &quot;wie&quot;, &quot;aus&quot;, &quot;einem&quot;, &quot;Film&quot;, &quot;von&quot;, &quot;Quentin&quot;, &quot;Tarantino.&quot;, &quot;Bestandteile:&quot;, &quot;Nazi-Spione,&quot;, &quot;der&quot;, &quot;britische&quot;, &quot;Premierminister&quot;, &quot;und&quot;, &quot;die&quot;, &quot;berühmteste&quot;, &quot;Modeschöpferin&quot;, &quot;Frankreichs.&quot;, &quot;Schellenberg&quot;, &quot;berichtete,&quot;, &quot;er&quot;, &quot;sei&quot;, &quot;1944&quot;, &quot;von&quot;, &quot;der&quot;, &quot;\&quot;Existenz&quot;, &quot;einer&quot;, &quot;gewissen&quot;, &quot;Frau&quot;, &quot;Chanel&quot;, &quot;unterrichtet&quot;, &quot;worden\&quot;.&quot;, &quot;Ihm&quot;, &quot;wurde&quot;, &quot;berichtet,&quot;, &quot;Coco&quot;, &quot;Chanel&quot;, &quot;kenne&quot;, &quot;Winston&quot;, &quot;Churchill&quot;, &quot;gut&quot;, &quot;genug,&quot;, &quot;um&quot;, &quot;mit&quot;, &quot;ihm&quot;, &quot;für&quot;, &quot;die&quot;, &quot;Nazis&quot;, &quot;zu&quot;, &quot;verhandeln.&quot;, &quot;Das&quot;, &quot;Ziel:&quot;, &quot;Ein&quot;, &quot;Teil-Frieden&quot;, &quot;zwischen&quot;, &quot;Deutschland&quot;, &quot;und&quot;, &quot;Großbritannien.&quot;, &quot;Ein&quot;, &quot;geradezu&quot;, &quot;rührend&quot;, &quot;naives&quot;, &quot;Vorhaben.&quot;, &quot;Deutschland&quot;, &quot;hatte&quot;, &quot;bereits&quot;, &quot;kurz&quot;, &quot;zuvor&quot;, &quot;in&quot;, &quot;Russland&quot;, &quot;eine&quot;, &quot;schwere&quot;, &quot;Niederlage&quot;, &quot;erlitten.&quot;, &quot;Zudem&quot;, &quot;sollten&quot;, &quot;die&quot;, &quot;amerikanischen&quot;, &quot;Soldaten&quot;, &quot;nur&quot;, &quot;wenige&quot;, &quot;Monate&quot;, &quot;später&quot;, &quot;in&quot;, &quot;Frankreich&quot;, &quot;landen.&quot;, &quot;Trotzdem&quot;, &quot;nahm&quot;, &quot;Schellenberg&quot;, &quot;das&quot;, &quot;Angebot&quot;, &quot;ernst.&quot;, &quot;Coco&quot;, &quot;Chanel&quot;, &quot;reiste&quot;, &quot;nach&quot;, &quot;Madrid.&quot;, &quot;Dort&quot;, &quot;übergab&quot;, &quot;sie&quot;, &quot;ihrem&quot;, &quot;Freund,&quot;, &quot;dem&quot;, &quot;britischen&quot;, &quot;Botschafter,&quot;, &quot;einen&quot;, &quot;recht&quot;, &quot;vage&quot;, &quot;formulierten&quot;, &quot;Brief&quot;, &quot;an&quot;, &quot;Winston&quot;, &quot;Churchill.&quot;, &quot;Dieser&quot;, &quot;sollte&quot;, &quot;den&quot;, &quot;Brief&quot;, &quot;jedoch&quot;, &quot;nie&quot;, &quot;empfangen.&quot;, &quot;Statt&quot;, &quot;sich&quot;, &quot;in&quot;, &quot;London&quot;, &quot;aufzuhalten,&quot;, &quot;hütete&quot;, &quot;er&quot;, &quot;in&quot;, &quot;Tunesien&quot;, &quot;mit&quot;, &quot;39&quot;, &quot;Grad&quot;, &quot;Fieber&quot;, &quot;das&quot;, &quot;Krankenbett.&quot;, &quot;Der&quot;, &quot;Brief&quot;, &quot;wurde&quot;, &quot;ihm&quot;, &quot;also&quot;, &quot;nie&quot;, &quot;übergeben.&quot;, &quot;Die&quot;, &quot;Aussagen&quot;, &quot;aus&quot;, &quot;dem&quot;, &quot;Verhör&quot;, &quot;von&quot;, &quot;Schellenberg&quot;, &quot;sind&quot;, &quot;gut&quot;, &quot;dokumentiert.&quot;, &quot;Schon&quot;, &quot;im&quot;, &quot;Jahr&quot;, &quot;1974&quot;, &quot;erwähnte&quot;, &quot;der&quot;, &quot;erste&quot;, &quot;Biograf&quot;, &quot;von&quot;, &quot;Coco&quot;, &quot;Chanel&quot;, &quot;die&quot;, &quot;\&quot;Operation&quot;, &quot;Modellhut\&quot;.&quot;, &quot;Keiner&quot;, &quot;aber&quot;, &quot;hat&quot;, &quot;bislang&quot;, &quot;Chanels&quot;, &quot;Zusammenarbeit&quot;, &quot;mit&quot;, &quot;den&quot;, &quot;Nazis&quot;, &quot;so&quot;, &quot;zugespitzt&quot;, &quot;dargestellt&quot;, &quot;wie&quot;, &quot;der&quot;, &quot;Chanel-Biograf&quot;, &quot;Hal&quot;, &quot;Vaughan.&quot;, &quot;War&quot;, &quot;ausgerechnet&quot;, &quot;die&quot;, &quot;zierliche&quot;, &quot;Erfinderin&quot;, &quot;des&quot;, &quot;\&quot;Kleinen&quot;, &quot;Schwarzen\&quot;&quot;, &quot;in&quot;, &quot;Wahrheit&quot;, &quot;selbst&quot;, &quot;eine&quot;, &quot;kleine&quot;, &quot;Braune?&quot;, &quot;Machte&quot;, &quot;Chanel,&quot;, &quot;der&quot;, &quot;Inbegriff&quot;, &quot;französischer&quot;, &quot;Kultur,&quot;, &quot;während&quot;, &quot;der&quot;, &quot;Besetzung&quot;, &quot;Frankreichs&quot;, &quot;gemeinsame&quot;, &quot;Sache&quot;, &quot;mit&quot;, &quot;Nazis?&quot;, &quot;Im&quot;, &quot;Zentrum&quot;, &quot;von&quot;, &quot;Vaughans&quot;, &quot;Buch&quot;, &quot;steht&quot;, &quot;die&quot;, &quot;Affäre&quot;, &quot;Coco&quot;, &quot;Chanels&quot;, &quot;mit&quot;, &quot;Hans&quot;, &quot;Günther&quot;, &quot;von&quot;, &quot;Dincklage,&quot;, &quot;einem&quot;, &quot;schillernden&quot;, &quot;\&quot;Meisterspion&quot;, &quot;der&quot;, &quot;deutschen&quot;, &quot;Abwehr\&quot;.&quot;, &quot;Dincklage&quot;, &quot;wurde&quot;, &quot;einst&quot;, &quot;von&quot;, &quot;Goebbels&quot;, &quot;persönlich&quot;, &quot;zum&quot;, &quot;Sonderattaché&quot;, &quot;der&quot;, &quot;deutschen&quot;, &quot;Botschaft&quot;, &quot;in&quot;, &quot;Paris&quot;, &quot;befördert.&quot;, &quot;Trotz&quot;, &quot;seiner&quot;, &quot;stattlichen&quot;, &quot;Figur&quot;, &quot;und&quot;, &quot;seines&quot;, &quot;guten&quot;, &quot;Aussehens&quot;, &quot;wurde&quot;, &quot;er&quot;, &quot;verniedlichend&quot;, &quot;\&quot;Spatz\&quot;&quot;, &quot;genannt.&quot;, &quot;Mit&quot;, &quot;57&quot;, &quot;Jahren&quot;, &quot;verliebte&quot;, &quot;sich&quot;, &quot;Coco&quot;, &quot;Chanel&quot;, &quot;in&quot;, &quot;Dincklage.&quot;, &quot;Er&quot;, &quot;verschaffte&quot;, &quot;ihr&quot;, &quot;das&quot;, &quot;Privileg,&quot;, &quot;zwei&quot;, &quot;Zimmer&quot;, &quot;im&quot;, &quot;Ritz&quot;, &quot;zu&quot;, &quot;bewohnen.&quot;, &quot;Während&quot;, &quot;der&quot;, &quot;Besetzung&quot;, &quot;von&quot;, &quot;Paris&quot;, &quot;war&quot;, &quot;das&quot;, &quot;Luxushotel&quot;, &quot;nahezu&quot;, &quot;ausschließlich&quot;, &quot;von&quot;, &quot;der&quot;, &quot;Nazi-Elite&quot;, &quot;belegt.&quot;, &quot;Dincklage&quot;, &quot;war&quot;, &quot;es&quot;, &quot;auch,&quot;, &quot;der&quot;, &quot;Chanel&quot;, &quot;mit&quot;, &quot;einem&quot;, &quot;Freund&quot;, &quot;bekannt&quot;, &quot;machte,&quot;, &quot;der&quot;, &quot;als&quot;, &quot;Agent&quot;, &quot;für&quot;, &quot;die&quot;, &quot;Deutschen&quot;, &quot;arbeitete.&quot;, &quot;1941&quot;, &quot;wird&quot;, &quot;Coco&quot;, &quot;Chanel&quot;, &quot;dann&quot;, &quot;sogar&quot;, &quot;selbst&quot;, &quot;als&quot;, &quot;Agentin&quot;, &quot;verzeichnet.&quot;, &quot;Ihr&quot;, &quot;Codename:&quot;, &quot;\&quot;Westminster\&quot;.&quot;, &quot;Es&quot;, &quot;ist&quot;, &quot;eine&quot;, &quot;Anspielung&quot;, &quot;auf&quot;, &quot;einen&quot;, &quot;ihrer&quot;, &quot;früheren&quot;, &quot;Liebhaber,&quot;, &quot;den&quot;, &quot;Duke&quot;, &quot;of&quot;, &quot;Westminster.&quot;, &quot;Neben&quot;, &quot;Chanels&quot;, &quot;Geheimdienst-Akte&quot;, &quot;präsentiert&quot;, &quot;Vaughan&quot;, &quot;in&quot;, &quot;seinem&quot;, &quot;Buch&quot;, &quot;auch&quot;, &quot;mögliche&quot;, &quot;Motive&quot;, &quot;für&quot;, &quot;ihre&quot;, &quot;Arbeit&quot;, &quot;für&quot;, &quot;die&quot;, &quot;Nazis:&quot;, &quot;Zum&quot;, &quot;einen&quot;, &quot;habe&quot;, &quot;sie&quot;, &quot;ihren&quot;, &quot;Neffen&quot;, &quot;aus&quot;, &quot;einem&quot;, &quot;Straflager&quot;, &quot;der&quot;, &quot;Nazis&quot;, &quot;retten&quot;, &quot;wollen.&quot;, &quot;Zum&quot;, &quot;anderen&quot;, &quot;wollte&quot;, &quot;sie&quot;, &quot;aber&quot;, &quot;auch&quot;, &quot;die&quot;, &quot;volle&quot;, &quot;Kontrolle&quot;, &quot;über&quot;, &quot;die&quot;, &quot;Produktionsfirma&quot;, &quot;ihres&quot;, &quot;Parfums&quot;, &quot;\&quot;Chanel&quot;, &quot;No.&quot;, &quot;5\&quot;&quot;, &quot;wiedergewinnen.&quot;, &quot;Nach&quot;, &quot;der&quot;, &quot;Befreiung&quot;, &quot;von&quot;, &quot;Paris&quot;, &quot;im&quot;, &quot;Jahr&quot;, &quot;1944&quot;, &quot;wurde&quot;, &quot;Chanel&quot;, &quot;von&quot;, &quot;Kämpfern&quot;, &quot;der&quot;, &quot;französischen&quot;, &quot;Regierung&quot;, &quot;zum&quot;, &quot;Verhör&quot;, &quot;abgeführt.&quot;, &quot;Die&quot;, &quot;Anschuldigen,&quot;, &quot;sie&quot;, &quot;habe&quot;, &quot;für&quot;, &quot;die&quot;, &quot;Nazis&quot;, &quot;gearbeitet,&quot;, &quot;bezeichnete&quot;, &quot;sie&quot;, &quot;während&quot;, &quot;des&quot;, &quot;Verhörs&quot;, &quot;als&quot;, &quot;\&quot;Hirngespinste\&quot;.&quot;, &quot;Gerüchten&quot;, &quot;zufolge&quot;, &quot;war&quot;, &quot;es&quot;, &quot;Winston&quot;, &quot;Churchill&quot;, &quot;höchstpersönlich,&quot;, &quot;der&quot;, &quot;dafür&quot;, &quot;sorgte,&quot;, &quot;dass&quot;, &quot;sie&quot;, &quot;nach&quot;, &quot;kurzer&quot;, &quot;Zeit&quot;, &quot;freigelassen&quot;, &quot;wurde.&quot;, &quot;Nach&quot;, &quot;einigen&quot;, &quot;Jahren&quot;, &quot;erlebte&quot;, &quot;sie&quot;, &quot;mit&quot;, &quot;ihren&quot;, &quot;Mode-Kollektionen&quot;, &quot;ein&quot;, &quot;strahlendes&quot;, &quot;Comeback.&quot;, &quot;Die&quot;, &quot;Vorwürfe,&quot;, &quot;sie&quot;, &quot;habe&quot;, &quot;mit&quot;, &quot;den&quot;, &quot;Nazis&quot;, &quot;zusammengearbeitet,&quot;, &quot;wurden&quot;, &quot;erst&quot;, &quot;nach&quot;, &quot;ihrem&quot;, &quot;Tod&quot;, &quot;Anfang&quot;, &quot;der&quot;, &quot;70er&quot;, &quot;Jahre&quot;, &quot;wieder&quot;, &quot;öffentlich&quot;, &quot;geäußert.&quot;, &quot;Später&quot;, &quot;wurden&quot;, &quot;sie&quot;, &quot;immer&quot;, &quot;wieder&quot;, &quot;in&quot;, &quot;Biografien&quot;, &quot;und&quot;, &quot;Zeitungsartikeln&quot;, &quot;aufgegriffen.&quot;, &quot;So&quot;, &quot;schrieb&quot;, &quot;John&quot;, &quot;Updike&quot;, &quot;im&quot;, &quot;\&quot;New&quot;, &quot;Yorker\&quot;:&quot;, &quot;\&quot;Alles&quot;, &quot;deutet&quot;, &quot;darauf&quot;, &quot;hin,&quot;, &quot;dass&quot;, &quot;es&quot;, &quot;Chanel&quot;, &quot;völlig&quot;, &quot;gleichgültig&quot;, &quot;war,&quot;, &quot;welches&quot;, &quot;Schicksal&quot;, &quot;ihren&quot;, &quot;jüdischen&quot;, &quot;Nachbarn&quot;, &quot;drohte\&quot;.&quot;, &quot;Coco&quot;, &quot;Chanels&quot;, &quot;Antisemitismus&quot;, &quot;ist&quot;, &quot;altbekannt.&quot;, &quot;So&quot;, &quot;sagte&quot;, &quot;sie&quot;, &quot;in&quot;, &quot;den&quot;, &quot;sechziger&quot;, &quot;Jahren:&quot;, &quot;\&quot;Ich&quot;, &quot;fürchte&quot;, &quot;nur&quot;, &quot;die&quot;, &quot;Juden&quot;, &quot;und&quot;, &quot;die&quot;, &quot;Chinesen,&quot;, &quot;die&quot;, &quot;Juden&quot;, &quot;aber&quot;, &quot;noch&quot;, &quot;mehr&quot;, &quot;als&quot;, &quot;die&quot;, &quot;Chinesen\&quot;.&quot;, &quot;Niemand&quot;, &quot;hat&quot;, &quot;es&quot;, &quot;allerdings&quot;, &quot;bislang&quot;, &quot;geschafft,&quot;, &quot;Beweise&quot;, &quot;dafür&quot;, &quot;zu&quot;, &quot;liefern,&quot;, &quot;dass&quot;, &quot;Chanel&quot;, &quot;tatsächlich&quot;, &quot;Anhängerin&quot;, &quot;Hitlers&quot;, &quot;gewesen&quot;, &quot;ist&quot;, &quot;und&quot;, &quot;es&quot;, &quot;nicht&quot;, &quot;nur&quot;, &quot;genoss,&quot;, &quot;sich&quot;, &quot;von&quot;, &quot;den&quot;, &quot;Nazis&quot;, &quot;hofieren&quot;, &quot;zu&quot;, &quot;lassen.&quot;, &quot;Der&quot;, &quot;Konzern&quot;, &quot;Chanel&quot;, &quot;wartet&quot;, &quot;nun&quot;, &quot;in&quot;, &quot;einer&quot;, &quot;Stellungnahme&quot;, &quot;mit&quot;, &quot;der&quot;, &quot;abgedroschensten&quot;, &quot;aller&quot;, &quot;Verteidigungen&quot;, &quot;auf:&quot;, &quot;Wieso&quot;, &quot;sollte&quot;, &quot;Coco&quot;, &quot;Chanel&quot;, &quot;judenfeindlich&quot;, &quot;gewesen&quot;, &quot;sein?&quot;, &quot;Viele&quot;, &quot;ihrer&quot;, &quot;Freunde&quot;, &quot;waren&quot;, &quot;doch&quot;, &quot;Juden.&quot;, &quot;Und&quot;, &quot;ein&quot;, &quot;paar&quot;, &quot;andere,&quot;, &quot;möchte&quot;, &quot;man&quot;, &quot;hinzufügen,&quot;, &quot;waren&quot;, &quot;Nazis.&quot;];&amp;#10;var t2_15 = [&quot;Zum&quot;, &quot;ersten&quot;, &quot;Mal&quot;, &quot;in&quot;, &quot;meinem&quot;, &quot;Leben&quot;, &quot;habe&quot;, &quot;ich&quot;, &quot;Mauritius&quot;, &quot;in&quot;, &quot;den&quot;, &quot;siebziger&quot;, &quot;Jahren&quot;, &quot;verlassen.&quot;, &quot;Damals&quot;, &quot;ging&quot;, &quot;ich&quot;, &quot;auf&quot;, &quot;eine&quot;, &quot;Reise&quot;, &quot;nach&quot;, &quot;Europa&quot;, &quot;und&quot;, &quot;Kanada.&quot;, &quot;Mauritius&quot;, &quot;war&quot;, &quot;eine&quot;, &quot;kleine&quot;, &quot;Insel&quot;, &quot;mitten&quot;, &quot;im&quot;, &quot;Indischen&quot;, &quot;Ozean,&quot;, &quot;die&quot;, &quot;im&quot;, &quot;Ausland&quot;, &quot;niemand&quot;, &quot;kannte.&quot;, &quot;Wenn&quot;, &quot;ich&quot;, &quot;heute&quot;, &quot;auf&quot;, &quot;Reisen&quot;, &quot;bin&quot;, &quot;und&quot;, &quot;meine&quot;, &quot;Heimat&quot;, &quot;erwähne,&quot;, &quot;bekomme&quot;, &quot;ich&quot;, &quot;auf&quot;, &quot;der&quot;, &quot;ganzen&quot;, &quot;Welt&quot;, &quot;die&quot;, &quot;gleiche&quot;, &quot;Reaktion:&quot;, &quot;\&quot;Sie&quot;, &quot;kommen&quot;, &quot;aus&quot;, &quot;Mauritius!&quot;, &quot;Aus&quot;, &quot;dem&quot;, &quot;Paradies!\&quot;&quot;, &quot;Mich&quot;, &quot;wundert&quot;, &quot;selbst,&quot;, &quot;wie&quot;, &quot;es&quot;, &quot;meine&quot;, &quot;kleine&quot;, &quot;Insel&quot;, &quot;geschafft&quot;, &quot;hat,&quot;, &quot;plötzlich&quot;, &quot;so&quot;, &quot;bekannt&quot;, &quot;zu&quot;, &quot;werden.&quot;, &quot;Schon&quot;, &quot;lange&quot;, &quot;bevor&quot;, &quot;die&quot;, &quot;ersten&quot;, &quot;Touristen&quot;, &quot;kamen,&quot;, &quot;war&quot;, &quot;Mauritius&quot;, &quot;in&quot;, &quot;einigen&quot;, &quot;Teilen&quot;, &quot;der&quot;, &quot;Welt&quot;, &quot;sehr&quot;, &quot;bekannt.&quot;, &quot;Trotzdem&quot;, &quot;wurde&quot;, &quot;die&quot;, &quot;Insel&quot;, &quot;lange&quot;, &quot;nicht&quot;, &quot;besiedelt.&quot;, &quot;Die&quot;, &quot;Portugiesen&quot;, &quot;waren&quot;, &quot;die&quot;, &quot;Ersten,&quot;, &quot;die&quot;, &quot;die&quot;, &quot;Insel&quot;, &quot;entdeckten.&quot;, &quot;Das&quot;, &quot;war&quot;, &quot;im&quot;, &quot;Jahr&quot;, &quot;1507.&quot;, &quot;Sie&quot;, &quot;nannten&quot;, &quot;die&quot;, &quot;Insel&quot;, &quot;Schwaneninsel,&quot;, &quot;ließen&quot;, &quot;sich&quot;, &quot;aber&quot;, &quot;nicht&quot;, &quot;auf&quot;, &quot;ihr&quot;, &quot;nieder.&quot;, &quot;Erst&quot;, &quot;fast&quot;, &quot;hundert&quot;, &quot;Jahre&quot;, &quot;später&quot;, &quot;kamen&quot;, &quot;die&quot;, &quot;Holländer.&quot;, &quot;Sie&quot;, &quot;nannten&quot;, &quot;die&quot;, &quot;Insel&quot;, &quot;zu&quot;, &quot;Ehren&quot;, &quot;des&quot;, &quot;holländischen&quot;, &quot;Prinzen&quot;, &quot;Moritz&quot;, &quot;Mauritius.&quot;, &quot;Den&quot;, &quot;Namen&quot;, &quot;Mauritius&quot;, &quot;hat&quot;, &quot;sie&quot;, &quot;bis&quot;, &quot;heute&quot;, &quot;behalten.&quot;, &quot;Die&quot;, &quot;Holländer&quot;, &quot;begannen,&quot;, &quot;an&quot;, &quot;der&quot;, &quot;Küste&quot;, &quot;Felder&quot;, &quot;anzulegen.&quot;, &quot;Sie&quot;, &quot;brachten&quot;, &quot;Zuckerrohr,&quot;, &quot;Rotwild&quot;, &quot;und&quot;, &quot;Affen&quot;, &quot;mit&quot;, &quot;auf&quot;, &quot;die&quot;, &quot;Insel.&quot;, &quot;Sie&quot;, &quot;bauten&quot;, &quot;Häuser&quot;, &quot;und&quot;, &quot;Festungen&quot;, &quot;und&quot;, &quot;holzten&quot;, &quot;die&quot;, &quot;dichten&quot;, &quot;Wälder&quot;, &quot;aus&quot;, &quot;Ebenholz&quot;, &quot;ab.&quot;, &quot;Zu&quot;, &quot;dieser&quot;, &quot;Zeit&quot;, &quot;lebten&quot;, &quot;auf&quot;, &quot;Mauritius&quot;, &quot;noch&quot;, &quot;viele&quot;, &quot;Dodos.&quot;, &quot;Die&quot;, &quot;flugunfähigen&quot;, &quot;Vögel&quot;, &quot;hatten&quot;, &quot;keine&quot;, &quot;natürlichen&quot;, &quot;Feinde&quot;, &quot;auf&quot;, &quot;der&quot;, &quot;Insel&quot;, &quot;und&quot;, &quot;waren&quot;, &quot;daher&quot;, &quot;zu&quot;, &quot;ihrem&quot;, &quot;eigenen&quot;, &quot;Unglück&quot;, &quot;sehr&quot;, &quot;zahm.&quot;, &quot;Für&quot;, &quot;die&quot;, &quot;Holländer&quot;, &quot;machte&quot;, &quot;sie&quot;, &quot;das&quot;, &quot;zur&quot;, &quot;perfekten&quot;, &quot;Jagdbeute.&quot;, &quot;Der&quot;, &quot;Dodo&quot;, &quot;wurde&quot;, &quot;so&quot;, &quot;stark&quot;, &quot;bejagt,&quot;, &quot;dass&quot;, &quot;er&quot;, &quot;schon&quot;, &quot;einige&quot;, &quot;Jahrzehnte&quot;, &quot;nach&quot;, &quot;Ankunft&quot;, &quot;der&quot;, &quot;Holländer&quot;, &quot;ausgerottet&quot;, &quot;war.&quot;, &quot;Heute&quot;, &quot;ist&quot;, &quot;er&quot;, &quot;das&quot;, &quot;Nationalsymbol&quot;, &quot;von&quot;, &quot;Mauritius.&quot;, &quot;Als&quot;, &quot;kein&quot;, &quot;Holz&quot;, &quot;mehr&quot;, &quot;zu&quot;, &quot;holen&quot;, &quot;und&quot;, &quot;die&quot;, &quot;Natur&quot;, &quot;schwer&quot;, &quot;geschädigt&quot;, &quot;war,&quot;, &quot;verließen&quot;, &quot;die&quot;, &quot;Holländer&quot;, &quot;die&quot;, &quot;Insel.&quot;, &quot;Fünf&quot;, &quot;Jahre&quot;, &quot;blieb&quot;, &quot;Mauritius&quot;, &quot;weitgehend&quot;, &quot;unbewohnt,&quot;, &quot;bis&quot;, &quot;die&quot;, &quot;Franzosen&quot;, &quot;sie&quot;, &quot;für&quot;, &quot;sich&quot;, &quot;beanspruchten.&quot;, &quot;Die&quot;, &quot;Lage&quot;, &quot;der&quot;, &quot;Insel&quot;, &quot;machte&quot;, &quot;sie&quot;, &quot;mit&quot;, &quot;einem&quot;, &quot;Mal&quot;, &quot;zur&quot;, &quot;gefragten&quot;, &quot;Zwischenstation&quot;, &quot;auf&quot;, &quot;dem&quot;, &quot;Seeweg&quot;, &quot;nach&quot;, &quot;Indien.&quot;, &quot;Um&quot;, &quot;die&quot;, &quot;Kontrolle&quot;, &quot;der&quot;, &quot;Insel&quot;, &quot;brach&quot;, &quot;ein&quot;, &quot;erbitterter&quot;, &quot;Krieg&quot;, &quot;zwischen&quot;, &quot;Briten&quot;, &quot;und&quot;, &quot;Franzosen&quot;, &quot;aus.&quot;, &quot;Schon&quot;, &quot;damals&quot;, &quot;war&quot;, &quot;Mauritius&quot;, &quot;bekannt&quot;, &quot;als&quot;, &quot;\&quot;Schlüssel&quot;, &quot;zum&quot;, &quot;Indischen&quot;, &quot;Ozean\&quot;.&quot;, &quot;Mit&quot;, &quot;dem&quot;, &quot;Paradies&quot;, &quot;wurde&quot;, &quot;sie&quot;, &quot;erst&quot;, &quot;später&quot;, &quot;verglichen.&quot;, &quot;Als&quot;, &quot;Mark&quot;, &quot;Twain&quot;, &quot;im&quot;, &quot;19.&quot;, &quot;Jahrhundert&quot;, &quot;Mauritius&quot;, &quot;besuchte,&quot;, &quot;schrieb&quot;, &quot;er,&quot;, &quot;Gott&quot;, &quot;habe&quot;, &quot;zuerst&quot;, &quot;die&quot;, &quot;Insel&quot;, &quot;erschaffen&quot;, &quot;und&quot;, &quot;dann&quot;, &quot;das&quot;, &quot;Paradies&quot;, &quot;nach&quot;, &quot;ihrem&quot;, &quot;Vorbild.&quot;, &quot;Aber&quot;, &quot;wer&quot;, &quot;lebt&quot;, &quot;heute&quot;, &quot;im&quot;, &quot;Paradies?&quot;, &quot;Schon&quot;, &quot;in&quot;, &quot;den&quot;, &quot;siebziger&quot;, &quot;Jahren&quot;, &quot;wurde&quot;, &quot;ich&quot;, &quot;bei&quot;, &quot;meiner&quot;, &quot;ersten&quot;, &quot;Reise&quot;, &quot;gefragt,&quot;, &quot;wer&quot;, &quot;die&quot;, &quot;Mauritier&quot;, &quot;seien.&quot;, &quot;Die&quot;, &quot;Antwort&quot;, &quot;ist&quot;, &quot;damals&quot;, &quot;wie&quot;, &quot;heute&quot;, &quot;die&quot;, &quot;Gleiche:&quot;, &quot;Der&quot;, &quot;Mauritier&quot;, &quot;denkt&quot;, &quot;Französisch,&quot;, &quot;er&quot;, &quot;schreibt&quot;, &quot;Englisch&quot;, &quot;und&quot;, &quot;spricht&quot;, &quot;Kreolisch.&quot;, &quot;Er&quot;, &quot;isst&quot;, &quot;sowohl&quot;, &quot;französisches&quot;, &quot;Ragout&quot;, &quot;als&quot;, &quot;auch&quot;, &quot;chinesische&quot;, &quot;Nudeln&quot;, &quot;oder&quot;, &quot;indisches&quot;, &quot;Curry.&quot;, &quot;Es&quot;, &quot;ist&quot;, &quot;normal&quot;, &quot;für&quot;, &quot;ihn,&quot;, &quot;dass&quot;, &quot;er&quot;, &quot;auf&quot;, &quot;dem&quot;, &quot;Weg&quot;, &quot;zu&quot;, &quot;einer&quot;, &quot;Kirche&quot;, &quot;an&quot;, &quot;einer&quot;, &quot;Moschee,&quot;, &quot;chinesischen&quot;, &quot;Pagoden&quot;, &quot;und&quot;, &quot;hinduistischen&quot;, &quot;Tempeln&quot;, &quot;vorbeikommt.&quot;, &quot;Die&quot;, &quot;Bevölkerung&quot;, &quot;von&quot;, &quot;Mauritius&quot;, &quot;ist&quot;, &quot;das&quot;, &quot;Ergebnis&quot;, &quot;einer&quot;, &quot;Vermischung&quot;, &quot;verschiedener&quot;, &quot;Kulturen&quot;, &quot;und&quot;, &quot;Religionen.&quot;, &quot;Viele&quot;, &quot;der&quot;, &quot;Menschen&quot;, &quot;kamen&quot;, &quot;nicht&quot;, &quot;freiwillig&quot;, &quot;auf&quot;, &quot;die&quot;, &quot;Insel.&quot;, &quot;Die&quot;, &quot;Holländer&quot;, &quot;brachten&quot;, &quot;afrikanische&quot;, &quot;Sklaven&quot;, &quot;mit&quot;, &quot;auf&quot;, &quot;die&quot;, &quot;Insel.&quot;, &quot;Aus&quot;, &quot;Indien&quot;, &quot;kamen&quot;, &quot;Handwerker,&quot;, &quot;die&quot;, &quot;beim&quot;, &quot;Bau&quot;, &quot;von&quot;, &quot;Brücken&quot;, &quot;und&quot;, &quot;Straßen&quot;, &quot;halfen.&quot;, &quot;Französische&quot;, &quot;Adelige&quot;, &quot;suchten&quot;, &quot;während&quot;, &quot;der&quot;, &quot;Französischen&quot;, &quot;Revolution&quot;, &quot;Zuflucht&quot;, &quot;auf&quot;, &quot;der&quot;, &quot;Insel.&quot;, &quot;Sie&quot;, &quot;kauften&quot;, &quot;Sklaven&quot;, &quot;aus&quot;, &quot;Afrika&quot;, &quot;und&quot;, &quot;ließen&quot;, &quot;sie&quot;, &quot;Zuckerrohr&quot;, &quot;auf&quot;, &quot;Plantagen&quot;, &quot;schneiden.&quot;, &quot;Als&quot;, &quot;die&quot;, &quot;Sklaverei&quot;, &quot;abgeschafft&quot;, &quot;wurde,&quot;, &quot;weigerten&quot;, &quot;sich&quot;, &quot;die&quot;, &quot;meisten&quot;, &quot;nun&quot;, &quot;freien&quot;, &quot;Schwarzen&quot;, &quot;zurecht,&quot;, &quot;weiter&quot;, &quot;auf&quot;, &quot;den&quot;, &quot;Plantagen&quot;, &quot;zu&quot;, &quot;arbeiten.&quot;, &quot;Der&quot;, &quot;britischen&quot;, &quot;Regierung&quot;, &quot;blieb&quot;, &quot;nichts&quot;, &quot;anderes&quot;, &quot;übrig,&quot;, &quot;als&quot;, &quot;Arbeiter&quot;, &quot;aus&quot;, &quot;Indien&quot;, &quot;ins&quot;, &quot;Land&quot;, &quot;zu&quot;, &quot;holen,&quot;, &quot;die&quot;, &quot;die&quot;, &quot;Arbeit&quot;, &quot;auf&quot;, &quot;den&quot;, &quot;Plantagen&quot;, &quot;übernehmen&quot;, &quot;sollten.&quot;, &quot;Die&quot;, &quot;Inder&quot;, &quot;kamen&quot;, &quot;zu&quot;, &quot;Tausenden&quot;, &quot;ins&quot;, &quot;Land.&quot;, &quot;Sie&quot;, &quot;wurden&quot;, &quot;\&quot;Freiwillige\&quot;&quot;, &quot;genannt,&quot;, &quot;weil&quot;, &quot;sie&quot;, &quot;einen&quot;, &quot;Arbeitsvertrag&quot;, &quot;bekamen,&quot;, &quot;während&quot;, &quot;die&quot;, &quot;Sklaven&quot;, &quot;noch&quot;, &quot;mit&quot;, &quot;Gewalt&quot;, &quot;verschleppt&quot;, &quot;worden&quot;, &quot;waren.&quot;, &quot;Doch&quot;, &quot;ihre&quot;, &quot;Arbeitsbedingungen&quot;, &quot;waren&quot;, &quot;kaum&quot;, &quot;besser&quot;, &quot;als&quot;, &quot;die&quot;, &quot;der&quot;, &quot;Sklaven.&quot;, &quot;Heute&quot;, &quot;stellen&quot;, &quot;die&quot;, &quot;Mauritier&quot;, &quot;mit&quot;, &quot;indischen&quot;, &quot;Wurzeln&quot;, &quot;etwa&quot;, &quot;die&quot;, &quot;Hälfte&quot;, &quot;der&quot;, &quot;Bevölkerung.&quot;, &quot;Zeitgleich&quot;, &quot;mit&quot;, &quot;den&quot;, &quot;Indern&quot;, &quot;kamen&quot;, &quot;auch&quot;, &quot;muslimische&quot;, &quot;und&quot;, &quot;chinesische&quot;, &quot;Händler&quot;, &quot;nach&quot;, &quot;Mauritius.&quot;, &quot;Nachfahren&quot;, &quot;der&quot;, &quot;Inder,&quot;, &quot;Franzosen,&quot;, &quot;Chinesen,&quot;, &quot;Araber&quot;, &quot;und&quot;, &quot;der&quot;, &quot;afrikanischen&quot;, &quot;Sklaven&quot;, &quot;bilden&quot;, &quot;heute&quot;, &quot;die&quot;, &quot;vielfältige&quot;, &quot;Bevölkerung&quot;, &quot;der&quot;, &quot;Insel:&quot;, &quot;Eine&quot;, &quot;der&quot;, &quot;wenigen&quot;, &quot;echten&quot;, &quot;multikulturellen&quot;, &quot;Gesellschaften&quot;, &quot;der&quot;, &quot;Welt.&quot;, &quot;Allerdings&quot;, &quot;ist&quot;, &quot;auch&quot;, &quot;diese&quot;, &quot;Mauritius&quot;, &quot;nicht&quot;, &quot;frei&quot;, &quot;von&quot;, &quot;Problemen.&quot;, &quot;In&quot;, &quot;seiner&quot;, &quot;Geschichte&quot;, &quot;kam&quot;, &quot;es&quot;, &quot;immer&quot;, &quot;wieder&quot;, &quot;zu&quot;, &quot;Problemen&quot;, &quot;zwischen&quot;, &quot;Schwarzen&quot;, &quot;und&quot;, &quot;Weißen.&quot;, &quot;Über&quot;, &quot;Generationen&quot;, &quot;wurde&quot;, &quot;diese&quot;, &quot;Abneigung&quot;, &quot;weitervererbt.&quot;, &quot;Ihre&quot;, &quot;Wurzeln&quot;, &quot;liegen&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Zeit&quot;, &quot;der&quot;, &quot;Sklaverei.&quot;, &quot;Die&quot;, &quot;Weißen&quot;, &quot;sahen&quot;, &quot;die&quot;, &quot;Sklaven&quot;, &quot;nicht&quot;, &quot;als&quot;, &quot;Menschen&quot;, &quot;an,&quot;, &quot;sondern&quot;, &quot;als&quot;, &quot;Tiere,&quot;, &quot;über&quot;, &quot;die&quot;, &quot;sie&quot;, &quot;frei&quot;, &quot;verfügen&quot;, &quot;konnten.&quot;, &quot;Auch&quot;, &quot;nach&quot;, &quot;dem&quot;, &quot;Ende&quot;, &quot;der&quot;, &quot;Sklaverei&quot;, &quot;hielten&quot;, &quot;sich&quot;, &quot;viele&quot;, &quot;Weiße&quot;, &quot;nach&quot;, &quot;wie&quot;, &quot;vor&quot;, &quot;für&quot;, &quot;Angehörige&quot;, &quot;einer&quot;, &quot;überlegenen&quot;, &quot;Rasse.&quot;, &quot;Doch&quot;, &quot;im&quot;, &quot;Laufe&quot;, &quot;der&quot;, &quot;Zeit&quot;, &quot;verlor&quot;, &quot;die&quot;, &quot;Hautfarbe&quot;, &quot;an&quot;, &quot;Bedeutung.&quot;, &quot;Wichtiger&quot;, &quot;wurden&quot;, &quot;Leistung&quot;, &quot;und&quot;, &quot;Können.&quot;, &quot;In&quot;, &quot;den&quot;, &quot;1960ern&quot;, &quot;wurde&quot;, &quot;aus&quot;, &quot;der&quot;, &quot;britischen&quot;, &quot;Kolonie&quot;, &quot;Mauritius&quot;, &quot;dann&quot;, &quot;schließlich&quot;, &quot;ein&quot;, &quot;unabhängiger&quot;, &quot;Staat.&quot;, &quot;Mauritier&quot;, &quot;unterschiedlichster&quot;, &quot;Herkunft&quot;, &quot;nun&quot;, &quot;dazu&quot;, &quot;gezwungen,&quot;, &quot;friedlich&quot;, &quot;in&quot;, &quot;einem&quot;, &quot;Land&quot;, &quot;zusammenzuleben.&quot;, &quot;Auf&quot;, &quot;Mauritius&quot;, &quot;gelingt&quot;, &quot;das&quot;, &quot;heute&quot;, &quot;gut.&quot;, &quot;Wir&quot;, &quot;haben&quot;, &quot;gelernt,&quot;, &quot;die&quot;, &quot;Eigenheiten&quot;, &quot;unserer&quot;, &quot;Nachbarn&quot;, &quot;zu&quot;, &quot;entdecken&quot;, &quot;und&quot;, &quot;auch&quot;, &quot;gern&quot;, &quot;zu&quot;, &quot;übernehmen.&quot;, &quot;Es&quot;, &quot;ist&quot;, &quot;das,&quot;, &quot;was&quot;, &quot;Mauritius&quot;, &quot;in&quot;, &quot;den&quot;, &quot;Augen&quot;, &quot;der&quot;, &quot;Welt&quot;, &quot;zum&quot;, &quot;Paradies&quot;, &quot;macht:&quot;, &quot;Seine&quot;, &quot;Gastfreundschaft.&quot;, &quot;Ich&quot;, &quot;rede&quot;, &quot;dabei&quot;, &quot;nicht&quot;, &quot;von&quot;, &quot;gekünsteltem&quot;, &quot;Lächeln&quot;, &quot;oder&quot;, &quot;von&quot;, &quot;freundlichen&quot;, &quot;Sätzen,&quot;, &quot;die&quot;, &quot;in&quot;, &quot;Kommunikationstrainings&quot;, &quot;geübt&quot;, &quot;werden.&quot;, &quot;Ich&quot;, &quot;meine&quot;, &quot;eine&quot;, &quot;angeborene&quot;, &quot;Freundlichkeit,&quot;, &quot;gepaart&quot;, &quot;mit&quot;, &quot;Neugier&quot;, &quot;und&quot;, &quot;Offenheit&quot;, &quot;gegenüber&quot;, &quot;dem&quot;, &quot;Gast.&quot;, &quot;Sie&quot;, &quot;bewegt&quot;, &quot;die&quot;, &quot;Mauritier&quot;, &quot;dazu,&quot;, &quot;Besucher&quot;, &quot;aufzunehmen,&quot;, &quot;ihnen&quot;, &quot;ihr&quot;, &quot;Land&quot;, &quot;zu&quot;, &quot;zeigen&quot;, &quot;und&quot;, &quot;seine&quot;, &quot;Schönheit&quot;, &quot;mit&quot;, &quot;ihnen&quot;, &quot;zu&quot;, &quot;teilen.&quot;];&amp;#10;var t2_16 = [&quot;Henry&quot;, &quot;Chinaski&quot;, &quot;wacht&quot;, &quot;auf.&quot;, &quot;Es&quot;, &quot;ist&quot;, &quot;offensichtlich&quot;, &quot;schon&quot;, &quot;Nachmittag.&quot;, &quot;Am&quot;, &quot;Abend&quot;, &quot;zuvor&quot;, &quot;wurden&quot;, &quot;wieder&quot;, &quot;mehrere&quot;, &quot;Flaschen&quot;, &quot;billigen&quot;, &quot;Weins&quot;, &quot;geleert.&quot;, &quot;Ihm&quot;, &quot;ist&quot;, &quot;übel.&quot;, &quot;Er&quot;, &quot;stolpert&quot;, &quot;aus&quot;, &quot;dem&quot;, &quot;Bett&quot;, &quot;geradewegs&quot;, &quot;ins&quot;, &quot;Bad&quot;, &quot;und&quot;, &quot;übergibt&quot;, &quot;sich.&quot;, &quot;Als&quot;, &quot;er&quot;, &quot;zurückkommt&quot;, &quot;und&quot;, &quot;einigermaßen&quot;, &quot;wieder&quot;, &quot;bei&quot;, &quot;Besinnung&quot;, &quot;ist,&quot;, &quot;wacht&quot;, &quot;auch&quot;, &quot;seine&quot;, &quot;Freundin&quot;, &quot;auf.&quot;, &quot;Sie&quot;, &quot;wiederholt&quot;, &quot;dasselbe&quot;, &quot;Ritual.&quot;, &quot;Kurz&quot;, &quot;darauf&quot;, &quot;macht&quot;, &quot;Henry&quot;, &quot;Chinaski&quot;, &quot;Schluss&quot;, &quot;mit&quot;, &quot;ihr.&quot;, &quot;So&quot;, &quot;geht&quot;, &quot;es&quot;, &quot;einfach&quot;, &quot;nicht&quot;, &quot;weiter.&quot;, &quot;Noch&quot;, &quot;schwerfälliger&quot;, &quot;ist&quot;, &quot;nur&quot;, &quot;die&quot;, &quot;Kamera.&quot;, &quot;Sie&quot;, &quot;steht&quot;, &quot;bewegungslos&quot;, &quot;irgendwo&quot;, &quot;am&quot;, &quot;Ende&quot;, &quot;des&quot;, &quot;Zimmers,&quot;, &quot;wo&quot;, &quot;sie&quot;, &quot;einen&quot;, &quot;guten&quot;, &quot;Blick&quot;, &quot;auf&quot;, &quot;das&quot;, &quot;Bett,&quot;, &quot;den&quot;, &quot;Flur,&quot;, &quot;das&quot;, &quot;Klo&quot;, &quot;und&quot;, &quot;den&quot;, &quot;Schminktisch&quot;, &quot;hat,&quot;, &quot;an&quot;, &quot;dem&quot;, &quot;Henry&quot;, &quot;erschöpft&quot;, &quot;sitzt&quot;, &quot;und&quot;, &quot;raucht.&quot;, &quot;Schließlich&quot;, &quot;beschließt&quot;, &quot;er,&quot;, &quot;dass&quot;, &quot;es&quot;, &quot;mal&quot;, &quot;wieder&quot;, &quot;Zeit&quot;, &quot;ist,&quot;, &quot;sich&quot;, &quot;am&quot;, &quot;eigenen&quot;, &quot;Kragen&quot;, &quot;aus&quot;, &quot;dem&quot;, &quot;Elend&quot;, &quot;des&quot;, &quot;Lebens&quot;, &quot;zu&quot;, &quot;ziehen.&quot;, &quot;Henry&quot;, &quot;Chinaski&quot;, &quot;ist&quot;, &quot;das&quot;, &quot;ewige&quot;, &quot;Alter&quot;, &quot;Ego&quot;, &quot;des&quot;, &quot;amerikanischen&quot;, &quot;Schriftstellers&quot;, &quot;Charles&quot;, &quot;Bukowski&quot;, &quot;und&quot;, &quot;die&quot;, &quot;Hauptfigur&quot;, &quot;in&quot;, &quot;dessen&quot;, &quot;Roman&quot;, &quot;\&quot;Factotum\&quot;.&quot;, &quot;Das&quot;, &quot;Buch&quot;, &quot;bildet&quot;, &quot;eine&quot;, &quot;Phase&quot;, &quot;in&quot;, &quot;Bukowskis&quot;, &quot;Leben&quot;, &quot;Anfang&quot;, &quot;der&quot;, &quot;40er&quot;, &quot;Jahre&quot;, &quot;ab,&quot;, &quot;in&quot;, &quot;der&quot;, &quot;der&quot;, &quot;Autor&quot;, &quot;noch&quot;, &quot;völlig&quot;, &quot;unbekannt&quot;, &quot;war.&quot;, &quot;Henry&quot;, &quot;schlägt&quot;, &quot;sich&quot;, &quot;mit&quot;, &quot;kleineren&quot;, &quot;Jobs&quot;, &quot;durch&quot;, &quot;und&quot;, &quot;hangelt&quot;, &quot;sich&quot;, &quot;von&quot;, &quot;Gehaltsscheck&quot;, &quot;zu&quot;, &quot;Gehaltsscheck.&quot;, &quot;Es&quot;, &quot;ist&quot;, &quot;ein&quot;, &quot;trister&quot;, &quot;Alltag,&quot;, &quot;den&quot;, &quot;der&quot;, &quot;angehende&quot;, &quot;Autor&quot;, &quot;mit&quot;, &quot;Pferdewetten,&quot;, &quot;Frauen&quot;, &quot;und&quot;, &quot;Alkohol&quot;, &quot;füllt.&quot;, &quot;Nebenbei&quot;, &quot;wird&quot;, &quot;geschrieben.&quot;, &quot;Mehr&quot;, &quot;als&quot;, &quot;1000&quot;, &quot;Gedichte&quot;, &quot;hat&quot;, &quot;Bukowski&quot;, &quot;bis&quot;, &quot;zu&quot;, &quot;seinem&quot;, &quot;Tod&quot;, &quot;verfasst,&quot;, &quot;über&quot;, &quot;60&quot;, &quot;Bücher&quot;, &quot;sind&quot;, &quot;bisher&quot;, &quot;erschienen.&quot;, &quot;Inzwischen&quot;, &quot;weiß&quot;, &quot;man,&quot;, &quot;dass&quot;, &quot;Bukowskis&quot;, &quot;wahres&quot;, &quot;Leben&quot;, &quot;weit&quot;, &quot;weniger&quot;, &quot;exzessiv&quot;, &quot;verlief,&quot;, &quot;als&quot;, &quot;es&quot;, &quot;Romane&quot;, &quot;wie&quot;, &quot;\&quot;Factotum\&quot;&quot;, &quot;darstellen.&quot;, &quot;Aus&quot;, &quot;seinen&quot;, &quot;Briefen&quot;, &quot;erfuhr&quot;, &quot;man&quot;, &quot;zum&quot;, &quot;Beispiel,&quot;, &quot;dass&quot;, &quot;er&quot;, &quot;in&quot;, &quot;Wahrheit&quot;, &quot;ein&quot;, &quot;recht&quot;, &quot;sensibler,&quot;, &quot;verletzlicher&quot;, &quot;und&quot;, &quot;einsamer&quot;, &quot;Mann&quot;, &quot;gewesen&quot;, &quot;ist.&quot;, &quot;Ganz&quot;, &quot;im&quot;, &quot;Gegensatz&quot;, &quot;zu&quot;, &quot;Henry&quot;, &quot;Chinaski&quot;, &quot;war&quot;, &quot;er&quot;, &quot;sogar&quot;, &quot;treu&quot;, &quot;und&quot;, &quot;beständig:&quot;, &quot;Seinen&quot;, &quot;Job&quot;, &quot;als&quot;, &quot;Briefsortierer&quot;, &quot;im&quot;, &quot;Hauptpostamt&quot;, &quot;von&quot;, &quot;Los&quot;, &quot;Angeles&quot;, &quot;gab&quot;, &quot;er&quot;, &quot;erst&quot;, &quot;nach&quot;, &quot;knapp&quot;, &quot;20&quot;, &quot;Jahren&quot;, &quot;auf,&quot;, &quot;als&quot;, &quot;er&quot;, &quot;begann&quot;, &quot;als&quot;, &quot;Autor&quot;, &quot;erfolgreich&quot;, &quot;zu&quot;, &quot;sein.&quot;, &quot;Mit&quot;, &quot;seiner&quot;, &quot;späteren&quot;, &quot;Frau&quot;, &quot;Linda&quot;, &quot;blieb&quot;, &quot;er&quot;, &quot;bis&quot;, &quot;zu&quot;, &quot;seiner&quot;, &quot;tödlichen&quot;, &quot;Krebserkrankung&quot;, &quot;zusammen.&quot;, &quot;Diesen&quot;, &quot;jüngsten&quot;, &quot;Erkenntnissen&quot;, &quot;über&quot;, &quot;den&quot;, &quot;eher&quot;, &quot;zahmen&quot;, &quot;Wilden&quot;, &quot;fühlte&quot;, &quot;sich&quot;, &quot;wohl&quot;, &quot;auch&quot;, &quot;Regisseur&quot;, &quot;Bent&quot;, &quot;Hamer&quot;, &quot;verpflichtet.&quot;, &quot;Trotz&quot;, &quot;der&quot;, &quot;unemotionalen&quot;, &quot;Erzählweise&quot;, &quot;des&quot;, &quot;Films&quot;, &quot;spürt&quot;, &quot;man&quot;, &quot;doch&quot;, &quot;das&quot;, &quot;Mitgefühl,&quot;, &quot;das&quot;, &quot;der&quot;, &quot;Regisseur&quot;, &quot;seinem&quot;, &quot;Antihelden&quot;, &quot;entgegenbringt.&quot;, &quot;Dabei&quot;, &quot;ist&quot;, &quot;Chinaski&quot;, &quot;ein&quot;, &quot;fahriger&quot;, &quot;Alkoholiker,&quot;, &quot;der&quot;, &quot;keinen&quot;, &quot;Job&quot;, &quot;länger&quot;, &quot;als&quot;, &quot;einen&quot;, &quot;Tag&quot;, &quot;halten&quot;, &quot;kann&quot;, &quot;und&quot;, &quot;sein&quot;, &quot;Leben&quot;, &quot;nimmt,&quot;, &quot;wie&quot;, &quot;es&quot;, &quot;kommt.&quot;, &quot;Kaum&quot;, &quot;trennt&quot;, &quot;er&quot;, &quot;sich&quot;, &quot;von&quot;, &quot;seiner&quot;, &quot;Freundin,&quot;, &quot;läuft&quot;, &quot;er&quot;, &quot;ihr&quot;, &quot;schon&quot;, &quot;wieder&quot;, &quot;hinterher.&quot;, &quot;Im&quot;, &quot;Roman&quot;, &quot;liest&quot;, &quot;sich&quot;, &quot;das&quot;, &quot;so:&quot;, &quot;\&quot;Ich&quot;, &quot;konnte&quot;, &quot;mich&quot;, &quot;nicht&quot;, &quot;dazu&quot;, &quot;bringen,&quot;, &quot;die&quot;, &quot;Stellenanzeigen&quot;, &quot;zu&quot;, &quot;lesen.&quot;, &quot;Die&quot;, &quot;Vorstellung,&quot;, &quot;wieder&quot;, &quot;einem&quot;, &quot;Mann&quot;, &quot;an&quot;, &quot;seinem&quot;, &quot;Schreibtisch&quot;, &quot;gegenüber&quot;, &quot;zu&quot;, &quot;sitzen&quot;, &quot;und&quot;, &quot;ihm&quot;, &quot;zu&quot;, &quot;sagen,&quot;, &quot;dass&quot;, &quot;ich&quot;, &quot;einen&quot;, &quot;Job&quot;, &quot;wollte,&quot;, &quot;war&quot;, &quot;einfach&quot;, &quot;zu&quot;, &quot;viel&quot;, &quot;für&quot;, &quot;mich.&quot;, &quot;Ehrlich&quot;, &quot;gesagt,&quot;, &quot;ich&quot;, &quot;hatte&quot;, &quot;einen&quot;, &quot;Horror&quot;, &quot;vor&quot;, &quot;dem&quot;, &quot;Leben;&quot;, &quot;vor&quot;, &quot;dem,&quot;, &quot;was&quot;, &quot;ein&quot;, &quot;Mann&quot;, &quot;alles&quot;, &quot;tun&quot;, &quot;musste,&quot;, &quot;nur&quot;, &quot;um&quot;, &quot;essen&quot;, &quot;und&quot;, &quot;schlafen&quot;, &quot;und&quot;, &quot;sich&quot;, &quot;was&quot;, &quot;zum&quot;, &quot;Anziehen&quot;, &quot;kaufen&quot;, &quot;zu&quot;, &quot;können.&quot;, &quot;Also&quot;, &quot;blieb&quot;, &quot;ich&quot;, &quot;im&quot;, &quot;Bett&quot;, &quot;und&quot;, &quot;trank.&quot;, &quot;Wenn&quot;, &quot;man&quot;, &quot;trank,&quot;, &quot;war&quot;, &quot;die&quot;, &quot;Welt&quot;, &quot;zwar&quot;, &quot;immer&quot;, &quot;noch&quot;, &quot;da&quot;, &quot;draußen,&quot;, &quot;aber&quot;, &quot;wenigstens&quot;, &quot;hatte&quot;, &quot;sie&quot;, &quot;einen&quot;, &quot;im&quot;, &quot;Augenblick&quot;, &quot;nicht&quot;, &quot;an&quot;, &quot;der&quot;, &quot;Kehle\&quot;.&quot;, &quot;Bent&quot;, &quot;Hamer&quot;, &quot;verleiht&quot;, &quot;seinem&quot;, &quot;Henry&quot;, &quot;Chinaski&quot;, &quot;mehr&quot;, &quot;Würde&quot;, &quot;als&quot;, &quot;ihm&quot;, &quot;eigentlich&quot;, &quot;zusteht:&quot;, &quot;Seine&quot;, &quot;Kleidung&quot;, &quot;ist&quot;, &quot;einfach,&quot;, &quot;aber&quot;, &quot;sauber,&quot;, &quot;sein&quot;, &quot;Haar&quot;, &quot;sitzt,&quot;, &quot;der&quot;, &quot;Bart&quot;, &quot;ist&quot;, &quot;anständig&quot;, &quot;gestutzt.&quot;, &quot;Als&quot;, &quot;er&quot;, &quot;beim&quot;, &quot;Wetten&quot;, &quot;Geld&quot;, &quot;gewinnt,&quot;, &quot;kauft&quot;, &quot;er&quot;, &quot;sich&quot;, &quot;davon&quot;, &quot;sofort&quot;, &quot;einen&quot;, &quot;guten&quot;, &quot;Anzug&quot;, &quot;und&quot;, &quot;eine&quot;, &quot;dicke&quot;, &quot;Zigarre.&quot;, &quot;Hamers&quot;, &quot;Henry&quot;, &quot;Chinasky&quot;, &quot;ist&quot;, &quot;badet&quot;, &quot;nicht&quot;, &quot;in&quot;, &quot;Selbstverachtung,&quot;, &quot;vielmehr&quot;, &quot;ist&quot;, &quot;er&quot;, &quot;eine&quot;, &quot;schöne&quot;, &quot;Seele,&quot;, &quot;die&quot;, &quot;sich&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Welt&quot;, &quot;nicht&quot;, &quot;zurechtfindet&quot;, &quot;und&quot;, &quot;nur&quot;, &quot;durch&quot;, &quot;das&quot;, &quot;Schreiben&quot;, &quot;Erlösung&quot;, &quot;findet.&quot;, &quot;So&quot;, &quot;jedenfalls&quot;, &quot;deutet&quot;, &quot;es&quot;, &quot;das&quot;, &quot;Ende&quot;, &quot;des&quot;, &quot;Films&quot;, &quot;an.&quot;, &quot;So&quot;, &quot;ist&quot;, &quot;man&quot;, &quot;am&quot;, &quot;Ende&quot;, &quot;doch&quot;, &quot;versöhnt&quot;, &quot;mit&quot;, &quot;dieser&quot;, &quot;ungewöhnlichen&quot;, &quot;Verfilmung&quot;, &quot;von&quot;, &quot;Bukowskis&quot;, &quot;Roman,&quot;, &quot;die&quot;, &quot;mit&quot;, &quot;allen&quot;, &quot;Erwartungen&quot;, &quot;bricht&quot;, &quot;und&quot;, &quot;schon&quot;, &quot;deswegen&quot;, &quot;als&quot;, &quot;bisher&quot;, &quot;gelungenste&quot;, &quot;gelten&quot;, &quot;muss.&quot;];&amp;#10;&amp;#10;// set longest texts for reading baseline to get good RT estimates&amp;#10;// --&gt; select some of them later&amp;#10;var t2_03 = [&quot;Von&quot;, &quot;außen&quot;, &quot;ist&quot;, &quot;nichts&quot;, &quot;zu&quot;, &quot;sehen.&quot;, &quot;Nur&quot;, &quot;eine&quot;, &quot;weiße&quot;, &quot;Wand&quot;, &quot;und&quot;, &quot;eine&quot;, &quot;grüne&quot;, &quot;Tür&quot;, &quot;aus&quot;, &quot;Eisen.&quot;, &quot;Nasser&quot;, &quot;kramt&quot;, &quot;den&quot;, &quot;Schlüssel&quot;, &quot;aus&quot;, &quot;der&quot;, &quot;Tasche.&quot;, &quot;Er&quot;, &quot;sperrt&quot;, &quot;die&quot;, &quot;Tür&quot;, &quot;auf:&quot;, &quot;\&quot;Geht&quot;, &quot;einfach&quot;, &quot;die&quot;, &quot;Treppe&quot;, &quot;runter,&quot;, &quot;dann&quot;, &quot;seid&quot;, &quot;ihr&quot;, &quot;im&quot;, &quot;Probenraum\&quot;,&quot;, &quot;sagt&quot;, &quot;er.&quot;, &quot;Im&quot;, &quot;Keller&quot;, &quot;ist&quot;, &quot;es&quot;, &quot;dunkel.&quot;, &quot;Auch&quot;, &quot;als&quot;, &quot;Nasser&quot;, &quot;das&quot;, &quot;Licht&quot;, &quot;anschaltet,&quot;, &quot;sieht&quot;, &quot;man&quot;, &quot;nicht&quot;, &quot;viel&quot;, &quot;mehr&quot;, &quot;als&quot;, &quot;die&quot;, &quot;Treppe.&quot;, &quot;Nasser&quot;, &quot;schließt&quot;, &quot;die&quot;, &quot;Tür&quot;, &quot;sorgfältig&quot;, &quot;hinter&quot;, &quot;sich&quot;, &quot;ab:&quot;, &quot;\&quot;Vor&quot;, &quot;einiger&quot;, &quot;Zeit&quot;, &quot;war&quot;, &quot;jemand&quot;, &quot;vom&quot;, &quot;Geheimdienst&quot;, &quot;hier.&quot;, &quot;Seitdem&quot;, &quot;sind&quot;, &quot;wir&quot;, &quot;vorsichtiger&quot;, &quot;geworden.\&quot;&quot;, &quot;Das&quot;, &quot;klingt&quot;, &quot;doch&quot;, &quot;etwas&quot;, &quot;dramatisch.&quot;, &quot;Für&quot;, &quot;einen&quot;, &quot;kurzen&quot;, &quot;Moment&quot;, &quot;ist&quot;, &quot;man&quot;, &quot;sich&quot;, &quot;nicht&quot;, &quot;sicher,&quot;, &quot;ob&quot;, &quot;es&quot;, &quot;als&quot;, &quot;Witz&quot;, &quot;gemeint&quot;, &quot;ist.&quot;, &quot;Geheimdienst,&quot;, &quot;wieso&quot;, &quot;das&quot;, &quot;denn?&quot;, &quot;\&quot;Wir&quot;, &quot;sind&quot;, &quot;Heavy-Metal-Musiker\&quot;,&quot;, &quot;sagt&quot;, &quot;Nasser.&quot;, &quot;\&quot;Das&quot;, &quot;kann&quot;, &quot;in&quot;, &quot;unserem&quot;, &quot;Land&quot;, &quot;einen&quot;, &quot;Haufen&quot;, &quot;Ärger&quot;, &quot;bedeuten.\&quot;&quot;, &quot;Denn&quot;, &quot;wer&quot;, &quot;in&quot;, &quot;Jordanien&quot;, &quot;laut&quot;, &quot;Heavy&quot;, &quot;Metal&quot;, &quot;hört,&quot;, &quot;bekommt&quot;, &quot;nicht&quot;, &quot;nur&quot;, &quot;Ärger&quot;, &quot;mit&quot;, &quot;seinen&quot;, &quot;Nachbarn.&quot;, &quot;Hier&quot;, &quot;kann&quot;, &quot;man&quot;, &quot;dafür&quot;, &quot;sogar&quot;, &quot;im&quot;, &quot;Gefängnis&quot;, &quot;landen.&quot;, &quot;Nasser&quot;, &quot;ist&quot;, &quot;bereit,&quot;, &quot;das&quot;, &quot;Risiko&quot;, &quot;einzugehen:&quot;, &quot;Vor&quot;, &quot;drei&quot;, &quot;Jahren&quot;, &quot;hat&quot;, &quot;er&quot;, &quot;gemeinsam&quot;, &quot;mit&quot;, &quot;seinem&quot;, &quot;Freund&quot;, &quot;Adnan&quot;, &quot;eine&quot;, &quot;Band&quot;, &quot;gegründet.&quot;, &quot;Mit&quot;, &quot;ihrem&quot;, &quot;Freund&quot;, &quot;Zeid,&quot;, &quot;dem&quot;, &quot;Schlagzeuger&quot;, &quot;einer&quot;, &quot;befreundeten&quot;, &quot;Band,&quot;, &quot;sitzen&quot;, &quot;sie&quot;, &quot;im&quot;, &quot;Proberaum.&quot;, &quot;Alle&quot;, &quot;drei&quot;, &quot;studieren&quot;, &quot;in&quot;, &quot;Jordaniens&quot;, &quot;Hauptstadt&quot;, &quot;Amman.&quot;, &quot;Sie&quot;, &quot;tragen&quot;, &quot;schwarze&quot;, &quot;T-Shirts&quot;, &quot;und&quot;, &quot;Turnschuhe,&quot;, &quot;haben&quot;, &quot;die&quot;, &quot;Zigarette&quot;, &quot;in&quot;, &quot;der&quot;, &quot;einen&quot;, &quot;Hand,&quot;, &quot;die&quot;, &quot;Bierdose&quot;, &quot;in&quot;, &quot;der&quot;, &quot;anderen.&quot;, &quot;In&quot;, &quot;der&quot;, &quot;konservativen&quot;, &quot;jordanischen&quot;, &quot;Gesellschaft&quot;, &quot;ecken&quot;, &quot;die&quot;, &quot;Metal-Fans&quot;, &quot;mit&quot;, &quot;ihrer&quot;, &quot;scheinbar&quot;, &quot;aggressiven&quot;, &quot;Musik&quot;, &quot;und&quot;, &quot;den&quot;, &quot;schwarzen&quot;, &quot;Klamotten&quot;, &quot;an.&quot;, &quot;\&quot;Sie&quot;, &quot;sagen,&quot;, &quot;wir&quot;, &quot;veranstalten&quot;, &quot;Orgien&quot;, &quot;auf&quot;, &quot;unseren&quot;, &quot;Konzerten,&quot;, &quot;nehmen&quot;, &quot;Drogen&quot;, &quot;und&quot;, &quot;beten&quot;, &quot;den&quot;, &quot;Teufel&quot;, &quot;an\&quot;,&quot;, &quot;sagt&quot;, &quot;Nasser.&quot;, &quot;Er&quot;, &quot;kann&quot;, &quot;darüber&quot;, &quot;nur&quot;, &quot;lachen.&quot;, &quot;\&quot;Wir&quot;, &quot;sind&quot;, &quot;gläubige&quot;, &quot;Muslime.&quot;, &quot;Wir&quot;, &quot;beten&quot;, &quot;zu&quot;, &quot;Gott&quot;, &quot;und&quot;, &quot;nicht&quot;, &quot;zu&quot;, &quot;Satan.\&quot;&quot;, &quot;Heavy&quot;, &quot;Metal&quot;, &quot;gibt&quot;, &quot;es&quot;, &quot;in&quot;, &quot;arabischen&quot;, &quot;Ländern&quot;, &quot;noch&quot;, &quot;nicht&quot;, &quot;lange:&quot;, &quot;Die&quot;, &quot;ersten&quot;, &quot;Konzerte&quot;, &quot;fanden&quot;, &quot;in&quot;, &quot;den&quot;, &quot;neunziger&quot;, &quot;Jahren&quot;, &quot;statt,&quot;, &quot;begleitet&quot;, &quot;von&quot;, &quot;Ärger&quot;, &quot;mit&quot;, &quot;der&quot;, &quot;Polizei.&quot;, &quot;Bei&quot;, &quot;einer&quot;, &quot;Razzia&quot;, &quot;in&quot;, &quot;Ägypten&quot;, &quot;wurden&quot;, &quot;in&quot;, &quot;den&quot;, &quot;90ern&quot;, &quot;rund&quot;, &quot;70&quot;, &quot;Jugendliche&quot;, &quot;verhaftet.&quot;, &quot;Die&quot;, &quot;Polizei&quot;, &quot;nahm&quot;, &quot;alles&quot;, &quot;mit,&quot;, &quot;was&quot;, &quot;ihnen&quot;, &quot;in&quot;, &quot;deren&quot;, &quot;Zimmern&quot;, &quot;verdächtig&quot;, &quot;vorkam:&quot;, &quot;Poster,&quot;, &quot;CDs&quot;, &quot;und&quot;, &quot;Kassetten,&quot;, &quot;sogar&quot;, &quot;ein&quot;, &quot;schwarzes&quot;, &quot;T-Shirt&quot;, &quot;mit&quot;, &quot;Bugs-Bunny-Aufdruck.&quot;, &quot;Im&quot;, &quot;März&quot;, &quot;2003&quot;, &quot;stürmten&quot;, &quot;Polizisten&quot;, &quot;ein&quot;, &quot;Metal-Konzert&quot;, &quot;in&quot;, &quot;Marokko&quot;, &quot;und&quot;, &quot;nahmen&quot;, &quot;14&quot;, &quot;Jugendliche&quot;, &quot;fest.&quot;, &quot;Alle&quot;, &quot;sollten&quot;, &quot;zu&quot;, &quot;je&quot;, &quot;einem&quot;, &quot;Jahr&quot;, &quot;Haft&quot;, &quot;verurteilt&quot;, &quot;werden.&quot;, &quot;Daraufhin&quot;, &quot;gingen&quot;, &quot;500&quot;, &quot;Jugendliche&quot;, &quot;auf&quot;, &quot;die&quot;, &quot;Straße.&quot;, &quot;Das&quot;, &quot;Urteil&quot;, &quot;wurde&quot;, &quot;aufgehoben.&quot;, &quot;In&quot;, &quot;Jordanien&quot;, &quot;gab&quot;, &quot;es&quot;, &quot;in&quot;, &quot;der&quot;, &quot;letzten&quot;, &quot;Zeit&quot;, &quot;keine&quot;, &quot;Festnahmen&quot;, &quot;mehr.&quot;, &quot;\&quot;Aber&quot;, &quot;das&quot;, &quot;liegt&quot;, &quot;einfach&quot;, &quot;daran,&quot;, &quot;dass&quot;, &quot;sie&quot;, &quot;unsere&quot;, &quot;Konzerte&quot;, &quot;gleich&quot;, &quot;verbieten.&quot;, &quot;Wenn&quot;, &quot;wir&quot;, &quot;Plakate&quot;, &quot;aufhängen&quot;, &quot;werden&quot;, &quot;wir&quot;, &quot;direkt&quot;, &quot;vom&quot;, &quot;Geheimdienst&quot;, &quot;angerufen\&quot;,&quot;, &quot;sagt&quot;, &quot;Nasser.&quot;, &quot;Er&quot;, &quot;nimmt&quot;, &quot;die&quot;, &quot;Gitarre&quot;, &quot;in&quot;, &quot;die&quot;, &quot;Hand&quot;, &quot;und&quot;, &quot;nickt&quot;, &quot;seinem&quot;, &quot;Freund&quot;, &quot;Adnan&quot;, &quot;zu.&quot;, &quot;\&quot;Was&quot;, &quot;spielen&quot;, &quot;wir?\&quot;,&quot;, &quot;fragt&quot;, &quot;er.&quot;, &quot;Adnan&quot;, &quot;legt&quot;, &quot;am&quot;, &quot;Schlagzeug&quot;, &quot;einfach&quot;, &quot;los.&quot;, &quot;Es&quot;, &quot;wird&quot;, &quot;laut&quot;, &quot;im&quot;, &quot;Proberaum.&quot;, &quot;Für&quot;, &quot;die&quot;, &quot;nächsten&quot;, &quot;Minuten&quot;, &quot;sind&quot;, &quot;die&quot;, &quot;beiden&quot;, &quot;völlig&quot;, &quot;in&quot;, &quot;ihre&quot;, &quot;Musik&quot;, &quot;vertieft.&quot;, &quot;Wann&quot;, &quot;Nasser&quot;, &quot;das&quot;, &quot;letzte&quot;, &quot;Mal&quot;, &quot;richtig&quot;, &quot;aufgetreten&quot;, &quot;ist?&quot;, &quot;Er&quot;, &quot;kann&quot;, &quot;sich&quot;, &quot;kaum&quot;, &quot;erinnern:&quot;, &quot;Es&quot;, &quot;ist&quot;, &quot;lange&quot;, &quot;her.&quot;, &quot;Konzerte&quot;, &quot;sind&quot;, &quot;im&quot;, &quot;Moment&quot;, &quot;nur&quot;, &quot;im&quot;, &quot;Geheimen&quot;, &quot;möglich.&quot;, &quot;Heavy-Metal-Fans&quot;, &quot;sind&quot;, &quot;Sturköpfe.&quot;, &quot;\&quot;Wir&quot;, &quot;schaffen&quot;, &quot;es&quot;, &quot;irgendwie&quot;, &quot;weiterzumachen\&quot;,&quot;, &quot;sagt&quot;, &quot;Muhannad.&quot;, &quot;Er&quot;, &quot;studiert&quot;, &quot;zusammen&quot;, &quot;mit&quot;, &quot;Nasser&quot;, &quot;und&quot;, &quot;Adnan&quot;, &quot;und&quot;, &quot;spielt&quot;, &quot;in&quot;, &quot;gleich&quot;, &quot;vier&quot;, &quot;Metal-Bands.&quot;, &quot;Erst&quot;, &quot;vor&quot;, &quot;Kurzem&quot;, &quot;hat&quot;, &quot;er&quot;, &quot;im&quot;, &quot;Keller&quot;, &quot;seiner&quot;, &quot;Eltern&quot;, &quot;ein&quot;, &quot;Studio&quot;, &quot;eröffnet.&quot;, &quot;Wer&quot;, &quot;ihn&quot;, &quot;besuchen&quot;, &quot;will,&quot;, &quot;muss&quot;, &quot;durch&quot;, &quot;erst&quot;, &quot;durch&quot;, &quot;die&quot;, &quot;Garage&quot;, &quot;und&quot;, &quot;dann&quot;, &quot;die&quot;, &quot;Treppe&quot;, &quot;hinunter.&quot;, &quot;Die&quot;, &quot;Wände&quot;, &quot;des&quot;, &quot;Studios&quot;, &quot;sind&quot;, &quot;dunkelrot&quot;, &quot;bemalt.&quot;, &quot;Überall&quot;, &quot;stehen&quot;, &quot;Bierdosen&quot;, &quot;und&quot;, &quot;Aschenbecher.&quot;, &quot;Die&quot;, &quot;Luft&quot;, &quot;ist&quot;, &quot;stickig.&quot;, &quot;\&quot;Im&quot;, &quot;Moment&quot;, &quot;arbeite&quot;, &quot;ich&quot;, &quot;an&quot;, &quot;zwei&quot;, &quot;Alben\&quot;,&quot;, &quot;sagt&quot;, &quot;Muhannad.&quot;, &quot;\&quot;Ich&quot;, &quot;hoffe,&quot;, &quot;dass&quot;, &quot;es&quot;, &quot;noch&quot;, &quot;mehr&quot;, &quot;werden.\&quot;&quot;, &quot;Denn&quot;, &quot;trotz&quot;, &quot;aller&quot;, &quot;Probleme&quot;, &quot;mit&quot;, &quot;Geheimdienst&quot;, &quot;und&quot;, &quot;Polizei&quot;, &quot;gibt&quot;, &quot;es&quot;, &quot;aktuell&quot;, &quot;etwa&quot;, &quot;zehn&quot;, &quot;Metal-Bands&quot;, &quot;in&quot;, &quot;Jordanien.&quot;, &quot;Insgesamt&quot;, &quot;sind&quot;, &quot;wohl&quot;, &quot;700&quot;, &quot;Leute&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Szene&quot;, &quot;aktiv.&quot;, &quot;Bei&quot;, &quot;sechs&quot;, &quot;Millionen&quot;, &quot;Jordaniern&quot;, &quot;zwar&quot;, &quot;eine&quot;, &quot;geringe&quot;, &quot;Anzahl,&quot;, &quot;doch&quot;, &quot;die&quot;, &quot;Szene&quot;, &quot;wachse&quot;, &quot;auch&quot;, &quot;durch&quot;, &quot;die&quot;, &quot;Verbote,&quot;, &quot;sagt&quot;, &quot;Muhannad:&quot;, &quot;\&quot;Das&quot;, &quot;ist&quot;, &quot;ganz&quot;, &quot;einfach.&quot;, &quot;Was&quot;, &quot;verboten&quot;, &quot;ist,&quot;, &quot;gewinnt&quot;, &quot;an&quot;, &quot;Reiz.\&quot;&quot;, &quot;Doch&quot;, &quot;mit&quot;, &quot;der&quot;, &quot;Metal-Szene&quot;, &quot;wächst&quot;, &quot;auch&quot;, &quot;das&quot;, &quot;Misstrauen&quot;, &quot;der&quot;, &quot;Behörden.&quot;, &quot;Wer&quot;, &quot;sich&quot;, &quot;in&quot;, &quot;Behörden&quot;, &quot;nach&quot;, &quot;den&quot;, &quot;Heavy-Metal-Fans&quot;, &quot;erkundigt,&quot;, &quot;bekommt&quot;, &quot;nach&quot;, &quot;viel&quot;, &quot;Herumfragen&quot;, &quot;immer&quot;, &quot;die&quot;, &quot;gleiche&quot;, &quot;Antwort:&quot;, &quot;\&quot;Damit&quot;, &quot;habe&quot;, &quot;ich&quot;, &quot;nichts&quot;, &quot;zu&quot;, &quot;tun,&quot;, &quot;fragen&quot;, &quot;Sie&quot;, &quot;jemand&quot;, &quot;anderen.\&quot;&quot;, &quot;Die&quot;, &quot;gleiche&quot;, &quot;Reaktion&quot;, &quot;auch&quot;, &quot;bei&quot;, &quot;der&quot;, &quot;Polizei:&quot;, &quot;Keiner&quot;, &quot;möchte&quot;, &quot;zuständig&quot;, &quot;sein.&quot;, &quot;\&quot;Wir&quot;, &quot;haben&quot;, &quot;zwar&quot;, &quot;nichts&quot;, &quot;gegen&quot;, &quot;die&quot;, &quot;Musik,&quot;, &quot;aber&quot;, &quot;Satanismus&quot;, &quot;ist&quot;, &quot;verboten\&quot;,&quot;, &quot;sagt&quot;, &quot;schließlich&quot;, &quot;einer&quot;, &quot;der&quot;, &quot;Polizisten.&quot;, &quot;Der&quot;, &quot;Frage,&quot;, &quot;was&quot;, &quot;Heavy&quot;, &quot;Metal&quot;, &quot;und&quot;, &quot;Satanismus&quot;, &quot;miteinander&quot;, &quot;zu&quot;, &quot;tun&quot;, &quot;haben,&quot;, &quot;weicht&quot;, &quot;er&quot;, &quot;aus.&quot;, &quot;\&quot;Jeder&quot;, &quot;Musiker,&quot;, &quot;der&quot;, &quot;eine&quot;, &quot;Lizenz&quot;, &quot;hat,&quot;, &quot;kann&quot;, &quot;ein&quot;, &quot;Konzert&quot;, &quot;veranstalten.\&quot;&quot;, &quot;Warum&quot;, &quot;aber&quot;, &quot;bekommen&quot;, &quot;Metal-Fans&quot;, &quot;keine&quot;, &quot;Lizenz?&quot;, &quot;\&quot;Das&quot;, &quot;entscheidet&quot;, &quot;jemand&quot;, &quot;anderes,&quot;, &quot;dafür&quot;, &quot;bin&quot;, &quot;ich&quot;, &quot;nicht&quot;, &quot;zuständig.\&quot;&quot;, &quot;Adnan&quot;, &quot;hat&quot;, &quot;vor&quot;, &quot;einiger&quot;, &quot;Zeit&quot;, &quot;versucht,&quot;, &quot;die&quot;, &quot;Polizei&quot;, &quot;zu&quot;, &quot;einem&quot;, &quot;Konzert&quot;, &quot;einzuladen.&quot;, &quot;Er&quot;, &quot;dachte,&quot;, &quot;wenn&quot;, &quot;die&quot;, &quot;Polizisten&quot;, &quot;mehr&quot;, &quot;über&quot;, &quot;sie&quot;, &quot;wüssten,&quot;, &quot;hätten&quot;, &quot;sie&quot;, &quot;auch&quot;, &quot;keine&quot;, &quot;Probleme&quot;, &quot;mehr&quot;, &quot;mit&quot;, &quot;ihnen.&quot;, &quot;Aber&quot;, &quot;auf&quot;, &quot;seinen&quot;, &quot;Brief&quot;, &quot;bekam&quot;, &quot;er&quot;, &quot;keine&quot;, &quot;Antwort.&quot;, &quot;Über&quot;, &quot;die&quot;, &quot;Heavy&quot;, &quot;Metal&quot;, &quot;Szene&quot;, &quot;kursieren&quot;, &quot;viele&quot;, &quot;Vorurteile,&quot;, &quot;und&quot;, &quot;das&quot;, &quot;nicht&quot;, &quot;nur&quot;, &quot;bei&quot;, &quot;der&quot;, &quot;Polizei&quot;, &quot;sondern&quot;, &quot;auch&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Gesellschaft.&quot;, &quot;Die&quot;, &quot;Metal-Fans&quot;, &quot;haben&quot;, &quot;schon&quot;, &quot;deshalb&quot;, &quot;mit&quot;, &quot;mehr&quot;, &quot;Vorurteilen&quot;, &quot;zu&quot;, &quot;kämpfen,&quot;, &quot;weil&quot;, &quot;sie&quot;, &quot;mit&quot;, &quot;ihrem&quot;, &quot;Äußeren&quot;, &quot;überall&quot;, &quot;anecken.&quot;, &quot;Die&quot;, &quot;Musiker&quot;, &quot;heben&quot;, &quot;sich&quot;, &quot;deutlich&quot;, &quot;von&quot;, &quot;anderen&quot;, &quot;arabischen&quot;, &quot;Jugendlichen&quot;, &quot;ab.&quot;, &quot;Muhannad&quot;, &quot;trägt&quot;, &quot;eine&quot;, &quot;Schirmmütze,&quot;, &quot;auf&quot;, &quot;seinem&quot;, &quot;T-Shirt&quot;, &quot;prangt&quot;, &quot;das&quot;, &quot;Cover&quot;, &quot;einer&quot;, &quot;Metal-Band.&quot;, &quot;Sein&quot;, &quot;Freund&quot;, &quot;Hani&quot;, &quot;sitzt&quot;, &quot;neben&quot;, &quot;ihm&quot;, &quot;auf&quot;, &quot;dem&quot;, &quot;Sofa,&quot;, &quot;die&quot;, &quot;langen&quot;, &quot;Haare&quot;, &quot;zu&quot;, &quot;einem&quot;, &quot;Pferdeschwanz&quot;, &quot;gebunden.&quot;, &quot;Er&quot;, &quot;trägt&quot;, &quot;eine&quot;, &quot;beige&quot;, &quot;Armee-Hose.&quot;, &quot;Nasser&quot;, &quot;wird&quot;, &quot;bei&quot;, &quot;Familienfesten&quot;, &quot;sogar&quot;, &quot;von&quot;, &quot;seinen&quot;, &quot;Verwandten&quot;, &quot;angestarrt&quot;, &quot;wegen&quot;, &quot;seines&quot;, &quot;Lockenkopfes.&quot;, &quot;Trotz&quot;, &quot;der&quot;, &quot;zahlreichen&quot;, &quot;Probleme&quot;, &quot;kommt&quot;, &quot;es&quot;, &quot;für&quot;, &quot;keinen&quot;, &quot;von&quot;, &quot;ihnen&quot;, &quot;in&quot;, &quot;Frage,&quot;, &quot;die&quot;, &quot;Musik&quot;, &quot;aufzugeben.&quot;, &quot;\&quot;Heavy&quot;, &quot;Metal&quot;, &quot;ist&quot;, &quot;magisch\&quot;,&quot;, &quot;sagt&quot;, &quot;Adnan.&quot;, &quot;\&quot;Heavy&quot;, &quot;Metal&quot;, &quot;ist&quot;, &quot;alles\&quot;,&quot;, &quot;sagt&quot;, &quot;Nasser.&quot;, &quot;Und&quot;, &quot;Hani&quot;, &quot;würde&quot;, &quot;dafür&quot;, &quot;sein&quot;, &quot;Leben&quot;, &quot;geben.&quot;, &quot;Oder&quot;, &quot;zumindest&quot;, &quot;die&quot;, &quot;Heimat:&quot;, &quot;Wenn&quot;, &quot;sich&quot;, &quot;die&quot;, &quot;Situation&quot;, &quot;in&quot;, &quot;Jordanien&quot;, &quot;nicht&quot;, &quot;bessert,&quot;, &quot;sei&quot;, &quot;die&quot;, &quot;Musik&quot;, &quot;für&quot;, &quot;ihn&quot;, &quot;definitiv&quot;, &quot;ein&quot;, &quot;Grund,&quot;, &quot;das&quot;, &quot;Land&quot;, &quot;zu&quot;, &quot;verlassen.&quot;];&amp;#10;var t2_09 = [&quot;Die&quot;, &quot;riesigen&quot;, &quot;Fassaden&quot;, &quot;sind&quot;, &quot;die&quot;, &quot;größte&quot;, &quot;Attraktion&quot;, &quot;Petras.&quot;, &quot;Über&quot;, &quot;die&quot;, &quot;Gräber,&quot;, &quot;die&quot;, &quot;sich&quot;, &quot;hinter&quot;, &quot;ihnen&quot;, &quot;verbergen,&quot;, &quot;ist&quot;, &quot;trotzdem&quot;, &quot;nur&quot;, &quot;wenig&quot;, &quot;bekannt.&quot;, &quot;Seit&quot;, &quot;1985&quot;, &quot;gehört&quot;, &quot;Petra&quot;, &quot;zum&quot;, &quot;Weltkulturerbe.&quot;, &quot;Jedes&quot;, &quot;Jahr&quot;, &quot;kommen&quot;, &quot;viele&quot;, &quot;tausend&quot;, &quot;Touristen.&quot;, &quot;Fast&quot;, &quot;jedes&quot;, &quot;der&quot;, &quot;über&quot;, &quot;600&quot;, &quot;Gräber&quot;, &quot;ist&quot;, &quot;frei&quot;, &quot;zugänglich,&quot;, &quot;solange&quot;, &quot;man&quot;, &quot;gut&quot;, &quot;klettern&quot;, &quot;kann.&quot;, &quot;Dennoch&quot;, &quot;ist&quot;, &quot;die&quot;, &quot;Stadt&quot;, &quot;archäologisch&quot;, &quot;größtenteils&quot;, &quot;nicht&quot;, &quot;gut&quot;, &quot;untersucht.&quot;, &quot;Die&quot;, &quot;Metropole&quot;, &quot;war&quot;, &quot;einst&quot;, &quot;die&quot;, &quot;Hauptstadt&quot;, &quot;der&quot;, &quot;Nabatäer.&quot;, &quot;Sie&quot;, &quot;waren&quot;, &quot;ein&quot;, &quot;sesshaft&quot;, &quot;gewordenes&quot;, &quot;Nomadenvolks,&quot;, &quot;das&quot;, &quot;vor&quot;, &quot;rund&quot;, &quot;2500&quot;, &quot;Jahren&quot;, &quot;in&quot;, &quot;der&quot;, &quot;jordanischen&quot;, &quot;Wüste&quot;, &quot;ein&quot;, &quot;Königreich&quot;, &quot;gründete.&quot;, &quot;Zwei&quot;, &quot;Jahrhunderte&quot;, &quot;beherrschten&quot;, &quot;die&quot;, &quot;Nabatäer&quot;, &quot;große&quot;, &quot;Teile&quot;, &quot;des&quot;, &quot;Handels&quot;, &quot;im&quot;, &quot;Nahen&quot;, &quot;Osten.&quot;, &quot;So&quot;, &quot;reich&quot;, &quot;und&quot;, &quot;mächtig&quot;, &quot;wurde&quot;, &quot;das&quot;, &quot;Wüstenvolk,&quot;, &quot;dass&quot;, &quot;es&quot;, &quot;sogar&quot;, &quot;die&quot;, &quot;Römer&quot;, &quot;herausforderte.&quot;, &quot;Doch&quot;, &quot;wie&quot;, &quot;ihre&quot;, &quot;riesige&quot;, &quot;Hauptstadt&quot;, &quot;mitten&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Wüste&quot;, &quot;funktioniert&quot;, &quot;hat?&quot;, &quot;Niemand&quot;, &quot;weiß&quot;, &quot;es&quot;, &quot;genau.&quot;, &quot;Lucy&quot;, &quot;Wadeson&quot;, &quot;hat&quot;, &quot;an&quot;, &quot;ihrem&quot;, &quot;Arbeitsplatz&quot;, &quot;eine&quot;, &quot;Aussicht,&quot;, &quot;um&quot;, &quot;die&quot;, &quot;sie&quot;, &quot;mancher&quot;, &quot;Vorstand&quot;, &quot;in&quot;, &quot;einer&quot;, &quot;Hochhaus-Chefetage&quot;, &quot;beneiden&quot;, &quot;würde:&quot;, &quot;Das&quot;, &quot;Grab,&quot;, &quot;das&quot;, &quot;sie&quot;, &quot;in&quot;, &quot;den&quot;, &quot;vergangenen&quot;, &quot;Wochen&quot;, &quot;erforscht&quot;, &quot;hat,&quot;, &quot;haben&quot;, &quot;die&quot;, &quot;Nabatäer&quot;, &quot;hoch&quot;, &quot;in&quot;, &quot;die&quot;, &quot;Flanke&quot;, &quot;eines&quot;, &quot;Bergs&quot;, &quot;gemeißelt.&quot;, &quot;In&quot;, &quot;Petra&quot;, &quot;gibt&quot;, &quot;es&quot;, &quot;628&quot;, &quot;Fassadengräber.&quot;, &quot;Weniger&quot;, &quot;als&quot;, &quot;zehn&quot;, &quot;von&quot;, &quot;ihnen&quot;, &quot;sind&quot;, &quot;komplett&quot;, &quot;erforscht.&quot;, &quot;Bedeutende&quot;, &quot;Funde&quot;, &quot;erwarten&quot;, &quot;die&quot;, &quot;Forscher&quot;, &quot;trotzdem&quot;, &quot;nicht&quot;, &quot;mehr.&quot;, &quot;Die&quot;, &quot;meisten&quot;, &quot;Gräber&quot;, &quot;wurden&quot;, &quot;in&quot;, &quot;den&quot;, &quot;vergangenen&quot;, &quot;Jahrhunderten&quot;, &quot;mehrfach&quot;, &quot;ausgeraubt.&quot;, &quot;\&quot;Manchmal&quot;, &quot;haben&quot;, &quot;wir&quot;, &quot;Glück,&quot;, &quot;wenn&quot;, &quot;wir&quot;, &quot;noch&quot;, &quot;einen&quot;, &quot;Teil&quot;, &quot;des&quot;, &quot;Skeletts&quot;, &quot;finden\&quot;,&quot;, &quot;sagt&quot;, &quot;die&quot;, &quot;Archäologin.&quot;, &quot;Doch&quot;, &quot;über&quot;, &quot;Petra&quot;, &quot;als&quot;, &quot;funktionierende&quot;, &quot;Einheit&quot;, &quot;verraten&quot;, &quot;solche&quot;, &quot;Funde&quot;, &quot;nur&quot;, &quot;wenig.&quot;, &quot;Sicher&quot;, &quot;ist,&quot;, &quot;dass&quot;, &quot;die&quot;, &quot;Stadt&quot;, &quot;in&quot;, &quot;atemberaubend&quot;, &quot;kurzer&quot;, &quot;Zeit&quot;, &quot;entstand.&quot;, &quot;Als&quot;, &quot;die&quot;, &quot;Nabatäer&quot;, &quot;aus&quot;, &quot;Arabien&quot;, &quot;ins&quot;, &quot;heutige&quot;, &quot;Jordanien&quot;, &quot;vordrangen,&quot;, &quot;war&quot;, &quot;die&quot;, &quot;Region&quot;, &quot;die&quot;, &quot;reinste&quot;, &quot;Goldgrube.&quot;, &quot;Das&quot;, &quot;Land&quot;, &quot;selbst&quot;, &quot;war&quot;, &quot;trocken&quot;, &quot;und&quot;, &quot;karg.&quot;, &quot;Bei&quot;, &quot;Petra&quot;, &quot;kreuzten&quot;, &quot;sich&quot;, &quot;jedoch&quot;, &quot;mehrere&quot;, &quot;Handelswege,&quot;, &quot;darunter&quot;, &quot;die&quot;, &quot;uralte&quot;, &quot;Weihrauchstraße.&quot;, &quot;Die&quot;, &quot;Kontrolle&quot;, &quot;über&quot;, &quot;das&quot;, &quot;Gebiet&quot;, &quot;glich&quot;, &quot;einem&quot;, &quot;Lotteriegewinn.&quot;, &quot;Kaum&quot;, &quot;hatten&quot;, &quot;die&quot;, &quot;Nabatäer&quot;, &quot;ihr&quot;, &quot;Königreich&quot;, &quot;gegründet,&quot;, &quot;erlebte&quot;, &quot;Petra&quot;, &quot;einen&quot;, &quot;ungeheuren&quot;, &quot;Bau-Boom.&quot;, &quot;Binnen&quot;, &quot;weniger&quot;, &quot;Jahrzehnte&quot;, &quot;entstanden&quot;, &quot;hunderte&quot;, &quot;Höhlen&quot;, &quot;mit&quot;, &quot;prunkvollen&quot;, &quot;Fassaden&quot;, &quot;und&quot;, &quot;teils&quot;, &quot;gewaltigen&quot;, &quot;Räumen.&quot;, &quot;Von&quot;, &quot;der&quot;, &quot;eigentlichen&quot;, &quot;Stadt&quot;, &quot;und&quot;, &quot;ihren&quot;, &quot;vielen&quot;, &quot;hundert&quot;, &quot;Wohnhäusern&quot;, &quot;ist&quot;, &quot;nichts&quot;, &quot;geblieben&quot;, &quot;außer&quot;, &quot;Steinhaufen&quot;, &quot;und&quot;, &quot;Mauerreste.&quot;, &quot;Das&quot;, &quot;hat&quot;, &quot;selbst&quot;, &quot;Experten&quot;, &quot;zu&quot;, &quot;einem&quot;, &quot;groben&quot;, &quot;Irrtum&quot;, &quot;verleitet:&quot;, &quot;Bis&quot;, &quot;in&quot;, &quot;die&quot;, &quot;siebziger&quot;, &quot;Jahre&quot;, &quot;glaubte&quot;, &quot;man,&quot;, &quot;Petra&quot;, &quot;sei&quot;, &quot;eine&quot;, &quot;Stadt&quot;, &quot;für&quot;, &quot;die&quot;, &quot;Toten&quot;, &quot;und&quot;, &quot;die&quot;, &quot;Götter&quot;, &quot;gewesen&quot;, &quot;und&quot;, &quot;die&quot;, &quot;Leute&quot;, &quot;hätten&quot;, &quot;woanders&quot;, &quot;gewohnt.&quot;, &quot;Aber&quot;, &quot;es&quot;, &quot;war&quot;, &quot;eine&quot;, &quot;ganz&quot;, &quot;normale&quot;, &quot;Stadt&quot;, &quot;,&quot;, &quot;nur&quot;, &quot;an&quot;, &quot;einem&quot;, &quot;unmöglichen&quot;, &quot;Ort.&quot;, &quot;Der&quot;, &quot;Archäologe&quot;, &quot;Stephan&quot;, &quot;Schmid&quot;, &quot;und&quot;, &quot;sein&quot;, &quot;Team&quot;, &quot;haben&quot;, &quot;in&quot;, &quot;diesem&quot;, &quot;Frühjahr&quot;, &quot;eine&quot;, &quot;Studie&quot;, &quot;begonnen,&quot;, &quot;bei&quot;, &quot;der&quot;, &quot;ein&quot;, &quot;Teil&quot;, &quot;des&quot;, &quot;Stadtzentrums&quot;, &quot;erstmals&quot;, &quot;vollständig&quot;, &quot;erfasst&quot;, &quot;wird.&quot;, &quot;Eines&quot;, &quot;ist&quot;, &quot;schon&quot;, &quot;jetzt&quot;, &quot;klar:&quot;, &quot;Die&quot;, &quot;Nabatäer&quot;, &quot;hielten&quot;, &quot;nicht&quot;, &quot;wie&quot;, &quot;sonst&quot;, &quot;üblich&quot;, &quot;Abstand&quot;, &quot;zu&quot;, &quot;den&quot;, &quot;Toten.&quot;, &quot;Sie&quot;, &quot;lebten&quot;, &quot;mitten&quot;, &quot;unter&quot;, &quot;ihnen.&quot;, &quot;Überall&quot;, &quot;bietet&quot;, &quot;sich&quot;, &quot;das&quot;, &quot;gleiche&quot;, &quot;Bild:&quot;, &quot;Gräber&quot;, &quot;lagen&quot;, &quot;in&quot;, &quot;direkter&quot;, &quot;Nähe&quot;, &quot;zu&quot;, &quot;Wohnungen.&quot;, &quot;Mancherorts&quot;, &quot;lebten&quot;, &quot;die&quot;, &quot;Menschen&quot;, &quot;unten&quot;, &quot;in&quot;, &quot;einem&quot;, &quot;Felsen&quot;, &quot;während&quot;, &quot;quasi&quot;, &quot;auf&quot;, &quot;dem&quot;, &quot;Dach&quot;, &quot;die&quot;, &quot;Gräber&quot;, &quot;in&quot;, &quot;den&quot;, &quot;Stein&quot;, &quot;gehauen&quot;, &quot;waren.&quot;, &quot;Die&quot;, &quot;Ausgrabungen&quot;, &quot;zeigen&quot;, &quot;auch,&quot;, &quot;wie&quot;, &quot;die&quot;, &quot;Nabatäer&quot;, &quot;das&quot;, &quot;Kunststück&quot;, &quot;fertiggebracht&quot;, &quot;haben,&quot;, &quot;eine&quot;, &quot;Großstadt&quot;, &quot;mitten&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Wüste&quot;, &quot;mit&quot;, &quot;Wasser&quot;, &quot;zu&quot;, &quot;versorgen.&quot;, &quot;Die&quot;, &quot;seltenen&quot;, &quot;&quot;, &quot;Regenfälle&quot;, &quot;nutzten&quot;, &quot;die&quot;, &quot;Nabatäer&quot;, &quot;mit&quot;, &quot;einem&quot;, &quot;genialen&quot;, &quot;Bewässerungssystem:&quot;, &quot;Überall&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Stadt&quot;, &quot;waren&quot;, &quot;Wasserbecken&quot;, &quot;in&quot;, &quot;den&quot;, &quot;Fels&quot;, &quot;geschlagen.&quot;, &quot;Viele&quot;, &quot;Kilometer&quot;, &quot;Wasserleitungen&quot;, &quot;leiteten&quot;, &quot;das&quot;, &quot;Wasser&quot;, &quot;zuerst&quot;, &quot;in&quot;, &quot;die&quot;, &quot;Speicher&quot;, &quot;und&quot;, &quot;von&quot;, &quot;dort&quot;, &quot;aus&quot;, &quot;zu&quot;, &quot;den&quot;, &quot;Bewohnern.&quot;, &quot;Besonders&quot;, &quot;gut&quot;, &quot;sichtbar&quot;, &quot;wird&quot;, &quot;das&quot;, &quot;am&quot;, &quot;sogenannten&quot;, &quot;Soldatengrab,&quot;, &quot;denn&quot;, &quot;es&quot;, &quot;beweist&quot;, &quot;wie&quot;, &quot;geschickt&quot;, &quot;die&quot;, &quot;Nabatäer&quot;, &quot;im&quot;, &quot;Umgang&quot;, &quot;mit&quot;, &quot;Wasser&quot;, &quot;waren.&quot;, &quot;Im&quot;, &quot;Fels&quot;, &quot;über&quot;, &quot;dem&quot;, &quot;Gebäude&quot;, &quot;befindet&quot;, &quot;sich&quot;, &quot;ein&quot;, &quot;riesiges&quot;, &quot;Becken.&quot;, &quot;Hier&quot;, &quot;oben&quot;, &quot;sammelte&quot;, &quot;sich&quot;, &quot;das&quot;, &quot;Wasser&quot;, &quot;und&quot;, &quot;stürzte&quot;, &quot;nacheinander&quot;, &quot;in&quot;, &quot;zwei&quot;, &quot;weitere&quot;, &quot;Becken,&quot;, &quot;in&quot;, &quot;denen&quot;, &quot;sich&quot;, &quot;der&quot;, &quot;gröbste&quot;, &quot;Schmutz&quot;, &quot;absetzte.&quot;, &quot;Anschließend&quot;, &quot;strömte&quot;, &quot;das&quot;, &quot;Wasser&quot;, &quot;in&quot;, &quot;ein&quot;, &quot;weiteres&quot;, &quot;Becken.&quot;, &quot;Der&quot;, &quot;Trick:&quot;, &quot;Der&quot;, &quot;Behälter&quot;, &quot;lag&quot;, &quot;unter&quot;, &quot;dem&quot;, &quot;Fußboden.&quot;, &quot;In&quot;, &quot;völliger&quot;, &quot;Dunkelheit&quot;, &quot;sterben&quot;, &quot;alle&quot;, &quot;Bakterien&quot;, &quot;innerhalb&quot;, &quot;von&quot;, &quot;ein&quot;, &quot;bis&quot;, &quot;zwei&quot;, &quot;Tagen&quot;, &quot;ab.&quot;, &quot;Zuletzt&quot;, &quot;floss&quot;, &quot;das&quot;, &quot;Wasser&quot;, &quot;in&quot;, &quot;ein&quot;, &quot;kleineres&quot;, &quot;Becken,&quot;, &quot;aus&quot;, &quot;dem&quot;, &quot;die&quot;, &quot;Bewohner&quot;, &quot;es&quot;, &quot;entnehmen&quot;, &quot;konnten.&quot;, &quot;Auch&quot;, &quot;an&quot;, &quot;anderer&quot;, &quot;Stelle,&quot;, &quot;etwa&quot;, &quot;auf&quot;, &quot;den&quot;, &quot;Feldern,&quot;, &quot;sammelten&quot;, &quot;die&quot;, &quot;Nabatäer&quot;, &quot;das&quot;, &quot;Wasser&quot;, &quot;auf&quot;, &quot;ähnliche&quot;, &quot;Art.&quot;, &quot;Der&quot;, &quot;Aufwand&quot;, &quot;war&quot;, &quot;allerdings&quot;, &quot;enorm.&quot;, &quot;\&quot;Eigentlich&quot;, &quot;war&quot;, &quot;es&quot;, &quot;vollkommen&quot;, &quot;absurd,&quot;, &quot;an&quot;, &quot;diesem&quot;, &quot;Ort&quot;, &quot;eine&quot;, &quot;Stadt&quot;, &quot;zu&quot;, &quot;bauen\&quot;,&quot;, &quot;sagt&quot;, &quot;der&quot;, &quot;Archäologe&quot;, &quot;Schmid.&quot;, &quot;Wohl&quot;, &quot;auch&quot;, &quot;deshalb&quot;, &quot;war&quot;, &quot;das&quot;, &quot;Wunder&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Wüste&quot;, &quot;von&quot;, &quot;kurzer&quot;, &quot;Dauer.&quot;, &quot;In&quot;, &quot;ein&quot;, &quot;paar&quot;, &quot;Jahren&quot;, &quot;könnte&quot;, &quot;es&quot;, &quot;jedoch&quot;, &quot;erneut&quot;, &quot;verloren&quot;, &quot;gehen,&quot;, &quot;aber&quot;, &quot;diesmal&quot;, &quot;für&quot;, &quot;immer.&quot;, &quot;Der&quot;, &quot;Sandstein,&quot;, &quot;aus&quot;, &quot;dem&quot;, &quot;die&quot;, &quot;Stadt&quot;, &quot;besteht,&quot;, &quot;verwittert&quot;, &quot;schnell.&quot;, &quot;Die&quot;, &quot;vielen&quot;, &quot;Wasserleitungen,&quot;, &quot;die&quot;, &quot;den&quot;, &quot;Regen&quot;, &quot;einst&quot;, &quot;von&quot;, &quot;den&quot;, &quot;wertvollen&quot;, &quot;Fassaden&quot;, &quot;fernhielten,&quot;, &quot;wurden&quot;, &quot;von&quot;, &quot;den&quot;, &quot;Nabatäern&quot;, &quot;dauernd&quot;, &quot;in&quot;, &quot;Stand&quot;, &quot;gehalten.&quot;, &quot;Doch&quot;, &quot;wenn&quot;, &quot;es&quot;, &quot;jetzt&quot;, &quot;regnet,&quot;, &quot;strömt&quot;, &quot;das&quot;, &quot;Wasser&quot;, &quot;unkontrolliert&quot;, &quot;die&quot;, &quot;Fassaden&quot;, &quot;herab&quot;, &quot;oder&quot;, &quot;wälzt&quot;, &quot;sich&quot;, &quot;gemeinsam&quot;, &quot;mit&quot;, &quot;Schutt&quot;, &quot;durch&quot;, &quot;die&quot;, &quot;Stadt.&quot;, &quot;In&quot;, &quot;einem&quot;, &quot;prachtvollen&quot;, &quot;Haus&quot;, &quot;direkt&quot;, &quot;gegenüber&quot;, &quot;vom&quot;, &quot;Soldatengrab&quot;, &quot;zum&quot;, &quot;Beispiel&quot;, &quot;steht&quot;, &quot;das&quot;, &quot;Wasser&quot;, &quot;nach&quot;, &quot;Regenfällen&quot;, &quot;bis&quot;, &quot;zu&quot;, &quot;einem&quot;, &quot;Meter&quot;, &quot;hoch.&quot;, &quot;Für&quot;, &quot;den&quot;, &quot;Sandstein&quot;, &quot;ist&quot;, &quot;das&quot;, &quot;eine&quot;, &quot;Katastrophe.&quot;, &quot;Versuche&quot;, &quot;zur&quot;, &quot;Rettung&quot;, &quot;der&quot;, &quot;Fassaden&quot;, &quot;gab&quot;, &quot;es&quot;, &quot;durchaus.&quot;, &quot;Wirklich&quot;, &quot;erfolgreich&quot;, &quot;war&quot;, &quot;keiner.&quot;, &quot;Und&quot;, &quot;selbst&quot;, &quot;wenn&quot;, &quot;sie&quot;, &quot;es&quot;, &quot;gewesen&quot;, &quot;wären,&quot;, &quot;könnte&quot;, &quot;man&quot;, &quot;damit&quot;, &quot;nur&quot;, &quot;einige&quot;, &quot;der&quot;, &quot;wichtigsten&quot;, &quot;Strukturen&quot;, &quot;schützen.&quot;, &quot;Der&quot;, &quot;Rest&quot;, &quot;der&quot;, &quot;Stadt&quot;, &quot;wird&quot;, &quot;eines&quot;, &quot;Tages&quot;, &quot;wieder&quot;, &quot;zu&quot;, &quot;Sand&quot;, &quot;zerfallen.&quot;];&amp;#10;var t2_12 = [&quot;Der&quot;, &quot;Kapitän&quot;, &quot;hatte&quot;, &quot;sich&quot;, &quot;das&quot;, &quot;sicher&quot;, &quot;alles&quot;, &quot;ein&quot;, &quot;bisschen&quot;, &quot;anders&quot;, &quot;vorgestellt.&quot;, &quot;Der&quot;, &quot;französische&quot;, &quot;Abenteurer&quot;, &quot;François&quot;, &quot;Pyrard&quot;, &quot;wollte&quot;, &quot;im&quot;, &quot;Jahr&quot;, &quot;1602&quot;, &quot;nach&quot;, &quot;Indien&quot;, &quot;segeln.&quot;, &quot;Doch&quot;, &quot;sein&quot;, &quot;Schiff&quot;, &quot;gab&quot;, &quot;auf&quot;, &quot;offener&quot;, &quot;See&quot;, &quot;den&quot;, &quot;Geist&quot;, &quot;auf.&quot;, &quot;Pyrard&quot;, &quot;musste&quot;, &quot;sich&quot;, &quot;zusammen&quot;, &quot;mit&quot;, &quot;seiner&quot;, &quot;Mannschaft&quot;, &quot;auf&quot;, &quot;die&quot;, &quot;Malediven&quot;, &quot;retten.&quot;, &quot;Dumm&quot;, &quot;nur,&quot;, &quot;dass&quot;, &quot;der&quot;, &quot;dortige&quot;, &quot;König&quot;, &quot;die&quot;, &quot;Schiffbrüchigen&quot;, &quot;einfach&quot;, &quot;nicht&quot;, &quot;gehen&quot;, &quot;lassen&quot;, &quot;wollte.&quot;, &quot;Erst&quot;, &quot;fünf&quot;, &quot;Jahre&quot;, &quot;später&quot;, &quot;konnten&quot;, &quot;sie&quot;, &quot;fliehen.&quot;, &quot;Als&quot;, &quot;Pyrard&quot;, &quot;und&quot;, &quot;seiner&quot;, &quot;Crew&quot;, &quot;berichteten&quot;, &quot;nach&quot;, &quot;ihrer&quot;, &quot;Reise&quot;, &quot;von&quot;, &quot;einer&quot;, &quot;merkwürdigen&quot;, &quot;Frucht.&quot;, &quot;Immer&quot;, &quot;wieder&quot;, &quot;war&quot;, &quot;sie&quot;, &quot;an&quot;, &quot;die&quot;, &quot;Strände&quot;, &quot;der&quot;, &quot;Inseln&quot;, &quot;gespült&quot;, &quot;worden.&quot;, &quot;Nicht&quot;, &quot;nur,&quot;, &quot;dass&quot;, &quot;die&quot;, &quot;Früchte&quot;, &quot;riesig&quot;, &quot;waren.&quot;, &quot;Sie&quot;, &quot;erinnerten&quot;, &quot;auch&quot;, &quot;verdächtig&quot;, &quot;an&quot;, &quot;das&quot;, &quot;Becken&quot;, &quot;einer&quot;, &quot;Frau.&quot;, &quot;Der&quot;, &quot;König&quot;, &quot;bestand&quot;, &quot;darauf,&quot;, &quot;dass&quot;, &quot;solche&quot;, &quot;Fundstücke&quot;, &quot;alle&quot;, &quot;an&quot;, &quot;ihn&quot;, &quot;geliefert&quot;, &quot;werden.&quot;, &quot;Er&quot;, &quot;drohte&quot;, &quot;unehrlichen&quot;, &quot;Untertanen&quot;, &quot;sogar&quot;, &quot;mit&quot;, &quot;Folter&quot;, &quot;oder&quot;, &quot;gar&quot;, &quot;dem&quot;, &quot;Tod.&quot;, &quot;Die&quot;, &quot;Frucht,&quot;, &quot;die&quot;, &quot;Pyrard&quot;, &quot;gesehen&quot;, &quot;hatte,&quot;, &quot;war&quot;, &quot;die&quot;, &quot;Frucht&quot;, &quot;der&quot;, &quot;Seychellen-Palme.&quot;, &quot;Sie&quot;, &quot;ist&quot;, &quot;drei&quot;, &quot;bis&quot;, &quot;vier&quot;, &quot;Mal&quot;, &quot;so&quot;, &quot;groß&quot;, &quot;wie&quot;, &quot;eine&quot;, &quot;normale&quot;, &quot;Kokosnuss.&quot;, &quot;Die&quot;, &quot;Samen&quot;, &quot;sind&quot;, &quot;auch&quot;, &quot;schwerer&quot;, &quot;als&quot;, &quot;alles,&quot;, &quot;was&quot;, &quot;Biologen&quot;, &quot;an&quot;, &quot;Vergleichbarem&quot;, &quot;kennen.&quot;, &quot;Sie&quot;, &quot;wiegen&quot;, &quot;bis&quot;, &quot;zu&quot;, &quot;zwanzig&quot;, &quot;Kilo.&quot;, &quot;Die&quot;, &quot;Seychellen-Palme,&quot;, &quot;von&quot;, &quot;der&quot;, &quot;die&quot;, &quot;Nuss&quot;, &quot;stammt,&quot;, &quot;zählt&quot;, &quot;zu&quot;, &quot;den&quot;, &quot;seltensten&quot;, &quot;Palmen-Arten&quot;, &quot;des&quot;, &quot;Planeten.&quot;, &quot;Im&quot;, &quot;Botanischen&quot;, &quot;Garten&quot;, &quot;von&quot;, &quot;Berlin&quot;, &quot;keimt&quot;, &quot;nun&quot;, &quot;solch&quot;, &quot;eine&quot;, &quot;Nuss.&quot;, &quot;Das&quot;, &quot;erste&quot;, &quot;Mal&quot;, &quot;seit&quot;, &quot;80&quot;, &quot;Jahren&quot;, &quot;könnte&quot;, &quot;eine&quot;, &quot;Seychellen-Palme&quot;, &quot;in&quot;, &quot;der&quot;, &quot;Hauptstadt&quot;, &quot;wachsen.&quot;, &quot;Eine&quot;, &quot;Festgesellschaft&quot;, &quot;ist&quot;, &quot;deswegen&quot;, &quot;am&quot;, &quot;Donnerstag&quot;, &quot;nach&quot;, &quot;Berlin&quot;, &quot;ins&quot;, &quot;Tropenhaus&quot;, &quot;gekommen:&quot;, &quot;Der&quot;, &quot;Chef&quot;, &quot;des&quot;, &quot;Botanischen&quot;, &quot;Gartens,&quot;, &quot;ein&quot;, &quot;Diplomat&quot;, &quot;von&quot;, &quot;den&quot;, &quot;Seychellen,&quot;, &quot;Forscher,&quot;, &quot;Gärtner&quot;, &quot;und&quot;, &quot;Journalisten.&quot;, &quot;Es&quot;, &quot;werden&quot;, &quot;Getränke&quot;, &quot;und&quot;, &quot;Kekse&quot;, &quot;in&quot;, &quot;Palmenform&quot;, &quot;gereicht.&quot;, &quot;Die&quot;, &quot;kleine&quot;, &quot;Pflanze&quot;, &quot;im&quot;, &quot;Beet&quot;, &quot;nebenan&quot;, &quot;wirkt&quot;, &quot;trotz&quot;, &quot;des&quot;, &quot;ganzen&quot;, &quot;Wirbels&quot;, &quot;eher&quot;, &quot;unscheinbar.&quot;, &quot;\&quot;Dieser&quot;, &quot;Winter&quot;, &quot;in&quot;, &quot;Berlin&quot;, &quot;ist&quot;, &quot;besonders&quot;, &quot;grau,&quot;, &quot;nass&quot;, &quot;und&quot;, &quot;unerfreulich\&quot;,&quot;, &quot;sagt&quot;, &quot;der&quot;, &quot;Chef&quot;, &quot;des&quot;, &quot;Botanischen&quot;, &quot;Gartens&quot;, &quot;zur&quot;, &quot;Begrüßung.&quot;, &quot;Da&quot;, &quot;sei&quot;, &quot;es&quot;, &quot;doch&quot;, &quot;schön,&quot;, &quot;dass&quot;, &quot;man&quot;, &quot;mit&quot;, &quot;der&quot;, &quot;Palme&quot;, &quot;ein&quot;, &quot;Symbol&quot;, &quot;der&quot;, &quot;Tropen&quot;, &quot;feiern&quot;, &quot;könne.&quot;, &quot;Aber&quot;, &quot;warum&quot;, &quot;also&quot;, &quot;so&quot;, &quot;viel&quot;, &quot;Wirbel&quot;, &quot;um&quot;, &quot;etwas,&quot;, &quot;das&quot;, &quot;zumindest&quot;, &quot;aktuell&quot;, &quot;wie&quot;, &quot;eine&quot;, &quot;normale&quot;, &quot;Büropflanze&quot;, &quot;aussieht?&quot;, &quot;Die&quot;, &quot;Seychellen-Palme&quot;, &quot;ist&quot;, &quot;wie&quot;, &quot;der&quot;, &quot;Pandabär&quot;, &quot;des&quot;, &quot;Pflanzenreichs.&quot;, &quot;Sie&quot;, &quot;ist&quot;, &quot;das&quot;, &quot;Symbol&quot;, &quot;einer&quot;, &quot;gefährdeten&quot;, &quot;Art.&quot;, &quot;Die&quot;, &quot;Palme&quot;, &quot;ist&quot;, &quot;im&quot;, &quot;Dschungel&quot;, &quot;einer&quot;, &quot;kleinen&quot;, &quot;Seychellen-Insel&quot;, &quot;zu&quot;, &quot;Hause.&quot;, &quot;Einige&quot;, &quot;Bäume&quot;, &quot;wachsen&quot;, &quot;auch&quot;, &quot;auf&quot;, &quot;der&quot;, &quot;Nachbarinsel.&quot;, &quot;Das&quot;, &quot;war&quot;, &quot;auch&quot;, &quot;schon&quot;, &quot;alles.&quot;, &quot;Insgesamt&quot;, &quot;gibt&quot;, &quot;es&quot;, &quot;wohl&quot;, &quot;noch&quot;, &quot;um&quot;, &quot;die&quot;, &quot;8200&quot;, &quot;Pflanzen.&quot;, &quot;Die&quot;, &quot;riesigen&quot;, &quot;Bäume&quot;, &quot;haben&quot;, &quot;ein&quot;, &quot;ausgesprochen&quot;, &quot;kompliziertes&quot;, &quot;Liebesleben.&quot;, &quot;Und&quot;, &quot;das&quot;, &quot;ist&quot;, &quot;wohl&quot;, &quot;auch&quot;, &quot;der&quot;, &quot;Grund&quot;, &quot;dafür,&quot;, &quot;warum&quot;, &quot;sie&quot;, &quot;so&quot;, &quot;selten&quot;, &quot;sind.&quot;, &quot;Es&quot;, &quot;fängt&quot;, &quot;damit&quot;, &quot;an,&quot;, &quot;dass&quot;, &quot;die&quot;, &quot;riesigen&quot;, &quot;Samen&quot;, &quot;im&quot;, &quot;Wasser&quot;, &quot;untergehen.&quot;, &quot;Im&quot;, &quot;Lauf&quot;, &quot;der&quot;, &quot;Jahrhunderte&quot;, &quot;trieben&quot;, &quot;also&quot;, &quot;nur&quot;, &quot;hohle&quot;, &quot;Nüsse&quot;, &quot;über&quot;, &quot;das&quot;, &quot;Meer.&quot;, &quot;Der&quot;, &quot;Rest&quot;, &quot;ging&quot;, &quot;einfach&quot;, &quot;unter.&quot;, &quot;Außerdem&quot;, &quot;gibt&quot;, &quot;es&quot;, &quot;männliche&quot;, &quot;und&quot;, &quot;weibliche&quot;, &quot;Exemplare&quot;, &quot;des&quot;, &quot;Baums.&quot;, &quot;An&quot;, &quot;den&quot;, &quot;weiblichen&quot;, &quot;Pflanzenhängen&quot;, &quot;die&quot;, &quot;riesigen&quot;, &quot;Samen&quot;, &quot;hängen.&quot;, &quot;Es&quot;, &quot;dauert&quot;, &quot;sieben&quot;, &quot;Jahre,&quot;, &quot;bis&quot;, &quot;die&quot;, &quot;Nüsse&quot;, &quot;reif&quot;, &quot;sind.&quot;, &quot;Dann&quot;, &quot;fallen&quot;, &quot;sie&quot;, &quot;zu&quot;, &quot;Boden.&quot;, &quot;Mit&quot;, &quot;etwas&quot;, &quot;Glück&quot;, &quot;keimen&quot;, &quot;sie&quot;, &quot;dann&quot;, &quot;dort.&quot;];&amp;#10;&amp;#10;// --------------------------------&amp;#10;// SELECT RANDOM TEXTS&amp;#10;&amp;#10;// put the texts into nested lists, shuffle &amp;#10;// them, then get as many texts as you need for each &amp;#10;// part of the experiment&amp;#10;&amp;#10;// collect texts in lists&amp;#10;var short_texts = [t1_01, t1_02, t1_03, t1_04, t1_05, t1_06, t1_07, t1_08, t1_09];&amp;#10;var medium_texts = [t2_01, t2_02, t2_04, t2_05, t2_06, t2_07, t2_08, t2_10, t2_11, t2_13, t2_14, t2_15, t2_16];&amp;#10;var long_texts = [t2_03, t2_09, t2_12];&amp;#10;&amp;#10;// collect the text IDs in lists so I know which text was shown&amp;#10;var short_texts_nr = [&quot;1_01&quot;, &quot;1_02&quot;, &quot;1_03&quot;, &quot;1_04&quot;, &quot;1_05&quot;, &quot;1_06&quot;, &quot;1_07&quot;, &quot;1_08&quot;, &quot;1_09&quot;];&amp;#10;var medium_texts_nr =  [&quot;2_01&quot;, &quot;2_02&quot;, &quot;2_04&quot;, &quot;2_05&quot;, &quot;2_06&quot;, &quot;2_07&quot;, &quot;2_08&quot;, &quot;2_10&quot;, &quot;2_11&quot;, &quot;2_13&quot;, &quot;2_14&quot;, &quot;2_15&quot;, &quot;2_16&quot;];&amp;#10;var long_texts_nr = [&quot;t2_03&quot;, &quot;t2_09&quot;, &quot;t2_12&quot;];&amp;#10;&amp;#10;// shuffle lists:&amp;#10;// IMPORTANT: set seed!&amp;#10;// the seed should be random number over participants but the same within a participant&amp;#10;var seed = uniform.call(this, 0, 100);&amp;#10;&amp;#10;// shuffle texts &amp;#10;var array;&amp;#10;short_texts = random_shuffle_seeded.call(this, array = short_texts, seed = seed);&amp;#10;medium_texts = random_shuffle_seeded.call(this, array = medium_texts, seed = seed);&amp;#10;long_texts = random_shuffle_seeded.call(this, array = long_texts, seed = seed);&amp;#10;&amp;#10;// shuffle text numbers &amp;#10;short_texts_nr = random_shuffle_seeded.call(this, array = short_texts_nr, seed = seed);&amp;#10;medium_texts_nr = random_shuffle_seeded.call(this, array = medium_texts_nr, seed = seed);&amp;#10;long_texts_nr = random_shuffle_seeded.call(this, array = long_texts_nr, seed = seed);&amp;#10;&amp;#10;// get 1 of the long blocks for the reading baseline&amp;#10;var long_text = long_texts[0];&amp;#10;var long_text_number = long_texts_nr[0];&amp;#10;&amp;#10;// get 3 intermediate blocks for the nback main texts&amp;#10;var main_texts = medium_texts.slice(0, 3);&amp;#10;var main_texts_numbers = medium_texts_nr.slice(0, 3);&amp;#10;&amp;#10;// get 4 short texts for the training blocks of reading baseline and nback blocks&amp;#10;var training_texts = short_texts.slice(0, 4);&amp;#10;var training_texts_numbers = short_texts_nr.slice(0, 4);&amp;#10;&amp;#10;// --------------------------------&amp;#10;// INSTRUCTIONS&amp;#10;&amp;#10;// Set instructions for the reading baseline:&amp;#10;var notice_reading_bl_training = &quot;Reading Baseline Training: Please read this text!&quot;;&amp;#10;var notice_reading_bl_main = &quot;Reading Baseline Main: Please read this text!&quot;;&amp;#10;&amp;#10;// Set instructions for the main blocks:&amp;#10;var notice_1back_training_singletask = &quot;Single-Task Training: Please do 1-back now!&quot;;&amp;#10;var notice_2back_training_singletask = &quot;Single-Task Training: Please do 2-back now!&quot;;&amp;#10;var notice_3back_training_singletask = &quot;Single-Task Training: Please do 3-back now!&quot;;&amp;#10;&amp;#10;var notice_1back_training_dualtask = &quot;Dual-Task Training: Please do 1-back with reading task now!&quot;;&amp;#10;var notice_2back_training_dualtask = &quot;Dual-Task Training: Please do 2-back with reading task now!&quot;;&amp;#10;var notice_3back_training_dualtask = &quot;Dual-Task Training: Please do 3-back with reading task now!&quot;;&amp;#10;&amp;#10;var notice_1back_main = &quot;Main block follows! Please do 1-back with reading task now!&quot;;&amp;#10;var notice_2back_main = &quot;Main block follows! Please do 2-back with reading task now!&quot;;&amp;#10;var notice_3back_main = &quot;Main block follows! Please do 3-back with reading task now!&quot;;&amp;#10;&amp;#10;// put all instructions into separate lists&amp;#10;var notice_training_single_tasks = [notice_1back_training_singletask, notice_2back_training_singletask, notice_3back_training_singletask];&amp;#10;var notice_training_dual_tasks = [notice_1back_training_dualtask, notice_2back_training_dualtask, notice_3back_training_dualtask];&amp;#10;var notice_main_dual_tasks = [notice_1back_main, notice_2back_main, notice_3back_main];&amp;#10;&amp;#10;// --------------------------------&amp;#10;&amp;#10;// N-BACK COLOUR SETTINGS&amp;#10;&amp;#10;// set colours you'd like to use&amp;#10;// I think HEX codes should work, &amp;#10;// otherwise use RGB, HSV or one of the other options&amp;#10;&amp;#10;var colours = [&quot;red&quot;, &quot;blue&quot;, &quot;pink&quot;, &quot;violet&quot;];&amp;#10;&amp;#10;// --------------------------------&amp;#10;&amp;#10;// N-BACK TARGET SETTINGS&amp;#10;&amp;#10;// set absolute min. number of targets you'd like to have &amp;#10;// as well as max. and min. target to non-target &amp;#10;// ratio (i.e. how many targets do you need in %?)&amp;#10;&amp;#10;// I'll use different target numbers for short and long blocks &amp;#10;// because for short stories of about 250 words, 100 targets is&amp;#10;// a bit too much.&amp;#10;// --&gt; Maybe change this later!&amp;#10;&amp;#10;//var training_target_abs_min = 20;&amp;#10;//var training_targets_max = (3 / 10);&amp;#10;//var training_targets_min = (1 / 12);&amp;#10;&amp;#10;// for testing with dummy text:&amp;#10;var training_target_abs_min = 1;&amp;#10;var training_targets_max = (10 / 10);&amp;#10;var training_targets_min = (1 / 100);&amp;#10;&amp;#10;// for the main blocks use settings &amp;#10;// as specified in the grant application:&amp;#10;//var main_target_abs_min = 100;&amp;#10;//var main_targets_max = (4 / 10);&amp;#10;//var main_targets_min = (2 / 12);&amp;#10;&amp;#10;// for testing with dummy text:&amp;#10;var main_target_abs_min = 1;&amp;#10;var main_targets_max = (10 / 10);&amp;#10;var main_targets_min = (1 / 100);&amp;#10;&amp;#10;// --------------------------------&amp;#10;&amp;#10;// BLOCK ORDER SETTINGS&amp;#10;&amp;#10;// for reading baseline&amp;#10;var block_order = [&quot;n_stask_t&quot;, &quot;n_stask_m&quot;];&amp;#10;// for 1-back&amp;#10;var block_1back = [&quot;1_stask_t&quot;, &quot;1_dtask_t&quot;, &quot;1_dtask_m&quot;]&amp;#10;// for 2-back&amp;#10;var block_2back = [&quot;2_stask_t&quot;, &quot;2_dtask_t&quot;, &quot;2_dtask_m&quot;]&amp;#10;// for 3-back&amp;#10;var block_3back = [&quot;3_stask_t&quot;, &quot;3_dtask_t&quot;, &quot;3_dtask_m&quot;]&amp;#10;&amp;#10;// put everything into nested list, use random seed from before&amp;#10;var nback_main_blocks = random_shuffle_seeded.call(this, array = [block_1back, block_2back, block_3back], seed = seed);&amp;#10;&amp;#10;// flatten nested list&amp;#10;nback_main_blocks = [].concat.apply([], nback_main_blocks);&amp;#10;&amp;#10;// put in nested list with reading baseline blocks at pole position&amp;#10;block_order = [block_order, nback_main_blocks];&amp;#10;&amp;#10;// flatten again&amp;#10;var block_order = [].concat.apply([], block_order);&amp;#10;console.log(block_order);&amp;#10;&amp;#10;// --------------------------------&amp;#10;// GET COLOURS &amp; TARGETS&amp;#10;&amp;#10;// loop short, intermediate and long texts,&amp;#10;// set colours and compute targets&amp;#10;&amp;#10;// collect all conditions, block numbers, block conditions and colours in lists&amp;#10;var all_colours = [];&amp;#10;var all_nback_conditions = [];&amp;#10;var all_block_nr = [];&amp;#10;var all_block_kind = [];&amp;#10;var all_task_kind = [];&amp;#10;var all_targets = [];&amp;#10;var all_words = [];&amp;#10;var all_text_numbers = [];&amp;#10;&amp;#10;// text counters so we can &quot;loop&quot; them too&amp;#10;var training_text_counter = 0;&amp;#10;var main_text_counter = 0;&amp;#10;&amp;#10;// loop all blocks from block_order&amp;#10;&amp;#10;for (var curr_block_nr, _pj_c = 0, _pj_a = range.call(this, 0, block_order.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    curr_block_nr = _pj_a[_pj_c];&amp;#10;    console.log(curr_block_nr);&amp;#10;    // first, get name of the block&amp;#10;    var curr_block_name = block_order[curr_block_nr];&amp;#10;    console.log(curr_block_name);&amp;#10;    // get n-back level and kind of block from name:&amp;#10;    &amp;#10;    // first the n-back level (&quot;0&quot;,&quot;1&quot;,&quot;2&quot; or &quot;3&quot;):&amp;#10;    var curr_block_nback_level = curr_block_name[0];&amp;#10;    &amp;#10;    // kind of the block (&quot;m&quot; for main, &quot;t&quot; for training)&amp;#10;    var curr_block_kind = curr_block_name.slice((- 1))[0];&amp;#10;    &amp;#10;    // kind of the task (&quot;stask&quot; for single-task, &quot;dtask&quot; for dualtask)&amp;#10;    var curr_block_task = curr_block_name.slice(2, (- 2));&amp;#10;    // get text for the current block&amp;#10;    // --&gt;  short texts for training, &quot;normal&quot; main blocks should be &amp;#10;    //      of intermediate length and the reading baseline &amp;#10;    //      text should be one of the long ones&amp;#10;    &amp;#10;    // if it's a dual-task training block (aka one where we have text as stimuli)...&amp;#10;    if (((curr_block_kind === &quot;t&quot;) &amp;&amp; (curr_block_task === &quot;dtask&quot;))) {&amp;#10;        &amp;#10;        // get current training text&amp;#10;        var curr_text = training_texts[training_text_counter];&amp;#10;        var curr_text_nr = training_texts_numbers[training_text_counter];&amp;#10;        // go to next training text&amp;#10;        training_text_counter = (training_text_counter + 1);&amp;#10;        &amp;#10;    // else if it's a single-task (= stask) training block &amp;#10;    // (aka one where we DON'T have text as stimuli)...&amp;#10;    } else {&amp;#10;        if (((curr_block_kind === &quot;t&quot;) &amp;&amp; (curr_block_task === &quot;stask&quot;))) {&amp;#10;            &amp;#10;            // make a list of 100 &quot;empty&quot; words (we'll use shapes instead, &amp;#10;            // but we need the words to get the nback colours later) &amp;#10;            curr_text = Array(100).fill(&quot; &quot;)&amp;#10;            // We don't have a text so we also don't have a number. &amp;#10;            // Use 99 instead.&amp;#10;            curr_text_nr = 99;&amp;#10;            &amp;#10;        // if it's the main block for the reading baseline &amp;#10;        // (n-back level = n for no-back)&amp;#10;        } else {&amp;#10;            if (((curr_block_kind === &quot;m&quot;) &amp;&amp; (curr_block_nback_level === &quot;n&quot;))) {&amp;#10;                // get the long text&amp;#10;                curr_text = long_text;&amp;#10;                curr_text_nr = long_text_number;&amp;#10;            } else {&amp;#10;                // if it's a regular main block with n-back = 1, 2 or 3:&amp;#10;                if (((curr_block_kind === &quot;m&quot;) &amp;&amp; (curr_block_nback_level !== &quot;n&quot;))) {&amp;#10;                    //  get intermediate text&amp;#10;                    curr_text = main_texts[main_text_counter];&amp;#10;                    curr_text_nr = main_texts_numbers[main_text_counter];&amp;#10;                    // go to next regular main text&amp;#10;                    main_text_counter = (main_text_counter + 1);&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;&amp;#10;    // get colours &amp; targets for the current text!&amp;#10;&amp;#10;    // special case: no-back (reading baseline), &amp;#10;    // where we don't have an n-back task!&amp;#10;    if ((curr_block_nback_level === &quot;n&quot;)) {&amp;#10;        // use 1-back as n-back level because I didn't implement a no-back option&amp;#10;        var nback_l = 1;&amp;#10;    // for the other blocks, typecast the n-back level so it's numeric&amp;#10;    } else {&amp;#10;        nback_l = Number.parseInt(curr_block_nback_level);&amp;#10;    }&amp;#10;&amp;#10;    // another special case: if it's a training block,&amp;#10;    // we have to adjust the target ratios a bit&amp;#10;    &amp;#10;    if ((curr_block_kind === &quot;t&quot;)) {&amp;#10;        var curr_colours, nback_level, colour_codes, story, target_abs_min, targets_max, targets_min; &amp;#10;        curr_colours = create_nback_stimlist.call(this, nback_level = nback_l, colour_codes = colours, story = curr_text, target_abs_min = training_target_abs_min, targets_max = training_targets_max, targets_min = training_targets_min);&amp;#10;    } else {&amp;#10;        curr_colours = create_nback_stimlist.call(this, nback_level = nback_l, colour_codes = colours, story = curr_text, target_abs_min = main_target_abs_min, targets_max = main_targets_max, targets_min = main_targets_min);&amp;#10;    }&amp;#10;&amp;#10;    // compute targets:&amp;#10;    // if it's a no-back (aka reading baseline w/o n-back), &amp;#10;    // there are no targets, so set them all to False:&amp;#10;    if ((curr_block_nback_level === &quot;n&quot;)) {&amp;#10;        all_targets = ([false] * curr_colours.length);&amp;#10;    // if we have an n-back task, though, we can compute &amp;#10;    // which colour is a target and save in list. &amp;#10;    // True = target, False = no target.&amp;#10;    } else {&amp;#10;        // count targets&amp;#10;        // for 1-back, the first colour can't be a target, for 2-back the first 2 cant be targets &amp; so on, &amp;#10;        // so create a list of length = curr_nback_level containing the first non-targets:&amp;#10;        var targets = ([false] * nback_level);&amp;#10;        all_targets = extend.call(this, all_targets, targets);&amp;#10;        // loop colours, don't start at idx = 0, but start with the &amp;#10;        // position that could potentially be the first target&amp;#10;        for (var colour_idx, _pj_f = 0, _pj_d = util.range(nback_level, curr_colours.length), _pj_e = _pj_d.length; (_pj_f &lt; _pj_e); _pj_f += 1) {&amp;#10;            colour_idx = _pj_d[_pj_f];&amp;#10;            // if the current colour matches the one n trials before, &amp;#10;            // save True (bc it's a target)&amp;#10;            if ((curr_colours[colour_idx] === curr_colours[(colour_idx - nback_level)])) {&amp;#10;                all_targets = extend.call(this, all_targets, [true]);&amp;#10;            // if not, save as non-target (aka as False)&amp;#10;            } else {&amp;#10;                all_targets = extend.call(this, all_targets, [false]);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;&amp;#10;    console.log(curr_text);&amp;#10;&amp;#10;    // Put it all together!&amp;#10;    // save info on the condition, the block &amp; the text&amp;#10;    &amp;#10;    var nback_conditions = ([curr_block_nback_level] * curr_colours.length);&amp;#10;    var block_nr = ([curr_block_nr] * curr_colours.length);&amp;#10;    var block_kind = ([curr_block_kind] * curr_colours.length);&amp;#10;    var task_kind = ([curr_block_task] * curr_colours.length);&amp;#10;    var text_numbers = ([curr_text_nr] * curr_colours.length);&amp;#10;    &amp;#10;    // save in bigger lists with info of all blocks&amp;#10;&amp;#10;    all_nback_conditions = extend.call(this, all_nback_conditions, nback_conditions);&amp;#10;    all_block_nr = extend.call(this, all_block_nr, block_nr);&amp;#10;    all_block_kind = extend.call(this, all_block_kind, block_kind);&amp;#10;    all_task_kind = extend.call(this, all_task_kind, task_kind);&amp;#10;    all_colours = extend.call(this, all_colours, curr_colours);&amp;#10;    all_words = extend.call(this, all_words, curr_text); &amp;#10;    all_text_numbers = extend.call(this, all_text_numbers, text_numbers);&amp;#10;    &amp;#10;    // add an end tag so we know where each block ends&amp;#10;&amp;#10;    all_colours = extend.call(this, all_colours, [&quot;!END!&quot;]);&amp;#10;    all_nback_conditions = extend.call(this, all_nback_conditions, [&quot;!END!&quot;]);&amp;#10;    all_block_nr = extend.call(this, all_block_nr, [&quot;!END!&quot;]);&amp;#10;    all_block_kind = extend.call(this, all_block_kind, [&quot;!END!&quot;]);&amp;#10;    all_targets = extend.call(this, all_targets, [&quot;!END!&quot;]);&amp;#10;    all_words = extend.call(this, all_words, [&quot;!END!&quot;]);&amp;#10;    all_text_numbers = extend.call(this, all_text_numbers, [&quot;!END!&quot;]);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;&amp;#10;// add one last end tag, but this time it's &amp;#10;// called &quot;!END_ALL!&quot; as a sign to end the whole main part of the experiment&amp;#10;all_colours = extend.call(this, all_colours, [&quot;!END_ALL!&quot;]);&amp;#10;all_nback_conditions = extend.call(this, all_nback_conditions, [&quot;!END_ALL!&quot;]);&amp;#10;all_block_nr = extend.call(this, all_block_nr, [&quot;!END_ALL!&quot;]);&amp;#10;all_block_kind = extend.call(this, all_block_kind, [&quot;!END_ALL!&quot;]);&amp;#10;all_targets = extend.call(this, all_targets, [&quot;!END_ALL!&quot;]);&amp;#10;all_words = extend.call(this, all_words, [&quot;!END_ALL!&quot;]);&amp;#10;all_text_numbers = extend.call(this, all_text_numbers, [&quot;!END_ALL!&quot;]);&amp;#10;&amp;#10;// ------------------------------------------&amp;#10;&amp;#10;// init trial counter for the whole experiment&amp;#10;var exp_trial_counter = 0;&amp;#10;// init block counter for the whole experiment&amp;#10;var exp_block_counter = 0;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="set_stimuli" valType="code"/>
      </CodeComponent>
      <TextComponent name="empty_placeholder">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="num"/>
        <Param name="name" updates="None" val="empty_placeholder" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
    </Routine>
    <Routine name="end">
      <CodeComponent name="code_end">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="### END MESSAGE:&amp;#10;# keep background ivory&amp;#10;win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;win.flip()&amp;#10;&amp;#10;### Show message&amp;#10;# set text&amp;#10;instr_text = &quot;Geschafft, das Experiment ist zu Ende!\n\nBitte sagen Sie der Versuchsleitung Bescheid.\n\n\n(Bitte Leertaste drücken um Daten zu sichern!)&quot; &amp;#10;&amp;#10;# create text box&amp;#10;instr_text_stim = visual.TextStim(win, &amp;#10;                                  text = instr_text, &amp;#10;                                  height = 0.5, # font height: 5° visual angle&amp;#10;                                  font = &quot;Bookman Old Style&quot;,&amp;#10;                                  pos = (0, 0),&amp;#10;                                  color = &quot;black&quot;)&amp;#10;&amp;#10;# display the text on screen until Space is pressed&amp;#10;while True:&amp;#10;    # keep background ivory&amp;#10;    win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;    instr_text_stim.draw()&amp;#10;    win.flip()&amp;#10;    # end screen if participant presses space&amp;#10;    if 'space' in event.getKeys():&amp;#10;        break &amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_end" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="pred_tendency">
      <CodeComponent name="code_test_sound">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="sound_stim;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="### Settings for Prediction Tendency Task:&amp;#10;&amp;#10;# for the sounds:&amp;#10;tone_volume = 1 # use full volume and make sure the system volume is&amp;#10;                # set to a value where the tones are played with 40dB&amp;#10;tones = [440, 587, 782, 1043]  # Pure tone frequencies in Hz&amp;#10;tone_duration = 0.1  # Duration of each pure tone in seconds (each lasted 100 ms)&amp;#10;tone_rate = 3  # Rate of pure tone presentation in Hz&amp;#10;audio_sample_freq = 44100 # 44100 Hz --&gt; audio sampling rate at the lab (according to Frauke)&amp;#10;tones_iti = 1/3&amp;#10;tone_fade = 5e-3&amp;#10;&amp;#10;&amp;#10;# for the paradigm:&amp;#10;block_trials = 1500  # Number of trials per entropy condition&amp;#10;trigger_ordered = 1&amp;#10;trigger_random = 2&amp;#10;&amp;#10;&amp;#10;# -------------------------------------------&amp;#10;&amp;#10;### Prediction Tendency Task:&amp;#10;&amp;#10;### Prepare sound objects for all 4 tones:&amp;#10;tones_objects = {}&amp;#10;for tone_idx, curr_freq in enumerate(tones):&amp;#10;    print(&quot;preparing sound object for tone&quot;, curr_freq, &quot;- tone index:&quot;, tone_idx)&amp;#10;    &amp;#10;    # build a time array: you need the sound duration and the right sampling frequency for your device&amp;#10;    # 1 divided by the sampling rate = duration of a single sample in sec&amp;#10;    tone_sample_len = 1/audio_sample_freq&amp;#10;    t = np.arange(0, tone_duration, tone_sample_len)&amp;#10;&amp;#10;    # generate sine wave:&amp;#10;    sine_wave = np.sin(2*np.pi*curr_freq*t)&amp;#10;&amp;#10;    # plot the sine wave&amp;#10;    #plt.plot(t, sine_wave)&amp;#10;    #plt.xlabel('Time (s)')&amp;#10;    #plt.ylabel('Amplitude')&amp;#10;    #plt.show()&amp;#10;&amp;#10;    # Apply cosine ramp to &quot;smoothen&quot; the edges of the sound a bit &amp;#10;    # (I'm not an audio expert as you can tell)&amp;#10;    # We basically gradually turn up the sound, play it for a while,&amp;#10;    # and then decrease the volume again so it doesn't make annoying &amp;#10;    # clicking noises when it's played.&amp;#10;&amp;#10;    # apply cosine ramp:&amp;#10;    # check how many samples we have to use for the fade in/out:&amp;#10;    fade_samples = int(tone_fade * audio_sample_freq)&amp;#10;&amp;#10;    # if there are enough, but not too many fade samples,&amp;#10;    # apply cosine ramp to signal&amp;#10;    if fade_samples &gt; 0 and fade_samples &lt; len(sine_wave):&amp;#10;      ramp = np.cos(np.linspace(0, np.pi / 2, fade_samples))&amp;#10;      sine_wave[:fade_samples] *= ramp[::-1]&amp;#10;      sine_wave[-fade_samples:] *= ramp&amp;#10;&amp;#10;    # plot the modified sine wave again&amp;#10;    #plt.plot(t, sine_wave)&amp;#10;    #plt.xlabel('Time (s)')&amp;#10;    #plt.ylabel('Amplitude')&amp;#10;    #plt.show()&amp;#10;&amp;#10;    print(&quot;----------------------&quot;)&amp;#10;&amp;#10;    # generate sound object for the sound file we built&amp;#10;    sound = Sound(value = sine_wave,&amp;#10;                  secs = tone_duration, # duration of sound in seconds&amp;#10;                  sampleRate = audio_sample_freq,&amp;#10;                  name = f&quot;tone{tone_idx + 1}&quot;, # create a name for the sound for logging&amp;#10;                  hamming = False, # don't apply filter, we did this before&amp;#10;                  volume = tone_volume,&amp;#10;                  loops = 0) # don't repeat sound, play only once&amp;#10;    &amp;#10;    # add the sound to the dict&amp;#10;    tones_objects[f&quot;tone_{curr_freq}&quot;] = sound&amp;#10;&amp;#10;print(&quot;finished preparing sound objects for prediction tendency task&quot;)&amp;#10;&amp;#10;# now you can access &amp; play each sound by its name, like this:&amp;#10;#now = ptb.GetSecs()&amp;#10;#curr_tone = tones_objects[&quot;tone_440&quot;]&amp;#10;#curr_tone.play(when = now)  # play the sound immediately&amp;#10;# send a trigger&amp;#10;#core.wait(0.1) # wait 100 ms until the audio has finished&amp;#10;#curr_tone.stop() # close the sound&amp;#10;&amp;#10;# Get the trial sequences for both entropy conditions &amp;#10;# (both for 1500 tones aka trials)&amp;#10;&amp;#10;# randomly choose 2 sequences, 1 ordered &amp; 1 random sequence: &amp;#10;ordered_row = df_ordered_tone_seqs.sample(n = 1)&amp;#10;random_row = df_random_tone_seqs.sample(n = 1)&amp;#10;# access the values in the random rows, exclude the first value (it's the index of the row): &amp;#10;ordered_sequence = ordered_row.values[0][1:]&amp;#10;random_sequence = random_row.values[0][1:]&amp;#10;&amp;#10;# break them into chunks of about 500 trials &amp;#10;# (aka 3 blocks per condition aka 6 blocks in total)&amp;#10;# We have 1505 trials in each condition, so 2 of the  blocks will have 505 trials.&amp;#10;ordered_sub1 = ordered_sequence[:500] # 0 - 499&amp;#10;ordered_sub2 = ordered_sequence[500:1000] # 500 - 999&amp;#10;ordered_sub3 = ordered_sequence[1000:] # 1000 - end&amp;#10;&amp;#10;random_sub1 = random_sequence[:500] # 0 - 499&amp;#10;random_sub2 = random_sequence[500:1000] # 500 - 999&amp;#10;random_sub3 = random_sequence[1000:] # 1000 - end&amp;#10;&amp;#10;# build trigger names for each condition (&quot;random&quot; and &quot;ordered&quot;)&amp;#10;ordered_trig1 = [&quot;ordered&quot;]*len(ordered_sub1)&amp;#10;ordered_trig2 = [&quot;ordered&quot;]*len(ordered_sub2)&amp;#10;ordered_trig3 = [&quot;ordered&quot;]*len(ordered_sub3)&amp;#10;random_trig1 = [&quot;random&quot;]*len(random_sub1)&amp;#10;random_trig2 = [&quot;random&quot;]*len(random_sub2)&amp;#10;random_trig3 = [&quot;random&quot;]*len(random_sub3)&amp;#10;&amp;#10;# put the smaller lists into a list &amp; shuffle them&amp;#10;task_order_stimuli = [ordered_sub1, ordered_sub2, ordered_sub3, random_sub1, random_sub2, random_sub3]&amp;#10;task_order_trigger = [ordered_trig1, ordered_trig2, ordered_trig3, random_trig1, random_trig2, random_trig3]&amp;#10;&amp;#10;# shuffle both in the exact same way using the same seed:&amp;#10;pred_tend_seed = random.randint(1, 100)&amp;#10;random.seed(pred_tend_seed)&amp;#10;&amp;#10;random.shuffle(task_order_stimuli)&amp;#10;random.shuffle(task_order_trigger)&amp;#10;&amp;#10;# 3010 trials are quite a lot without a break, so include one after the first 3 blocks:&amp;#10;# find out after how many trials the 3rd block ends:&amp;#10;break_idx = len(task_order_stimuli[0]) + len(task_order_stimuli[1]) + len(task_order_stimuli[2])&amp;#10;#print(break_idx) # if we reach this index, include a small break&amp;#10;&amp;#10;&amp;#10;# flatten the lists so they're not nested anymore:&amp;#10;task_order_stimuli = np.concatenate(task_order_stimuli).ravel().tolist()&amp;#10;task_order_trigger = flatten_list(task_order_trigger)&amp;#10;&amp;#10;&amp;#10;# choose which of the conditions to play first:&amp;#10;choice = random.choice([&quot;ordered&quot;, &quot;random&quot;])&amp;#10;&amp;#10;&amp;#10;### START PLAYING TASK&amp;#10;&amp;#10;# set instruction text&amp;#10;instr_text = &quot;Im folgenden Block wird Ihnen eine längere Tonsequenz vorgespielt (Dauer ca. 8 min).\n\nSie können nebenbei den Film auf dem Laptop schauen, hören Sie aber bitte trotzdem den Tönen zu. \n\n\nDrücken Sie die Leertaste, wenn Sie beginnen möchten.&quot;&amp;#10;&amp;#10;# create text box&amp;#10;instr_text_stim = visual.TextStim(win, &amp;#10;                                  text = instr_text, &amp;#10;                                  height = 0.5, &amp;#10;                                  pos = (0, 0),&amp;#10;                                  font = &quot;Bookman Old Style&quot;,&amp;#10;                                  color = 'black')&amp;#10;&amp;#10;# display the text on screen &amp; wait for keypress:&amp;#10;while True:&amp;#10;    instr_text_stim.draw()&amp;#10;    win.flip()&amp;#10;    &amp;#10;    # if space bar is pressed, start second block:&amp;#10;    if event.getKeys(['space']):&amp;#10;        # remove words from screen&amp;#10;        win.flip()&amp;#10;        break # break while loop&amp;#10;&amp;#10;&amp;#10;# loop over list first_sequence with all frequencies:&amp;#10;for tone_idx, curr_freq in enumerate(task_order_stimuli):&amp;#10;    &amp;#10;    ### BREAK:&amp;#10;    # if we reached the first trial after the 3rd block, include break:&amp;#10;    if tone_idx == break_idx:&amp;#10;        &amp;#10;        # set instruction text&amp;#10;        instr_text = &quot;Sie können nun eine kurze Pause machen. Drücken Sie die Leertaste, wenn Sie den nächsten Block starten möchten. Bitte hören Sie auch im nächsten Block wieder nur zu.&quot;&amp;#10;&amp;#10;        # create text box&amp;#10;        instr_text_stim = visual.TextStim(win, &amp;#10;                                          text = instr_text, &amp;#10;                                          height = 0.5, &amp;#10;                                          pos = (0, 0),&amp;#10;                                          font = &quot;Bookman Old Style&quot;,&amp;#10;                                          color = 'black')&amp;#10;                                          &amp;#10;        # display the text on screen &amp; wait for keypress:&amp;#10;        while True:&amp;#10;            instr_text_stim.draw()&amp;#10;            win.flip()&amp;#10;            &amp;#10;            # if space bar is pressed, start second block:&amp;#10;            if event.getKeys(['space']):&amp;#10;                # remove words from screen&amp;#10;                win.flip()&amp;#10;                break # break while loop&amp;#10;&amp;#10;        print(&quot;starting second prediction tendency task block&quot;)&amp;#10;        fixation_cross.setAutoDraw(True) # start drawing fixation cross on screen again&amp;#10;        ptb.WaitSecs(0.5) # wait 500 ms before playing the first tone of the next sequence&amp;#10;&amp;#10;    ### RUN TRIAL:&amp;#10;    print(&quot;current frequency:&quot;, curr_freq, &quot;tone index:&quot;, tone_idx) &amp;#10;    now = ptb.GetSecs() # get current time stamp&amp;#10;    print(&quot;tone onset:&quot;, now)&amp;#10;    # get sound object for current frequency tone&amp;#10;    curr_tone = tones_objects[f&quot;tone_{curr_freq}&quot;]&amp;#10;    curr_tone.play(when = now)  # play the sound immediately&amp;#10;    # send tone onset trigger to LSL stream&amp;#10;    marker_text = &quot;pred_tendency_&quot;+ str(task_order_trigger[tone_idx]) + &quot;_&quot; + str(curr_freq) + &quot;_trial_&quot; + str(tone_idx)&amp;#10;    print(marker_text)&amp;#10;    out_marker.push_sample([&quot;STIM_ONSET_&quot; + marker_text])&amp;#10;&amp;#10;    ptb.WaitSecs(0.1) # wait 100 ms until the audio has finished&amp;#10;    curr_tone.stop() # close the sound&amp;#10;    # send tone offset trigger to LSL stream&amp;#10;    out_marker.push_sample([&quot;STIM_OFFSET_&quot; + marker_text])&amp;#10;    &amp;#10;    # 1 3Hz cycle = 333.33 ms, so continue waiting until 333.33 ms have &amp;#10;    # passed since starting the tone before playing the next tone&amp;#10;    time_passed = ptb.GetSecs() - now&amp;#10;    print(&quot;time passed since start of tone:&quot;, time_passed)&amp;#10;    core.wait(0.33333 - time_passed)&amp;#10;    &amp;#10;    ### save information on current trial in output csv&amp;#10;    # (even if we don't record any behavioral data here)&amp;#10;    thisExp.addData('trial_nr', tone_idx)&amp;#10;    thisExp.addData('block_nr', exp_block_counter)&amp;#10;    thisExp.addData('block_name', &quot;prediction_tendency_task&quot;)&amp;#10;    thisExp.addData('block_kind', task_order_trigger[tone_idx])&amp;#10;    thisExp.addData('frequency', curr_freq)&amp;#10;&amp;#10;    # start a new row in the csv&amp;#10;    thisExp.nextEntry()&amp;#10;        &amp;#10;    # end this loop after 10 tones if testing mode is activated&amp;#10;    if expInfo['testing_mode'] == &quot;yes&quot;:&amp;#10;        if tone_idx == 10:&amp;#10;            break&amp;#10;    print(&quot;------ next tone ------ &quot;)&amp;#10;&amp;#10;win.flip() # clear window (although it should be cleared)&amp;#10;&amp;#10;# If everything's finished, go to next routine&amp;#10;print(&quot; --- ENDING PREDICTION TENDENCY TASK NOW --- &quot;)&amp;#10;continueRoutine = False&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_test_sound" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="test">
      <CodeComponent name="test1">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="### VISUAL TASK TRAINING &amp; MAIN BLOCK&amp;#10;&amp;#10;# choose 1 target colour &amp; generate 0-back colour list&amp;#10;target_colour = random.choice(colours)&amp;#10;&amp;#10;# keep background ivory&amp;#10;win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;win.flip()&amp;#10;&amp;#10;### Show instructions&amp;#10;&amp;#10;# set texts&amp;#10;instr_text1 = &quot;Im folgenden Block werden die Worte von allein abgespielt. \n\nSie müssen also diesmal nicht die Leertaste drücken, lesen Sie aber bitte trotzdem den Text mit. \n\nBitte drücken Sie immer die Taste 'C', wenn Sie ein Wort in der folgenden Farbe sehen:&quot; &amp;#10;instr_text2 = &quot;Sie können die Aufgabe kurz üben, bevor der Hauptblock startet.\n\n\nDrücken Sie die Leertaste, wenn Sie bereit sind, den Übungsblock zu starten!&quot;&amp;#10;&amp;#10;# create text boxes&amp;#10;instr_text_stim1 = visual.TextStim(win, &amp;#10;                                  text = instr_text1, &amp;#10;                                  height = 0.5, # font height: 5° visual angle&amp;#10;                                  font = &quot;Bookman Old Style&quot;,&amp;#10;                                  pos = (0, 4), # move instructions a bit up&amp;#10;                                  color = &quot;black&quot;)&amp;#10;instr_text_stim2 = visual.TextStim(win, &amp;#10;                                  text = instr_text2, &amp;#10;                                  height = 0.5, # font height: 5° visual angle&amp;#10;                                  font = &quot;Bookman Old Style&quot;,&amp;#10;                                  pos = (0, -5), # move instructions a bit up&amp;#10;                                  color = &quot;black&quot;)&amp;#10;# create &quot;empty&quot; circle as stimulus&amp;#10;instr_colour_circle_stim = visual.Circle(win = win,&amp;#10;                                         radius = 1, # radius = 1° visual angle&amp;#10;                                         # colorSpace = &quot;hex&quot;,&amp;#10;                                         pos = (0,0)) # move circle slightly down&amp;#10;&amp;#10;# set current target colour as colour of circle:&amp;#10;instr_colour_circle_stim.fillColor = target_colour&amp;#10;&amp;#10;# display the text &amp; the circle on screen until Space is pressed&amp;#10;while True:&amp;#10;    # keep background ivory&amp;#10;    win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;    instr_text_stim1.draw()&amp;#10;    instr_text_stim2.draw()&amp;#10;    instr_colour_circle_stim.draw()&amp;#10;    win.flip()&amp;#10;    # end screen if participant presses space&amp;#10;    if 'space' in event.getKeys():&amp;#10;        break &amp;#10;&amp;#10;&amp;#10;### START VISUAL TASK TRAINING&amp;#10;&amp;#10;# change background colour: &amp;#10;# transition from ivory &amp;#10;# to medium grey &amp;#10;change_bg_colour(window = win, &amp;#10;                 start_rgb = light_bg_col,&amp;#10;                 end_rgb = dark_bg_col, &amp;#10;                 seconds = 2)&amp;#10;# Wait for a brief period of time so bg is set&amp;#10;core.wait(0.8)&amp;#10;# keep background grey&amp;#10;win.setColor(dark_bg_col, colorSpace='rgb')&amp;#10;win.flip()&amp;#10;&amp;#10;# clear buffer of all previously recorded key events:&amp;#10;event.clearEvents()&amp;#10;&amp;#10;&amp;#10;# prepare stimuli:&amp;#10;curr_text_training = ['Einen', 'Augenblick', 'herrschte', 'totale', 'Stille.', 'Man', 'hörte', 'plötzlich', 'die', 'Wellen', 'rauschen', 'und', 'das', 'Radio', 'aus', 'dem', 'Salon', 'herüberjazzen,', 'man', 'vernahm', 'jeden', 'Schritt', 'vom', 'Promenadendeck', 'und', 'das', 'leise,', 'feine', 'Sausen', 'des', 'Winds,', 'der', 'durch', 'die', 'Fugen', 'der', 'Fenster', 'fuhr.', 'Keiner', 'von', 'uns', 'atmete,', 'es', 'war', 'zu', 'plötzlich', 'gekommen', 'und', 'wir', 'alle', 'noch', 'geradezu', 'erschrocken', 'über', 'das', 'Unwahrscheinliche,', 'daß', 'dieser', 'Unbekannte', 'dem', 'Weltmeister', 'in', 'einer', 'schon', 'halb', 'verlorenen', 'Partie', 'seinen', 'Willen', 'aufgezwungen', 'haben', 'sollte.', 'McConnor', 'lehnte', 'sich', 'mit', 'einem', 'Ruck', 'zurück,', 'der', 'zurückgehaltene', 'Atem', 'fuhr', 'ihm', 'hörbar', 'in', 'einem', 'beglückten', &quot;\&quot;Ah!\&quot;&quot;, 'von', 'den', 'Lippen.', 'Ich', 'wiederum', 'beobachtete', 'Czentovic.', 'Schon', 'bei', 'den', 'letzten', 'Zügen', 'hatte', 'mir', 'geschienen,', 'als', 'ob', 'er', 'blässer', 'geworden', 'sei.', 'Aber', 'er','verstand', 'sich', 'gut', 'zusammenzuhalten.', 'Er', 'verharrte', 'in', 'seiner', 'scheinbar', 'gleichmütigen', 'Starre', 'und', 'fragte', 'nur', 'in', 'lässigster', 'Weise,', 'während', 'er', 'die', 'Figuren', 'mit', 'ruhiger', 'Hand', 'vom', 'Brette', 'schob:', &quot;\&quot;Wünschen&quot;, 'die', 'Herren', 'noch', 'eine', 'dritte', 'Partie?\&quot;']&amp;#10;&amp;#10;# compute average reading speed by dividing the &amp;#10;# let's say we use 40 ms / letter, that would be 200 ms for a short word like &quot;Einen&quot;, so still quite a lot:&amp;#10;curr_durations_training = [len(word) * 40 / 1000 for word in curr_text_training] # in ms&amp;#10;# print(curr_durations_training)&amp;#10;&amp;#10;# generate random colour list:&amp;#10;curr_colours_training = create_0back_stimlist(target_colour = target_colour, nr_targets = 25, colour_codes = colours, nr_words = len(curr_text_training))&amp;#10;&amp;#10;# save position of targets as True/False list:&amp;#10;curr_targets_training = [colour == target_colour for colour in curr_colours_training]&amp;#10;&amp;#10;&amp;#10;### prepare flicker&amp;#10;# hint: flicker_freq and frame_rate are set in the settings &amp;#10;# code component at the beginning of the experiment.&amp;#10;&amp;#10;# create flicker phase variable - start at phase = 0&amp;#10;flicker_phase = 0&amp;#10;# we also need the start time (let's set it as current time &amp;#10;# at this point in the script):&amp;#10;start_time = core.getTime()&amp;#10;&amp;#10;### start block loop&amp;#10;&amp;#10;# create empty text stimulus &amp;#10;stim = visual.TextStim(win = win, &amp;#10;                       text = &quot; &quot;, &amp;#10;                       pos = (0,0), # center stimulus&amp;#10;                       font = &quot;Times New Roman&quot;,&amp;#10;                       height = 1) # font height = 1° visual angle&amp;#10;&amp;#10;# create grey rectangle that masks the text if I set opacity to 1&amp;#10;# --&gt; changing the text opacity directly isn't working: https://discourse.psychopy.org/t/opacity-of-text-stimuli-is-not-updating/11152/7    &amp;#10;stim_mask = visual.Rect(win = win,&amp;#10;                        width = 20, # width = 20° visual angle&amp;#10;                        height = 3, # height = 3° visual angle &amp;#10;                        pos = (0,0), # center stimulus &amp;#10;                        opacity = 0, # set opacity to 0 for a start&amp;#10;                        fillColor = dark_bg_col,&amp;#10;                        colorSpace = &quot;rgb&quot;)&amp;#10;&amp;#10;stim.draw()&amp;#10;stim_mask.draw()&amp;#10;win.flip()&amp;#10;&amp;#10;&amp;#10;# loop words in current text&amp;#10;for trial_idx, curr_word in enumerate(curr_text_training):&amp;#10;    print(&quot;current idx: &quot; + str(trial_idx) + &quot;, curr word:&quot; + curr_word)&amp;#10;    &amp;#10;    ### prepare &amp; show current word:&amp;#10;    &amp;#10;    # get current colour&amp;#10;    curr_colour = curr_colours_training[trial_idx]&amp;#10;    # check if it's a target&amp;#10;    curr_target = curr_targets_training[trial_idx]&amp;#10;    &amp;#10;    # get duration for current word&amp;#10;    curr_duration = curr_durations_training[trial_idx]&amp;#10;    &amp;#10;    # get trial number (start counting from 1, so add 1)&amp;#10;    curr_trial_nr = trial_idx + 1&amp;#10;&amp;#10;    # set current word &amp; colour as content of text stimulus&amp;#10;    stim.color = curr_colour&amp;#10;    stim.text = curr_word&amp;#10;    &amp;#10;    # Flicker option 1: use sine-wave (gradient) flicker&amp;#10;    # create current opacity value to continue flickering the word&amp;#10;    #frame_time = core.getTime() # get current time point (in sec)&amp;#10;    #flicker_intensity = np.sin(2 * np.pi * flicker_freq * (frame_time - start_time) + flicker_phase)&amp;#10;    #opacity = (flicker_intensity + 1) / 2&amp;#10;&amp;#10;    # use square-wave (on-off) flicker&amp;#10;    frame_time = core.getTime() # get current time point (in sec)&amp;#10;    time_passed = frame_time - start_time # calculate time passed since start&amp;#10;    cycle_duration = 1 / flicker_freq # calculate duration of one flicker cycle&amp;#10;    cycle_passed = time_passed % cycle_duration # calculate time passed in current flicker cycle&amp;#10;    if cycle_passed &lt; cycle_duration / 2: # if in the first half of the cycle&amp;#10;        opacity = 1 # set opacity to 1&amp;#10;    else: # if in the second half of the cycle&amp;#10;        opacity = 0 # set opacity to 0&amp;#10;        &amp;#10;    stim_mask.opacity = opacity&amp;#10;    &amp;#10;    # show word on screen&amp;#10;    stim.draw() # draw word on screen&amp;#10;    stim_mask.draw() # draw mask on screen&amp;#10;    win.flip() # update the window to clear the screen and display the word&amp;#10;&amp;#10;    # send word onset trigger to LSL stream&amp;#10;    marker_text = &quot;trial_&quot; + str(curr_trial_nr) + &quot;_&quot; + curr_word + &quot;_&quot; + curr_colour + &quot;_&quot; + str(curr_target)&amp;#10;    #out_marker.push_sample([&quot;STIM_ONSET_vistask_training&quot; + marker_text])&amp;#10;    &amp;#10;    # record trial onset time&amp;#10;    onset_time = core.getTime()&amp;#10;    print(&quot;onset_time:&quot;, onset_time)&amp;#10;    print(&quot;word duration: &quot; +  str(onset_time + curr_duration) + &quot; ms&quot;)&amp;#10;    &amp;#10;&amp;#10;    ### wait for key response until curr_duration is over: &amp;#10;&amp;#10;    # create tracker for 0-back responses for the current trial:&amp;#10;    previous_response = False&amp;#10;&amp;#10;    ### start recording responses&amp;#10;    # start while loop that looks for responses&amp;#10;    # --&gt; end while loop only if duration for current word is over&amp;#10;    while core.getTime() &lt; (onset_time + curr_duration):    &amp;#10;        print(&quot;curr time stamp:&quot;, core.getTime())&amp;#10;        # in each iteration, draw word on screen&amp;#10;        # --&gt; flicker again&amp;#10;&amp;#10;        # Flicker option 1: use sine-wave (gradient) flicker&amp;#10;        #frame_time = core.getTime() &amp;#10;        #flicker_intensity = np.sin(2 * np.pi * flicker_freq * (frame_time - start_time) + flicker_phase)&amp;#10;        #opacity = (flicker_intensity + 1) / 2&amp;#10;&amp;#10;        # Flicker option 2: use square-wave (on-off) flicker&amp;#10;        frame_time = core.getTime() &amp;#10;        time_passed = frame_time - start_time &amp;#10;        cycle_duration = 1 / flicker_freq&amp;#10;        cycle_passed = time_passed % cycle_duration&amp;#10;        if cycle_passed &lt; cycle_duration / 2:&amp;#10;            opacity = 1&amp;#10;        else: &amp;#10;            opacity = 0&amp;#10;            &amp;#10;        stim_mask.opacity = opacity&amp;#10;        &amp;#10;        stim.draw()&amp;#10;        stim_mask.draw()&amp;#10;        win.flip()&amp;#10;        &amp;#10;        # if participant pressed button &quot;c&quot; and hasn't already responded in the current trial&amp;#10;        if event.getKeys(['c']) and previous_response == False:&amp;#10;            # get reaction time&amp;#10;            # we measure reaction time from the onset of the current word, even if the target &amp;#10;            # was the word before (or occurred even earlier). &amp;#10;            # In such cases we can infer the actual reaction times from the df later.&amp;#10;            # Reason why I don't use the last target as an onset: Doesn't take into &amp;#10;            # account that there might be false alarm responses.&amp;#10;            curr_nback_RT = (core.getTime() - onset_time) * 1000 # *1000 to convert s to ms    &amp;#10;            ### send trigger to LSL stream to indicate n-back response&amp;#10;            #out_marker.push_sample([&quot;REACTION_visktask__training&quot; + marker_text])&amp;#10;            # only get first target response, we don't care if they press the button more than once in this trial:&amp;#10;            previous_response = True&amp;#10;            print(&quot;detected C key press -- 0-back RT: &quot; + str(curr_nback_RT) + &quot; ms&quot;) # * 1000 to convert s to ms&amp;#10;        # If esc is pressed, end the experiment:&amp;#10;        elif event.getKeys(['escape']):&amp;#10;            core.quit()&amp;#10;    &amp;#10;    ### end trial&amp;#10;    print(&quot;end trial&quot;)&amp;#10;    # stop display of current word&amp;#10;    win.flip()&amp;#10;    &amp;#10;    # check whether response was hit, miss, false alarm or correct rejection&amp;#10;    # they saw a target and there was one: hit&amp;#10;    if previous_response and curr_target:&amp;#10;        curr_nback_response = &quot;hit&quot;&amp;#10;    # they didn't see a target but there was one: miss&amp;#10;    elif previous_response == False and curr_target:&amp;#10;        curr_nback_response = &quot;miss&quot;&amp;#10;        curr_nback_RT = None&amp;#10;    # they didn't see a target and there was none: correct rejection&amp;#10;    elif previous_response == False and curr_target == False:&amp;#10;        curr_nback_response = &quot;correct rejection&quot;&amp;#10;        curr_nback_RT = None&amp;#10;    # they saw a target but there was none: false alarm&amp;#10;    elif previous_response and curr_target == False:&amp;#10;        curr_nback_response = &quot;false alarm&quot;&amp;#10;&amp;#10;    ### End of trial / current word display:&amp;#10;    &amp;#10;    ### save everything in output csv&amp;#10;    thisExp.addData('word', curr_word)&amp;#10;    thisExp.addData('colour', curr_colour)&amp;#10;    thisExp.addData('target', curr_target)&amp;#10;    thisExp.addData('nback_response', curr_nback_response)&amp;#10;    thisExp.addData('nback_RT', curr_nback_RT) # in ms&amp;#10;    thisExp.addData('duration', curr_duration * 1000) # *1000 to convert s to ms&amp;#10;    thisExp.addData('text_nr', None)&amp;#10;    thisExp.addData('trial_nr', curr_trial_nr)&amp;#10;    thisExp.addData('block_cond', 'None')&amp;#10;    thisExp.addData('block_nr', exp_block_counter)&amp;#10;    thisExp.addData('block_name', 'visual_task_training')&amp;#10;&amp;#10;    # start a new row in the csv&amp;#10;    thisExp.nextEntry()&amp;#10;&amp;#10;    ### IF TESTING MODE ENABLED: end loop after 4 trials&amp;#10;    if expInfo['testing_mode'] == &quot;yes&quot;:&amp;#10;        if trial_idx == 3:&amp;#10;            break&amp;#10;    &amp;#10;    ### send word offset trigger to LSL stream   &amp;#10;    #out_marker.push_sample([&quot;STIM_OFFSET_vistask_training&quot; + marker_text])&amp;#10;    &amp;#10;print(&quot;finished visual task block&quot;)&amp;#10;&amp;#10;# change background colour from grey to ivory&amp;#10;change_bg_colour(window = win, &amp;#10;                 start_rgb = dark_bg_col, &amp;#10;                 end_rgb = light_bg_col, &amp;#10;                 seconds = 2)&amp;#10;# Wait for a brief period of time so bg is set&amp;#10;core.wait(0.5)&amp;#10;&amp;#10;# keep background ivory&amp;#10;win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;win.flip()&amp;#10;        &amp;#10;# go to next block  &amp;#10;exp_block_counter += 1&amp;#10;&amp;#10;&amp;#10;&amp;#10;### START VISUAL TASK BLOCK&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="test1" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="test_instr">
      <CodeComponent name="code_2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="### Show instructions&amp;#10;    # set instruction text&amp;#10;    instr_text = locals()[&quot;instr_&quot; + curr_block]&amp;#10;    # create text box&amp;#10;    instr_text_stim = visual.TextStim(win, &amp;#10;                                      text = instr_text, &amp;#10;                                      height = 0.5, # font height: 5° visual angle&amp;#10;                                      font = &quot;Bookman Old Style&quot;,&amp;#10;                                      pos = (0, 0),&amp;#10;                                      color = &quot;black&quot;)&amp;#10;        &amp;#10;    # display the text on screen&amp;#10;    while True:&amp;#10;        # keep background ivory&amp;#10;        win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;        instr_text_stim.draw()&amp;#10;        win.flip()&amp;#10;        # end showing screen if participant presses space&amp;#10;        if 'space' in event.getKeys():&amp;#10;            break &amp;#10;            " valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;instr_text = locals()[&quot;instr_1back_dual_main&quot;]&amp;#10;curr_block = &quot;1back_dual_main&quot;&amp;#10;&amp;#10;# create text box&amp;#10;instr_text_stim = visual.TextStim(win, &amp;#10;                                      text = instr_text, &amp;#10;                                      height = 0.5, # font height: 5° visual angle&amp;#10;                                      font = &quot;Bookman Old Style&quot;,&amp;#10;                                      pos = (0, 7), # move up a bit so there's space left for the picture&amp;#10;                                      color = &quot;black&quot;)&amp;#10;&amp;#10;# create ImageStim object&amp;#10;curr_instr_pic = visual.ImageStim(win, &amp;#10;                                  size = (10, 4),&amp;#10;                                  pos = (0, -2),&amp;#10;                                  image = locals()[&quot;instr_pic_&quot; + curr_block]) # set path to image here&amp;#10;&amp;#10;# display the text &amp; picture on screen&amp;#10;while True:&amp;#10;    # keep background ivory&amp;#10;    win.setColor(light_bg_col, colorSpace='rgb')&amp;#10;    instr_text_stim.draw()&amp;#10;    curr_instr_pic.draw()&amp;#10;    win.flip()&amp;#10;    # end showing screen if participant presses space&amp;#10;    if 'space' in event.getKeys():&amp;#10;        break &amp;#10;&amp;#10;# go to next slide&amp;#10;continueRoutine = False&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_2" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="warning_1">
      <CodeComponent name="warning_sign">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="### Show warning sign if task changes&amp;#10;&amp;#10;# If task in last block (curr_block) is not the same as the next one, show warning.&amp;#10;&amp;#10;# create ImageStim object&amp;#10;curr_instr_pic = visual.ImageStim(win, &amp;#10;                              size = (10, 10),&amp;#10;                              pos = (0, 0),&amp;#10;                              image = warning_sign) # set path to image here&amp;#10;&amp;#10;# draw image on screen&amp;#10;curr_instr_pic.draw()&amp;#10;win.flip()&amp;#10;&amp;#10;# Wait for 4 seconds&amp;#10;core.wait(4)&amp;#10;win.flip()&amp;#10;&amp;#10;# go to next slide&amp;#10;continueRoutine = False" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="warning_sign" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="warning">
      <CodeComponent name="code_3">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="### Show warning sign if task changes&amp;#10;&amp;#10;# If task in last block (curr_block) is not the same as the next one, show warning.&amp;#10;&amp;#10;# To check this, we compare the first letter in the block names.&amp;#10;# I won't show a warning if it switches from rectangles to words,&amp;#10;# I think people will notice it's different.&amp;#10;&amp;#10;if exp_block_counter &lt; 17: # if there are still blocks left&amp;#10;    if curr_block[0] != all_blocks[exp_block_counter][0]:&amp;#10;&amp;#10;        # create ImageStim object&amp;#10;        curr_instr_pic = visual.ImageStim(win, &amp;#10;                                      size = (10, 10),&amp;#10;                                      pos = (0, 0),&amp;#10;                                      image = warning_sign) # set path to image here&amp;#10;&amp;#10;        # draw image on screen&amp;#10;        curr_instr_pic.draw()&amp;#10;        win.flip()&amp;#10;&amp;#10;        # Wait for 4 seconds&amp;#10;        core.wait(4)&amp;#10;        win.flip()&amp;#10;else: print(&quot;task in current block&quot;, curr_block, &quot;is the same as in next block - skipping warning sign!&quot;)&amp;#10;&amp;#10;# go to next slide&amp;#10;continueRoutine = False" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_3" valType="code"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="settings"/>
    <LoopInitiator loopType="TrialHandler" name="blocks">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="30" valType="num"/>
      <Param name="name" updates="None" val="blocks" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="no_text_blocks"/>
    <Routine name="text_blocks"/>
    <Routine name="Q1"/>
    <Routine name="Q2"/>
    <Routine name="Q3"/>
    <Routine name="difficulty"/>
    <Routine name="warning"/>
    <LoopTerminator name="blocks"/>
    <Routine name="warning_1"/>
    <Routine name="vis_task"/>
    <Routine name="warning_1"/>
    <Routine name="pred_tendency"/>
    <Routine name="end"/>
  </Flow>
</PsychoPy2experiment>
